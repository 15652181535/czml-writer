// This file was generated automatically by GenerateFromSchema.  Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer

using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.IO;
using CesiumLanguageWriter;
using NUnit.Framework;

namespace CesiumLanguageWriterTests
{
    [TestFixture]
    [SuppressMessage("ReSharper", "MemberCanBeMadeStatic.Local")]
    public class TestGenerateValidationDocument
    {
        private readonly JulianDate m_documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0).ToJulianDate();
        private readonly JulianDate m_documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0).ToJulianDate();
        private TextWriter m_streamWriter;
        private TextWriter m_assertionsWriter;
        private TextWriter m_extensionsAssertionsWriter;
        private CesiumOutputStream m_output;
        private CesiumStreamWriter m_writer;
        private void WriteAssertionBoth(string s)
        {
            m_assertionsWriter.WriteLine(s);
            m_extensionsAssertionsWriter.WriteLine(s);
        }
        private static IList<T> CreateList<T>(T t1, T t2)
        {
            return new List<T> { t1, t2 };
        }
        private static IList<T> CreateList<T>(params T[] ts)
        {
            return ts;
        }
        [Test]
        public void GenerateValidationDocument()
        {
            using (m_streamWriter = new StreamWriter("ValidationDocument.czml"))
            using (m_assertionsWriter = new StreamWriter("ValidationDocumentAssertions.js"))
            using (m_extensionsAssertionsWriter = new StreamWriter("ValidationDocumentExtensionAssertions.js"))
            {
                WriteAssertionBoth("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
                WriteAssertionBoth("    /*jshint -W120 */");
                WriteAssertionBoth("    var e;");
                WriteAssertionBoth("    var date;");
                WriteAssertionBoth("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
                WriteAssertionBoth("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
                m_output = new CesiumOutputStream(m_streamWriter) { PrettyFormatting = true };
                m_writer = new CesiumStreamWriter();
                m_output.WriteStartSequence();
                WriteClock();
                WriteConstantValues();
                WriteReferenceValues();
                WriteSampledValues();
                m_output.WriteEndSequence();
                WriteAssertionBoth("});");
            }
        }
        private void WriteClock()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("document");
                packet.WriteName("ValidationDocument");
                packet.WriteVersion("1.0");
                using (var clock = packet.OpenClockProperty())
                {
                    clock.WriteInterval(m_documentStartDate, m_documentStopDate);
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
                    clock.WriteCurrentTime(m_documentStartDate);
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
                    clock.WriteMultiplier(1.0);
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.multiplier).toEqual(1.0);");
                    clock.WriteRange(ClockRange.Unbounded);
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
                    clock.WriteStep(ClockStep.SystemClockMultiplier);
                    m_assertionsWriter.WriteLine("    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
                }
            }
        }
        private void WriteConstantValues()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("Constant");
                WriteAssertionBoth("    var constant = e = dataSource.entities.getById('Constant');");
                WriteAssertionBoth("    expect(e).toBeDefined();");
                WriteAssertionBoth("    date = JulianDate.now();");
                using (var w = packet.OpenDescriptionProperty())
                {
                    w.WriteString("string1");
                    m_assertionsWriter.WriteLine("    expect(e.description.getValue(date)).toEqual('string1');");
                }
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(1, 2, 3));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteUnitQuaternion(new UnitQuaternion(0.182574185835055, 0.365148371670111, 0.547722557505166, 0.730296743340221));
                    m_assertionsWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.365148371670111, 0.547722557505166, 0.730296743340221, 0.182574185835055), 1e-14);");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteCartesian(new Cartesian(4, 5, 6));
                    m_assertionsWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(4, 5, 6));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenImageProperty())
                    {
                        w2.WriteUri("http://example.com/1", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual('http://example.com/1');");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(1.0);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(1.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new Rectangular(1, 2));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(1, 2));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new Cartesian(7, 8, 9));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(7, 8, 9));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteHeightReference(CesiumHeightReference.ClampToGround);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(1, 2, 3, 4));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(2.0);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(2.0);");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteUnitCartesian(new UnitCartesian(0.267261241912424, 0.534522483824849, 0.801783725737273));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqualEpsilon(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273), 1e-14);");
                    }
                    using (var w2 = w.OpenSizeInMetersProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(3.0);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(3.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(4.0);
                        m_assertionsWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(4.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(1, 2, 3, 4));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(1, 2, 3, 4));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(5, 6, 7, 8));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(5, 6, 7, 8));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(9, 10, 11, 12));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(9, 10, 11, 12));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteBoundingRectangle(BoundingRectangle.FromWidthHeight(1, 2, 3, 4));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(1, 2, 3, 4));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteCartesian(new Cartesian(10, 11, 12));
                        m_assertionsWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(10, 11, 12));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(5, 6, 7, 8));
                                m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(9, 10, 11, 12));
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(10, 11, 12, 9));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(5.0);
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(5.0);");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(CreateList(new Cartesian(1, 2, 3), new Cartesian(4, 5, 6)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(1, 2, 3), new Cartesian3(4, 5, 6) ]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(6.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(6.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(7.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(7.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(8.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(8.0);");
                    }
                    using (var w2 = w.OpenCornerTypeProperty())
                    {
                        w2.WriteCornerType(CesiumCornerType.Beveled);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(9.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(9.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(13, 14, 15, 16));
                                m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(17, 18, 19, 20));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(18, 19, 20, 17));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(10.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(10.0);");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(11.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(11.0);");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteNumber(12.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(12.0);");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteNumber(13.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(13.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(21, 22, 23, 24));
                                m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(22, 23, 24, 21));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(25, 26, 27, 28));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(26, 27, 28, 25));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(14.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(14.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(15.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(15.0);");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteNumber(16.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(16.0);");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteNumber(17.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(17.0);");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteNumber(18.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(18.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(19.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(19.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(20.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(20.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(21.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(21.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(22.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(22.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(23.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(23.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(29, 30, 31, 32));
                                m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(30, 31, 32, 29));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(33, 34, 35, 36));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(34, 35, 36, 33));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(24.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(24.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(25.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(25.0);");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteCartesian(new Cartesian(13, 14, 15));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(13, 14, 15));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(37, 38, 39, 40));
                                m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(38, 39, 40, 37));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(41, 42, 43, 44));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(42, 43, 44, 41));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(26.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(26.0);");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteNumber(27.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(27.0);");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteNumber(28.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(28.0);");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteNumber(29.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(29.0);");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenTextProperty())
                    {
                        w2.WriteString("string2");
                        m_assertionsWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual('string2');");
                    }
                    using (var w2 = w.OpenFontProperty())
                    {
                        w2.WriteFont("6px sans-serif");
                        m_assertionsWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual('6px sans-serif');");
                    }
                    using (var w2 = w.OpenStyleProperty())
                    {
                        w2.WriteLabelStyle(CesiumLabelStyle.FillAndOutline);
                        m_assertionsWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(30.0);
                        m_assertionsWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(30.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new Rectangular(3, 4));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(3, 4));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new Cartesian(16, 17, 18));
                        m_assertionsWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(16, 17, 18));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                        m_assertionsWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                        m_assertionsWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteHeightReference(CesiumHeightReference.ClampToGround);
                        m_assertionsWriter.WriteLine("    expect(e.label.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(45, 46, 47, 48));
                        m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(46, 47, 48, 45));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(49, 50, 51, 52));
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(31.0);
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(31.0);");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(13, 14, 15, 16));
                        m_assertionsWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(13, 14, 15, 16));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(17, 18, 19, 20));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(17, 18, 19, 20));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenGltfProperty())
                    {
                        w2.WriteUri("http://example.com/2", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual('http://example.com/2');");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(32.0);
                        m_assertionsWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(32.0);");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteNumber(33.0);
                        m_assertionsWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(33.0);");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteNumber(34.0);
                        m_assertionsWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(34.0);");
                    }
                    using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenRunAnimationsProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteHeightReference(CesiumHeightReference.ClampToGround);
                        m_assertionsWriter.WriteLine("    expect(e.model.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(53, 54, 55, 56));
                        m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(date)).toEqual(Color.fromBytes(54, 55, 56, 53));");
                    }
                    using (var w2 = w.OpenColorBlendModeProperty())
                    {
                        w2.WriteColorBlendMode(CesiumColorBlendMode.Replace);
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendMode.getValue(date)).toEqual(ColorBlendMode.REPLACE);");
                    }
                    using (var w2 = w.OpenColorBlendAmountProperty())
                    {
                        w2.WriteNumber(35.0);
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendAmount.getValue(date)).toEqual(35.0);");
                    }
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    {
                        using (var a = w2.OpenNodeTransformationProperty("prop"))
                        {
                            using (var w3 = a.OpenTranslationProperty())
                            {
                                w3.WriteCartesian(new Cartesian(19, 20, 21));
                                m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.prop.translation.getValue(date)).toEqual(new Cartesian3(19, 20, 21));");
                            }
                            using (var w3 = a.OpenRotationProperty())
                            {
                                w3.WriteUnitQuaternion(new UnitQuaternion(0.379049021789452, 0.454858826147342, 0.530668630505232, 0.606478434863123));
                                m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.prop.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.454858826147342, 0.530668630505232, 0.606478434863123, 0.379049021789452), 1e-14);");
                            }
                            using (var w3 = a.OpenScaleProperty())
                            {
                                w3.WriteCartesian(new Cartesian(22, 23, 24));
                                m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.prop.scale.getValue(date)).toEqual(new Cartesian3(22, 23, 24));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(36.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(36.0);");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteNumber(37.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(37.0);");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteNumber(38.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(38.0);");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteNumber(39.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(39.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(57, 58, 59, 60));
                                m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(58, 59, 60, 57));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteNumber(40.0);
                        m_assertionsWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(40.0);");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteHeightReference(CesiumHeightReference.ClampToGround);
                        m_assertionsWriter.WriteLine("    expect(e.point.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(61, 62, 63, 64));
                        m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(65, 66, 67, 68));
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(66, 67, 68, 65));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(41.0);
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(41.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(21, 22, 23, 24));
                        m_assertionsWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(21, 22, 23, 24));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(25, 26, 27, 28));
                        m_assertionsWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(25, 26, 27, 28));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(CreateList(new Cartesian(7, 8, 9), new Cartesian(10, 11, 12)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ new Cartesian3(7, 8, 9), new Cartesian3(10, 11, 12) ]);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(42.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(42.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(43.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(43.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(44.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(44.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(45.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(45.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(69, 70, 71, 72));
                                m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(73, 74, 75, 76));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(46.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(46.0);");
                    }
                    using (var w2 = w.OpenPerPositionHeightProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(CreateList(new Cartesian(13, 14, 15), new Cartesian(16, 17, 18)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(13, 14, 15), new Cartesian3(16, 17, 18) ]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(47.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(47.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(48.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(48.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(77, 78, 79, 80));
                                m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(78, 79, 80, 77));");
                            }
                        }
                    }
                    using (var w2 = w.OpenFollowSurfaceProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsen(new CartographicExtent(1, 0.429203673205103, 1.4292036732051, 0.858407346410207));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(1, 0.429203673205103, 1.4292036732051, 0.858407346410207));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(49.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(49.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(50.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(50.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(51.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(51.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(52.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(52.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(53.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(53.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(81, 82, 83, 84));
                                m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(82, 83, 84, 81));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(85, 86, 87, 88));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(86, 87, 88, 85));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(54.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(54.0);");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(CreateList(new Cartesian(19, 20, 21), new Cartesian(22, 23, 24)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(19, 20, 21), new Cartesian3(22, 23, 24) ]);");
                    }
                    using (var w2 = w.OpenMinimumHeightsProperty())
                    {
                        w2.WriteArray(CreateList<double>(1, 2));
                        m_assertionsWriter.WriteLine("    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 1, 2 ]);");
                    }
                    using (var w2 = w.OpenMaximumHeightsProperty())
                    {
                        w2.WriteArray(CreateList<double>(3, 4));
                        m_assertionsWriter.WriteLine("    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 3, 4 ]);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(55.0);
                        m_assertionsWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(55.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(89, 90, 91, 92));
                                m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(93, 94, 95, 96));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(56.0);
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(56.0);");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteNumber(57.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(57.0);");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteNumber(58.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(58.0);");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteNumber(59.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(59.0);");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteNumber(60.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(60.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(61.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.radius.getValue(date)).toEqual(61.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(97, 98, 99, 100));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(62.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(62.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(101, 102, 103, 104));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(102, 103, 104, 101));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(105, 106, 107, 108));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(106, 107, 108, 105));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(109, 110, 111, 112));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(113, 114, 115, 116));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(117, 118, 119, 120));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(118, 119, 120, 117));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(121, 122, 123, 124));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(122, 123, 124, 121));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(63.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(63.0);");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDirectionsProperty())
                    {
                        w2.WriteSpherical(CreateList(new Spherical(1, 2, 3), new Spherical(4, 5, 6)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1, 2, 3), new Spherical(4, 5, 6) ]);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(64.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.radius.getValue(date)).toEqual(64.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(125, 126, 127, 128));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(126, 127, 128, 125));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(65.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(65.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(129, 130, 131, 132));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(130, 131, 132, 129));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(133, 134, 135, 136));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(137, 138, 139, 140));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(141, 142, 143, 144));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(145, 146, 147, 148));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(146, 147, 148, 145));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(149, 150, 151, 152));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(150, 151, 152, 149));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(66.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(66.0);");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteNumber(67.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(67.0);");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteNumber(68.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(68.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(69.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.radius.getValue(date)).toEqual(69.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(153, 154, 155, 156));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(154, 155, 156, 153));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(70.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(70.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(157, 158, 159, 160));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(158, 159, 160, 157));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(161, 162, 163, 164));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(162, 163, 164, 161));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(165, 166, 167, 168));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(169, 170, 171, 172));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(173, 174, 175, 176));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(177, 178, 179, 180));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(178, 179, 180, 177));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(71.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(71.0);");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDirectionsProperty())
                    {
                        w2.WriteSpherical(CreateList(new Spherical(7, 8, 9), new Spherical(10, 11, 12)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(7, 8, 9), new Spherical(10, 11, 12) ]);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(72.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.radius.getValue(date)).toEqual(72.0);");
                    }
                    using (var w2 = w.OpenPerDirectionRadiusProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(181, 182, 183, 184));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                            }
                        }
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(185, 186, 187, 188));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(73.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineWidth.getValue(date)).toEqual(73.0);");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteNumber(74.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.numberOfRings.getValue(date)).toEqual(74.0);");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(189, 190, 191, 192));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(190, 191, 192, 189));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteSpherical(new Spherical(1, 2, 3));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(1, 2, 3)));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(75.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.length.getValue(date)).toEqual(75.0);");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteNumber(76.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(76.0);");
                    }
                }
            }
            WriteConstantValuesIndividual();
        }
        private void WriteConstantValuesIndividual()
        {
            WriteConstantValuesIndividualDescription();
            WriteConstantValuesIndividualPosition();
            WriteConstantValuesIndividualOrientation();
            WriteConstantValuesIndividualViewFrom();
            WriteConstantValuesIndividualBillboard();
            WriteConstantValuesIndividualBox();
            WriteConstantValuesIndividualCorridor();
            WriteConstantValuesIndividualCylinder();
            WriteConstantValuesIndividualEllipse();
            WriteConstantValuesIndividualEllipsoid();
            WriteConstantValuesIndividualLabel();
            WriteConstantValuesIndividualModel();
            WriteConstantValuesIndividualPath();
            WriteConstantValuesIndividualPoint();
            WriteConstantValuesIndividualPolygon();
            WriteConstantValuesIndividualPolyline();
            WriteConstantValuesIndividualRectangle();
            WriteConstantValuesIndividualWall();
            WriteConstantValuesIndividualConicSensor();
            WriteConstantValuesIndividualCustomPatternSensor();
            WriteConstantValuesIndividualRectangularSensor();
            WriteConstantValuesIndividualFan();
            WriteConstantValuesIndividualVector();
        }
        private void WriteConstantValuesIndividualDescription()
        {
        }
        private void WriteConstantValuesIndividualPosition()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant1')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicRadians(new Cartographic(1, 0.429203673205103, 3));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(Cartesian3.fromRadians(1, 0.429203673205103, 3));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant2')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicDegrees(new Cartographic(4, 5, 6));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(Cartesian3.fromDegrees(4, 5, 6));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant3");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant3')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesianVelocity(new Motion<Cartesian>(new Cartesian(1, 2, 3), new Cartesian(4, 5, 6)));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
                }
            }
        }
        private void WriteConstantValuesIndividualOrientation()
        {
        }
        private void WriteConstantValuesIndividualViewFrom()
        {
        }
        private void WriteConstantValuesIndividualBillboard()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant4");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant4')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(1, 2, 3, 4));
                    m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqualEpsilon(new Color(0.00784313725490196, 0.0117647058823529, 0.0156862745098039, 0.00392156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant5");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant5')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenAlignedAxisProperty())
                {
                    w2.WriteUnitSpherical(new UnitSpherical(1, 2));
                    m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(1, 2)));");
                }
            }
        }
        private void WriteConstantValuesIndividualBox()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant6");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant6')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(5, 6, 7, 8));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_box_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_image')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/3", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual('http://example.com/3');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(5, 6));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(5, 6));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(193, 194, 195, 196));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(194, 195, 196, 193));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_box_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_grid')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(197, 198, 199, 200));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(198, 199, 200, 197));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(77.0);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(77.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(7, 8));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(7, 8));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(9, 10));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(9, 10));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(11, 12));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(11, 12));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_box_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(201, 202, 203, 204));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(205, 206, 207, 208));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(78.0);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(78.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(79.0);
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(79.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material1')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(9, 10, 11, 12));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material2')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(13, 14, 15, 16));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material3");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material3')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(17, 18, 19, 20));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material4");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material4')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(21, 22, 23, 24));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant7");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant7')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(25, 26, 27, 28));
                    m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.101960784313725, 0.105882352941176, 0.109803921568627, 0.0980392156862745), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualCorridor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant8");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant8')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(CreateList(new Cartographic(1, 0.429203673205103, 3), new Cartographic(0.858407346410207, 0.28761101961531, 6)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(1, 0.429203673205103, 3), Cartesian3.fromRadians(0.858407346410207, 0.28761101961531, 6) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant9");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant9')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(CreateList(new Cartographic(7, 8, 9), new Cartographic(10, 11, 12)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(7, 8, 9), Cartesian3.fromDegrees(10, 11, 12) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant10");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant10')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(29, 30, 31, 32));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_corridor_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_image')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/4", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/4');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(13, 14));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(13, 14));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(209, 210, 211, 212));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_corridor_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_grid')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(213, 214, 215, 216));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(214, 215, 216, 213));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(80.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(80.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(15, 16));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(15, 16));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(17, 18));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(17, 18));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(19, 20));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(19, 20));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_corridor_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(217, 218, 219, 220));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(218, 219, 220, 217));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(221, 222, 223, 224));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(222, 223, 224, 221));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(81.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(81.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(82.0);
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(82.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material5");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material5')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(33, 34, 35, 36));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material6");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material6')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(37, 38, 39, 40));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material7");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material7')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(41, 42, 43, 44));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material8");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material8')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(45, 46, 47, 48));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant11");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant11')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(49, 50, 51, 52));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.196078431372549, 0.2, 0.203921568627451, 0.192156862745098), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualCylinder()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant12");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant12')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(53, 54, 55, 56));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_cylinder_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_image')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/5", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/5');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(21, 22));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(21, 22));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(225, 226, 227, 228));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(226, 227, 228, 225));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_cylinder_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_grid')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(229, 230, 231, 232));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(230, 231, 232, 229));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(83.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(83.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(23, 24));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(23, 24));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(25, 26));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(25, 26));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(27, 28));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(27, 28));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_cylinder_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(233, 234, 235, 236));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(237, 238, 239, 240));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(238, 239, 240, 237));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(84.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(84.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(85.0);
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(85.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material9");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material9')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(57, 58, 59, 60));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material10");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material10')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(61, 62, 63, 64));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material11");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material11')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(65, 66, 67, 68));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material12");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material12')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(69, 70, 71, 72));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant13");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant13')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(73, 74, 75, 76));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualEllipse()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant14");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant14')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(77, 78, 79, 80));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipse_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_image')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/6", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual('http://example.com/6');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(29, 30));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(29, 30));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(241, 242, 243, 244));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(242, 243, 244, 241));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipse_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_grid')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(245, 246, 247, 248));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(86.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(86.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(31, 32));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(31, 32));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(33, 34));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(33, 34));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(35, 36));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(35, 36));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipse_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(249, 250, 251, 252));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(253, 254, 0, 1));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(254, 0, 1, 253));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(87.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(87.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(88.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(88.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material13");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material13')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(81, 82, 83, 84));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material14");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material14')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(85, 86, 87, 88));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material15");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material15')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(89, 90, 91, 92));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material16");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material16')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(93, 94, 95, 96));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant15");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant15')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(97, 98, 99, 100));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.384313725490196, 0.388235294117647, 0.392156862745098, 0.380392156862745), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualEllipsoid()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant16");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant16')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(101, 102, 103, 104));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipsoid_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_image')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/7", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual('http://example.com/7');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(37, 38));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(37, 38));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(2, 3, 4, 5));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipsoid_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_grid')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(6, 7, 8, 9));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(89.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(89.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(39, 40));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(39, 40));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(41, 42));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(41, 42));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(43, 44));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(43, 44));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_ellipsoid_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(10, 11, 12, 13));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(14, 15, 16, 17));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(90.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(90.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(91.0);
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(91.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material17");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material17')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(105, 106, 107, 108));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material18");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material18')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(109, 110, 111, 112));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material19");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material19')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(113, 114, 115, 116));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material20");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material20')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(117, 118, 119, 120));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant17");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant17')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(121, 122, 123, 124));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.47843137254902, 0.482352941176471, 0.486274509803922, 0.474509803921569), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualLabel()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant18");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant18')).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenFillColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(125, 126, 127, 128));
                    m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant19");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant19')).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(129, 130, 131, 132));
                    m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualModel()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant20");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant20')).toBeDefined();");
                using (var w = packet.OpenModelProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(133, 134, 135, 136));
                    m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(date)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualPath()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant21");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant21')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(137, 138, 139, 140));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_polylineOutline");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(18, 19, 20, 21));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(22, 23, 24, 25));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(23, 24, 25, 22));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(92.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(92.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_polylineArrow");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineArrow')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(26, 27, 28, 29));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_polylineGlow");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineGlow')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(30, 31, 32, 33));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(93.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(93.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_image')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/8", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual('http://example.com/8');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(45, 46));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(45, 46));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(34, 35, 36, 37));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_grid')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(38, 39, 40, 41));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(94.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(94.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(47, 48));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(47, 48));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(49, 50));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(49, 50));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(51, 52));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(51, 52));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_path_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(42, 43, 44, 45));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(46, 47, 48, 49));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(95.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(95.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(96.0);
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(96.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material21");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material21')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(141, 142, 143, 144));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material22");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material22')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(145, 146, 147, 148));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material23");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material23')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(149, 150, 151, 152));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material24");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material24')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(153, 154, 155, 156));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material25");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material25')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(157, 158, 159, 160));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material26");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material26')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(161, 162, 163, 164));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material27");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material27')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(165, 166, 167, 168));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material28");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material28')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(169, 170, 171, 172));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.666666666666667, 0.670588235294118, 0.674509803921569, 0.662745098039216), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualPoint()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant22");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant22')).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(173, 174, 175, 176));
                    m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant23");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant23')).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(177, 178, 179, 180));
                    m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualPolygon()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant24");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant24')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(CreateList(new Cartographic(0.433629385640828, 1.43362938564083, 15), new Cartographic(0.292036732051034, 1.29203673205103, 18)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromRadians(0.433629385640828, 1.43362938564083, 15), Cartesian3.fromRadians(0.292036732051034, 1.29203673205103, 18) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant25");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant25')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(CreateList(new Cartographic(19, 20, 21), new Cartographic(22, 23, 24)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromDegrees(19, 20, 21), Cartesian3.fromDegrees(22, 23, 24) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant26");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant26')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(181, 182, 183, 184));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polygon_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_image')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/9", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual('http://example.com/9');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(53, 54));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(53, 54));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(50, 51, 52, 53));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polygon_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_grid')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(54, 55, 56, 57));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(55, 56, 57, 54));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(97.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(97.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(55, 56));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(55, 56));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(57, 58));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(57, 58));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(59, 60));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(59, 60));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polygon_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(58, 59, 60, 61));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(59, 60, 61, 58));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(62, 63, 64, 65));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(63, 64, 65, 62));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(98.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(98.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(99.0);
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(99.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material29");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material29')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(185, 186, 187, 188));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material30");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material30')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(189, 190, 191, 192));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material31");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material31')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(193, 194, 195, 196));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material32");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material32')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(197, 198, 199, 200));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant27");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant27')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(201, 202, 203, 204));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualPolyline()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant28");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant28')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(CreateList(new Cartographic(1.43805509807655, 0.867258771281655, 27), new Cartographic(1.29646244448676, 0.725666117691862, 30)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(1.43805509807655, 0.867258771281655, 27), Cartesian3.fromRadians(1.29646244448676, 0.725666117691862, 30) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant29");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant29')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(CreateList(new Cartographic(31, 32, 33), new Cartographic(34, 35, 36)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(31, 32, 33), Cartesian3.fromDegrees(34, 35, 36) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant30");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant30')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(205, 206, 207, 208));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_polylineOutline");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(66, 67, 68, 69));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(70, 71, 72, 73));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(100.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(100.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_polylineArrow");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineArrow')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(74, 75, 76, 77));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_polylineGlow");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineGlow')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(78, 79, 80, 81));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(101.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(101.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_image')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/10", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual('http://example.com/10');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(61, 62));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(61, 62));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_grid')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(86, 87, 88, 89));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(102.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(102.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(63, 64));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(63, 64));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(65, 66));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(65, 66));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(67, 68));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(67, 68));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_polyline_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(90, 91, 92, 93));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(94, 95, 96, 97));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(95, 96, 97, 94));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(103.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(103.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(104.0);
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(104.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material33");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material33')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(209, 210, 211, 212));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material34");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material34')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(213, 214, 215, 216));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material35");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material35')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(217, 218, 219, 220));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material36");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material36')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(221, 222, 223, 224));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material37");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material37')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(225, 226, 227, 228));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material38");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material38')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(229, 230, 231, 232));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material39");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material39')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(233, 234, 235, 236));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material40");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material40')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(237, 238, 239, 240));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualRectangle()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant31");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant31')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenCoordinatesProperty())
                {
                    w2.WriteWsenDegrees(new CartographicExtent(5, 6, 7, 8));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(Rectangle.fromDegrees(5, 6, 7, 8));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant32");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant32')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(241, 242, 243, 244));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.949019607843137, 0.952941176470588, 0.956862745098039, 0.945098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangle_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_image')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/11", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/11');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(69, 70));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(69, 70));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(98, 99, 100, 101));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangle_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_grid')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(102, 103, 104, 105));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(103, 104, 105, 102));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(105.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(105.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(71, 72));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(71, 72));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(73, 74));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(73, 74));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(75, 76));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(75, 76));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangle_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(106, 107, 108, 109));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(107, 108, 109, 106));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(110, 111, 112, 113));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(106.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(106.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(107.0);
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(107.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material41");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material41')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(245, 246, 247, 248));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material42");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material42')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(249, 250, 251, 252));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material43");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material43')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(253, 254, 0, 1));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.996078431372549, 0, 0.00392156862745098, 0.992156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material44");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material44')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(2, 3, 4, 5));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant33");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant33')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(6, 7, 8, 9));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualWall()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant34");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant34')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(CreateList(new Cartographic(0.871684483717379, 0.300888156922483, 39), new Cartographic(0.730091830127586, 0.159295503332689, 42)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.871684483717379, 0.300888156922483, 39), Cartesian3.fromRadians(0.730091830127586, 0.159295503332689, 42) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant35");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant35')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(CreateList(new Cartographic(43, 44, 45), new Cartographic(1, 2, 48)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(43, 44, 45), Cartesian3.fromDegrees(1, 2, 48) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant36");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant36')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(10, 11, 12, 13));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_wall_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_image')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/12", CesiumResourceBehavior.LinkTo);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/12');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(77, 78));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(77, 78));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(114, 115, 116, 117));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_wall_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_grid')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(118, 119, 120, 121));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(119, 120, 121, 118));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(108.0);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(108.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(79, 80));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(79, 80));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(81, 82));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(81, 82));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(83, 84));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(83, 84));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_wall_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(122, 123, 124, 125));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(126, 127, 128, 129));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(109.0);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(109.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(110.0);
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(110.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material45");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material45')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(14, 15, 16, 17));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material46");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material46')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(18, 19, 20, 21));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material47");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material47')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(22, 23, 24, 25));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material48");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material48')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(26, 27, 28, 29));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant37");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant37')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(30, 31, 32, 33));
                    m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualConicSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant38");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant38')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(34, 35, 36, 37));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant39");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant39')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(38, 39, 40, 41));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/13", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/13');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(85, 86));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(85, 86));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(130, 131, 132, 133));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(134, 135, 136, 137));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(135, 136, 137, 134));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(111.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(111.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(87, 88));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(87, 88));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(89, 90));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(89, 90));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(91, 92));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(91, 92));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(138, 139, 140, 141));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(139, 140, 141, 138));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(142, 143, 144, 145));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(112.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(112.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(113.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(113.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material49");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material49')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(42, 43, 44, 45));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material50");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material50')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(46, 47, 48, 49));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.184313725490196, 0.188235294117647, 0.192156862745098, 0.180392156862745), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material51");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material51')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(50, 51, 52, 53));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material52");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material52')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(54, 55, 56, 57));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant40");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant40')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(58, 59, 60, 61));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.231372549019608, 0.235294117647059, 0.23921568627451, 0.227450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/14", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/14');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(93, 94));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(93, 94));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(146, 147, 148, 149));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(150, 151, 152, 153));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(114.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(114.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(95, 96));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(95, 96));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(97, 98));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(97, 98));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(99, 100));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(99, 100));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(154, 155, 156, 157));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(158, 159, 160, 161));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(115.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(115.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(116.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(116.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material53");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material53')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(62, 63, 64, 65));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material54");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material54')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(66, 67, 68, 69));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material55");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material55')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(70, 71, 72, 73));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material56");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material56')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(74, 75, 76, 77));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant41");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant41')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(78, 79, 80, 81));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/15", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/15');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(101, 102));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(101, 102));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(162, 163, 164, 165));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(163, 164, 165, 162));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(166, 167, 168, 169));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(167, 168, 169, 166));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(117.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(117.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(103, 104));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(103, 104));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(105, 106));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(105, 106));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(107, 108));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(107, 108));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(170, 171, 172, 173));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(171, 172, 173, 170));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(174, 175, 176, 177));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(175, 176, 177, 174));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(118.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(118.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(119.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(119.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material57");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material57')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(82, 83, 84, 85));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material58");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material58')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(86, 87, 88, 89));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material59");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material59')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(90, 91, 92, 93));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material60");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material60')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(94, 95, 96, 97));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant42");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant42')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(98, 99, 100, 101));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/16", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/16');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(109, 110));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(109, 110));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(178, 179, 180, 181));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(179, 180, 181, 178));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(182, 183, 184, 185));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(183, 184, 185, 182));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(120.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(120.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(111, 112));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(111, 112));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(113, 114));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(113, 114));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(115, 116));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(115, 116));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(186, 187, 188, 189));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(190, 191, 192, 193));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(191, 192, 193, 190));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(121.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(121.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(122.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(122.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material61");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material61')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(102, 103, 104, 105));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material62");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material62')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(106, 107, 108, 109));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.419607843137255, 0.423529411764706, 0.427450980392157, 0.415686274509804), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material63");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material63')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(110, 111, 112, 113));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material64");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material64')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(114, 115, 116, 117));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant43");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant43')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(118, 119, 120, 121));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/17", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/17');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(117, 118));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(117, 118));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(194, 195, 196, 197));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(195, 196, 197, 194));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(198, 199, 200, 201));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(123.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(123.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(119, 120));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(119, 120));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(121, 122));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(121, 122));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(123, 124));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(123, 124));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(202, 203, 204, 205));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(206, 207, 208, 209));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(207, 208, 209, 206));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(124.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(124.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(125.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(125.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material65");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material65')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(122, 123, 124, 125));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material66");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material66')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(126, 127, 128, 129));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material67");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material67')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(130, 131, 132, 133));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material68");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material68')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(134, 135, 136, 137));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant44");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant44')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(138, 139, 140, 141));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualCustomPatternSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant45");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant45')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitSpherical(CreateList(new UnitSpherical(1, 2), new UnitSpherical(3, 4)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1, 2), new Spherical(3, 4) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant46");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant46')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteCartesian(CreateList(new Cartesian(25, 26, 27), new Cartesian(28, 29, 30)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(25, 26, 27)), Spherical.fromCartesian3(new Cartesian3(28, 29, 30)) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant47");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant47')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitCartesian(CreateList(new UnitCartesian(0.267261241912424, 0.534522483824849, 0.801783725737273), new UnitCartesian(0.455842305838552, 0.56980288229819, 0.683763458757828)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273)), Spherical.fromCartesian3(new Cartesian3(0.455842305838552, 0.56980288229819, 0.683763458757828)) ], 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant48");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant48')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(142, 143, 144, 145));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant49");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant49')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(146, 147, 148, 149));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/18", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/18');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(125, 126));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(125, 126));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(210, 211, 212, 213));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(211, 212, 213, 210));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(214, 215, 216, 217));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(215, 216, 217, 214));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(126.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(126.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(127, 128));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(127, 128));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(129, 130));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(129, 130));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(131, 132));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(131, 132));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(218, 219, 220, 221));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(219, 220, 221, 218));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(222, 223, 224, 225));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(127.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(127.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(128.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(128.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material69");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material69')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(150, 151, 152, 153));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material70");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material70')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(154, 155, 156, 157));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.607843137254902, 0.611764705882353, 0.615686274509804, 0.603921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material71");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material71')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(158, 159, 160, 161));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material72");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material72')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(162, 163, 164, 165));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant50");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant50')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(166, 167, 168, 169));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.654901960784314, 0.658823529411765, 0.662745098039216, 0.650980392156863), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/19", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/19');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(133, 134));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(133, 134));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(226, 227, 228, 229));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(230, 231, 232, 233));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(231, 232, 233, 230));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(129.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(129.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(135, 136));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(135, 136));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(137, 138));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(137, 138));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(139, 140));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(139, 140));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(234, 235, 236, 237));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(235, 236, 237, 234));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(238, 239, 240, 241));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(130.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(130.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(131.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(131.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material73");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material73')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(170, 171, 172, 173));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material74");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material74')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(174, 175, 176, 177));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material75");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material75')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(178, 179, 180, 181));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material76");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material76')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(182, 183, 184, 185));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.717647058823529, 0.72156862745098, 0.725490196078431, 0.713725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant51");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant51')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(186, 187, 188, 189));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/20", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/20');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(141, 142));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(141, 142));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(242, 243, 244, 245));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(132.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(132.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(143, 144));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(143, 144));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(145, 146));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(145, 146));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(147, 148));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(147, 148));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(250, 251, 252, 253));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(254, 0, 1, 2));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(0, 1, 2, 254));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(133.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(133.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(134.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(134.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material77");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material77')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(190, 191, 192, 193));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material78");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material78')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(194, 195, 196, 197));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material79");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material79')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(198, 199, 200, 201));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material80");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material80')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(202, 203, 204, 205));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.796078431372549, 0.8, 0.803921568627451, 0.792156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant52");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant52')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(206, 207, 208, 209));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/21", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/21');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(149, 150));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(149, 150));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(3, 4, 5, 6));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(7, 8, 9, 10));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(135.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(135.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(151, 152));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(151, 152));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(153, 154));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(153, 154));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(155, 156));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(155, 156));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(11, 12, 13, 14));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(15, 16, 17, 18));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(16, 17, 18, 15));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(136.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(136.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(137.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(137.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material81");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material81')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(210, 211, 212, 213));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material82");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material82')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(214, 215, 216, 217));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material83");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material83')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(218, 219, 220, 221));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material84");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material84')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(222, 223, 224, 225));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant53");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant53')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(226, 227, 228, 229));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/22", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/22');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(157, 158));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(157, 158));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(19, 20, 21, 22));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(20, 21, 22, 19));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(23, 24, 25, 26));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(24, 25, 26, 23));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(138.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(138.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(159, 160));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(159, 160));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(161, 162));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(161, 162));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(163, 164));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(163, 164));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(27, 28, 29, 30));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(28, 29, 30, 27));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(31, 32, 33, 34));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(32, 33, 34, 31));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(139.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(139.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(140.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(140.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material85");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material85')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(230, 231, 232, 233));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material86");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material86')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(234, 235, 236, 237));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material87");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material87')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(238, 239, 240, 241));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material88");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material88')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(242, 243, 244, 245));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant54");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant54')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(246, 247, 248, 249));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualRectangularSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant55");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant55')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(250, 251, 252, 253));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant56");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant56')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(254, 0, 1, 2));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/23", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/23');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(165, 166));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(165, 166));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(35, 36, 37, 38));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(39, 40, 41, 42));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(40, 41, 42, 39));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(141.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(141.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(167, 168));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(167, 168));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(169, 170));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(169, 170));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(171, 172));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(171, 172));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(43, 44, 45, 46));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(47, 48, 49, 50));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(142.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(142.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(143.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(143.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material89");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material89')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(3, 4, 5, 6));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material90");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material90')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(7, 8, 9, 10));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material91");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material91')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(11, 12, 13, 14));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material92");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material92')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(15, 16, 17, 18));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant57");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant57')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(19, 20, 21, 22));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/24", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/24');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(173, 174));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(173, 174));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(51, 52, 53, 54));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(55, 56, 57, 58));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(144.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(144.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(175, 176));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(175, 176));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(177, 178));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(177, 178));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(179, 180));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(179, 180));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(59, 60, 61, 62));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(60, 61, 62, 59));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(63, 64, 65, 66));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(145.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(145.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(146.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(146.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material93");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material93')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(23, 24, 25, 26));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material94");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material94')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(27, 28, 29, 30));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material95");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material95')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(31, 32, 33, 34));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.125490196078431, 0.129411764705882, 0.133333333333333, 0.12156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material96");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material96')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(35, 36, 37, 38));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant58");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant58')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(39, 40, 41, 42));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/25", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/25');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(181, 182));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(181, 182));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(67, 68, 69, 70));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(71, 72, 73, 74));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(72, 73, 74, 71));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(147.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(147.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(183, 184));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(183, 184));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(185, 186));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(185, 186));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(187, 188));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(187, 188));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(75, 76, 77, 78));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(79, 80, 81, 82));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(148.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(148.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(149.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(149.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material97");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material97')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(43, 44, 45, 46));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.172549019607843, 0.176470588235294, 0.180392156862745, 0.168627450980392), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material98");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material98')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(47, 48, 49, 50));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material99");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material99')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(51, 52, 53, 54));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material100");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material100')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(55, 56, 57, 58));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant59");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant59')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(59, 60, 61, 62));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/26", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/26');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(189, 190));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(189, 190));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(83, 84, 85, 86));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(87, 88, 89, 90));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(88, 89, 90, 87));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(150.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(150.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(191, 192));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(191, 192));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(193, 194));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(193, 194));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(195, 196));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(195, 196));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(91, 92, 93, 94));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(92, 93, 94, 91));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(95, 96, 97, 98));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(96, 97, 98, 95));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(151.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(151.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(152.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(152.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material101");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material101')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(63, 64, 65, 66));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material102");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material102')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(67, 68, 69, 70));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material103");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material103')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(71, 72, 73, 74));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material104");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material104')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(75, 76, 77, 78));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant60");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant60')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(79, 80, 81, 82));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/27", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/27');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(197, 198));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(197, 198));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(99, 100, 101, 102));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(100, 101, 102, 99));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(103, 104, 105, 106));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(153.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(153.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(199, 200));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(199, 200));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(201, 202));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(201, 202));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(203, 204));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(203, 204));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(107, 108, 109, 110));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(111, 112, 113, 114));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(112, 113, 114, 111));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(154.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(154.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(155.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(155.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material105");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material105')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(83, 84, 85, 86));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material106");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material106')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(87, 88, 89, 90));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material107");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material107')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(91, 92, 93, 94));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material108");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material108')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(95, 96, 97, 98));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant61");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant61')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(99, 100, 101, 102));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualFan()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant62");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant62')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitSpherical(CreateList(new UnitSpherical(5, 6), new UnitSpherical(7, 8)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(5, 6), new Spherical(7, 8) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant63");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant63')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteCartesian(CreateList(new Cartesian(31, 32, 33), new Cartesian(34, 35, 36)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(31, 32, 33)), Spherical.fromCartesian3(new Cartesian3(34, 35, 36)) ]);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant64");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant64')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitCartesian(CreateList(new UnitCartesian(0.502570711032417, 0.574366526894191, 0.646162342755964), new UnitCartesian(0.523423922590214, 0.575766314849235, 0.628108707108257)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.502570711032417, 0.574366526894191, 0.646162342755964)), Spherical.fromCartesian3(new Cartesian3(0.523423922590214, 0.575766314849235, 0.628108707108257)) ], 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant65");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant65')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(103, 104, 105, 106));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.407843137254902, 0.411764705882353, 0.415686274509804, 0.403921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_fan_material_image");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_image')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/28", CesiumResourceBehavior.LinkTo);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.image.getValue(date)).toEqual('http://example.com/28');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(205, 206));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(205, 206));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(115, 116, 117, 118));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(116, 117, 118, 115));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_fan_material_grid");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_grid')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(119, 120, 121, 122));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(120, 121, 122, 119));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(156.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(156.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(207, 208));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(207, 208));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(209, 210));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(209, 210));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(211, 212));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(211, 212));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material_fan_material_stripe");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(123, 124, 125, 126));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(124, 125, 126, 123));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(127, 128, 129, 130));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(128, 129, 130, 127));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(157.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.offset.getValue(date)).toEqual(157.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(158.0);
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(date)).toEqual(158.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material109");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material109')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(107, 108, 109, 110));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material110");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material110')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(111, 112, 113, 114));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material111");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material111')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(115, 116, 117, 118));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("material112");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('material112')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(119, 120, 121, 122));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant66");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant66')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(123, 124, 125, 126));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
                }
            }
        }
        private void WriteConstantValuesIndividualVector()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant67");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant67')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(127, 128, 129, 130));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(date)).toEqualEpsilon(new Color(0.501960784313725, 0.505882352941176, 0.509803921568627, 0.498039215686275), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant68");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant68')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitSpherical(new UnitSpherical(3, 4));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(3, 4)));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant69");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant69')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteCartesian(new Cartesian(25, 26, 27));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(25, 26, 27));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("constant70");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('constant70')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitCartesian(new UnitCartesian(0.455842305838552, 0.56980288229819, 0.683763458757828));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(date)).toEqualEpsilon(new Cartesian3(0.455842305838552, 0.56980288229819, 0.683763458757828), 1e-14);");
                }
            }
        }
        private void WriteReferenceValues()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("ConstantPosition1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition1')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(28, 29, 30));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(28, 29, 30));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("ConstantDouble1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble1')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenScaleProperty())
                {
                    w2.WriteNumber(159.0);
                    m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(159.0);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("ConstantPosition2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition2')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(31, 32, 33));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(31, 32, 33));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("ConstantDouble2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble2')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenScaleProperty())
                {
                    w2.WriteNumber(160.0);
                    m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(160.0);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("Reference");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('Reference')).toBeDefined();");
                using (var w = packet.OpenDescriptionProperty())
                {
                    w.WriteReference(new Reference("Constant", "description"));
                    m_assertionsWriter.WriteLine("    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
                }
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteReference(new Reference("Constant", "position"));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteReference(new Reference("Constant", "orientation"));
                    m_assertionsWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteReference(new Reference("Constant", "viewFrom"));
                    m_assertionsWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
                    }
                    using (var w2 = w.OpenImageProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "scale")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "pixelOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "eyeOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "horizontalOrigin")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "verticalOrigin")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "heightReference")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.heightReference.getValue(date)).toEqual(constant.billboard.heightReference.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "rotation")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "alignedAxis")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenSizeInMetersProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "sizeInMeters")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "width")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "height")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "scaleByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "translucencyByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "pixelOffsetScaleByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("billboard", "imageSubRegion")));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
                    }
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "dimensions")));
                        m_assertionsWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("box", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(constant.box.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("box", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantPosition1", CreateList("position")), new Reference("ConstantPosition2", CreateList("position"))));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "width")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "height")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "extrudedHeight")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenCornerTypeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "cornerType")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("corridor", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(constant.corridor.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("corridor", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "length")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "topRadius")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "bottomRadius")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("cylinder", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(constant.cylinder.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "numberOfVerticalLines")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("cylinder", "slices")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
                    }
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "semiMajorAxis")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "semiMinorAxis")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "height")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "extrudedHeight")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "rotation")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "stRotation")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("ellipse", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(constant.ellipse.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipse", "numberOfVerticalLines")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "radii")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(constant.ellipsoid.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "stackPartitions")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "slicePartitions")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("ellipsoid", "subdivisions")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
                    }
                    using (var w2 = w.OpenTextProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "text")));
                        m_assertionsWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
                    }
                    using (var w2 = w.OpenFontProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "font")));
                        m_assertionsWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
                    }
                    using (var w2 = w.OpenStyleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "style")));
                        m_assertionsWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "scale")));
                        m_assertionsWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "pixelOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "eyeOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "horizontalOrigin")));
                        m_assertionsWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "verticalOrigin")));
                        m_assertionsWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "heightReference")));
                        m_assertionsWriter.WriteLine("    expect(e.label.heightReference.getValue(date)).toEqual(constant.label.heightReference.getValue(date));");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "fillColor")));
                        m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "translucencyByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("label", "pixelOffsetScaleByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
                    }
                    using (var w2 = w.OpenGltfProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "uri")));
                        m_assertionsWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "scale")));
                        m_assertionsWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "minimumPixelSize")));
                        m_assertionsWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "maximumScale")));
                        m_assertionsWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
                    }
                    using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "incrementallyLoadTextures")));
                        m_assertionsWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
                    }
                    using (var w2 = w.OpenRunAnimationsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "runAnimations")));
                        m_assertionsWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "heightReference")));
                        m_assertionsWriter.WriteLine("    expect(e.model.heightReference.getValue(date)).toEqual(constant.model.heightReference.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(date)).toEqual(constant.model.color.getValue(date));");
                    }
                    using (var w2 = w.OpenColorBlendModeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "colorBlendMode")));
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendMode.getValue(date)).toEqual(constant.model.colorBlendMode.getValue(date));");
                    }
                    using (var w2 = w.OpenColorBlendAmountProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("model", "colorBlendAmount")));
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendAmount.getValue(date)).toEqual(constant.model.colorBlendAmount.getValue(date));");
                    }
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    using (var a = w2.OpenNodeTransformationProperty("referenceProp"))
                    {
                        using (var w3 = a.OpenTranslationProperty())
                        {
                            w3.WriteReference(new Reference("Constant", CreateList("model", "nodeTransformations", "prop", "translation")));
                            m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.translation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.translation.getValue(date));");
                        }
                        using (var w3 = a.OpenRotationProperty())
                        {
                            w3.WriteReference(new Reference("Constant", CreateList("model", "nodeTransformations", "prop", "rotation")));
                            m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.rotation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.rotation.getValue(date));");
                        }
                        using (var w3 = a.OpenScaleProperty())
                        {
                            w3.WriteReference(new Reference("Constant", CreateList("model", "nodeTransformations", "prop", "scale")));
                            m_assertionsWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.scale.getValue(date)).toEqual(constant.model.nodeTransformations.prop.scale.getValue(date));");
                        }
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("path", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("path", "width")));
                        m_assertionsWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("path", "resolution")));
                        m_assertionsWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("path", "leadTime")));
                        m_assertionsWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("path", "trailTime")));
                        m_assertionsWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("path", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(constant.path.material.color.getValue(date));");
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "pixelSize")));
                        m_assertionsWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightReferenceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "heightReference")));
                        m_assertionsWriter.WriteLine("    expect(e.point.heightReference.getValue(date)).toEqual(constant.point.heightReference.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "scaleByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("point", "translucencyByDistance")));
                        m_assertionsWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantPosition1", CreateList("position")), new Reference("ConstantPosition2", CreateList("position"))));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "height")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "extrudedHeight")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "stRotation")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("polygon", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(constant.polygon.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenPerPositionHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "perPositionHeight")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "closeTop")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polygon", "closeBottom")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polyline", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantPosition1", CreateList("position")), new Reference("ConstantPosition2", CreateList("position"))));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polyline", "width")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polyline", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("polyline", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(constant.polyline.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenFollowSurfaceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("polyline", "followSurface")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(constant.polyline.followSurface.getValue(date));");
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
                    }
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "coordinates")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "height")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "extrudedHeight")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "rotation")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "stRotation")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangle", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(constant.rectangle.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "closeTop")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(constant.rectangle.closeTop.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangle", "closeBottom")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(constant.rectangle.closeBottom.getValue(date));");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "show")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantPosition1", CreateList("position")), new Reference("ConstantPosition2", CreateList("position"))));
                        m_assertionsWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenMinimumHeightsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantDouble1", CreateList("billboard", "scale")), new Reference("ConstantDouble2", CreateList("billboard", "scale"))));
                        m_assertionsWriter.WriteLine("    expect(e.wall.minimumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
                    }
                    using (var w2 = w.OpenMaximumHeightsProperty())
                    {
                        w2.WriteReferences(CreateList(new Reference("ConstantDouble1", CreateList("billboard", "scale")), new Reference("ConstantDouble2", CreateList("billboard", "scale"))));
                        m_assertionsWriter.WriteLine("    expect(e.wall.maximumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "granularity")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "fill")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("wall", "material", "color")));
                            m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(constant.wall.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "outline")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("wall", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "show")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "innerHalfAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "outerHalfAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "minimumClockAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "maximumClockAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "radius")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "intersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "intersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showLateralSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("conicSensor", "lateralSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showEllipsoidSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showEllipsoidHorizonSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showDomeSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("conicSensor", "domeSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "portionToDisplay")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "environmentConstraint")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showEnvironmentOcclusion")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("conicSensor", "environmentOcclusionMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "showEnvironmentIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "environmentIntersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("conicSensor", "environmentIntersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "show")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "radius")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "intersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "intersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showLateralSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showEllipsoidSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showEllipsoidHorizonSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showDomeSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "domeSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "portionToDisplay")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "environmentConstraint")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showEnvironmentOcclusion")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "showEnvironmentIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "environmentIntersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("customPatternSensor", "environmentIntersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "show")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "xHalfAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "yHalfAngle")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "radius")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "intersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "intersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showLateralSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showEllipsoidSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showEllipsoidHorizonSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showDomeSurfaces")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "domeSurfaceMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "portionToDisplay")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "environmentConstraint")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showEnvironmentOcclusion")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "showEnvironmentIntersection")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "environmentIntersectionColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("rectangularSensor", "environmentIntersectionWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "show")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "radius")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenPerDirectionRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "perDirectionRadius")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", CreateList("fan", "material", "color")));
                            m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(constant.fan.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "fill")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "outline")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "outlineColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "outlineWidth")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("fan", "numberOfRings")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("vector", "show")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("vector", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("vector", "direction")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("vector", "length")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", CreateList("vector", "minimumLengthInPixels")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
                    }
                }
            }
            WriteReferenceValuesIndividual();
        }
        private void WriteReferenceValuesIndividual()
        {
            WriteReferenceValuesIndividualDescription();
            WriteReferenceValuesIndividualPosition();
            WriteReferenceValuesIndividualOrientation();
            WriteReferenceValuesIndividualViewFrom();
            WriteReferenceValuesIndividualBillboard();
            WriteReferenceValuesIndividualBox();
            WriteReferenceValuesIndividualCorridor();
            WriteReferenceValuesIndividualCylinder();
            WriteReferenceValuesIndividualEllipse();
            WriteReferenceValuesIndividualEllipsoid();
            WriteReferenceValuesIndividualLabel();
            WriteReferenceValuesIndividualModel();
            WriteReferenceValuesIndividualPath();
            WriteReferenceValuesIndividualPoint();
            WriteReferenceValuesIndividualPolygon();
            WriteReferenceValuesIndividualPolyline();
            WriteReferenceValuesIndividualRectangle();
            WriteReferenceValuesIndividualWall();
            WriteReferenceValuesIndividualConicSensor();
            WriteReferenceValuesIndividualCustomPatternSensor();
            WriteReferenceValuesIndividualRectangularSensor();
            WriteReferenceValuesIndividualFan();
            WriteReferenceValuesIndividualVector();
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("VelocityPosition");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('VelocityPosition')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(CreateList(m_documentStartDate, m_documentStartDate.AddSeconds(60)), CreateList(new Cartesian(1, 2, 3), new Cartesian(61, 122, 183)));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(1, 2, 3));");
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(JulianDate.addSeconds(documentStartDate, 60, new JulianDate()))).toEqual(new Cartesian3(61, 122, 183));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("velocityReference1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('velocityReference1')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenAlignedAxisProperty())
                {
                    w2.WriteVelocityReference(new Reference("VelocityPosition", "position"));
                    m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(JulianDate.addSeconds(documentStartDate, 50, new JulianDate()))).toEqualEpsilon(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273), 1e-13);");
                }
            }
        }
        private void WriteReferenceValuesIndividualDescription()
        {
        }
        private void WriteReferenceValuesIndividualPosition()
        {
        }
        private void WriteReferenceValuesIndividualOrientation()
        {
        }
        private void WriteReferenceValuesIndividualViewFrom()
        {
        }
        private void WriteReferenceValuesIndividualBillboard()
        {
        }
        private void WriteReferenceValuesIndividualBox()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference1')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", CreateList("box", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", CreateList("box", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", CreateList("box", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", CreateList("box", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference2')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", CreateList("box", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", CreateList("box", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", CreateList("box", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", CreateList("box", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", CreateList("box", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference3");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference3')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", CreateList("box", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", CreateList("box", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", CreateList("box", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", CreateList("box", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", CreateList("box", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualCorridor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference4");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference4')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", CreateList("corridor", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", CreateList("corridor", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", CreateList("corridor", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", CreateList("corridor", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference5");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference5')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", CreateList("corridor", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", CreateList("corridor", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", CreateList("corridor", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", CreateList("corridor", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", CreateList("corridor", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference6");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference6')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", CreateList("corridor", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", CreateList("corridor", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", CreateList("corridor", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", CreateList("corridor", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", CreateList("corridor", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualCylinder()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference7");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference7')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", CreateList("cylinder", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", CreateList("cylinder", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", CreateList("cylinder", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", CreateList("cylinder", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference8");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference8')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", CreateList("cylinder", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", CreateList("cylinder", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", CreateList("cylinder", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", CreateList("cylinder", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", CreateList("cylinder", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference9");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference9')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", CreateList("cylinder", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", CreateList("cylinder", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", CreateList("cylinder", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", CreateList("cylinder", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", CreateList("cylinder", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualEllipse()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference10");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference10')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", CreateList("ellipse", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", CreateList("ellipse", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", CreateList("ellipse", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", CreateList("ellipse", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference11");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference11')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", CreateList("ellipse", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", CreateList("ellipse", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", CreateList("ellipse", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", CreateList("ellipse", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", CreateList("ellipse", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference12");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference12')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", CreateList("ellipse", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", CreateList("ellipse", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", CreateList("ellipse", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", CreateList("ellipse", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", CreateList("ellipse", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualEllipsoid()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference13");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference13')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", CreateList("ellipsoid", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", CreateList("ellipsoid", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", CreateList("ellipsoid", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", CreateList("ellipsoid", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference14");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference14')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", CreateList("ellipsoid", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", CreateList("ellipsoid", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", CreateList("ellipsoid", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", CreateList("ellipsoid", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", CreateList("ellipsoid", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference15");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference15')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", CreateList("ellipsoid", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", CreateList("ellipsoid", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", CreateList("ellipsoid", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", CreateList("ellipsoid", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", CreateList("ellipsoid", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualLabel()
        {
        }
        private void WriteReferenceValuesIndividualModel()
        {
        }
        private void WriteReferenceValuesIndividualPath()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference16");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference16')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", CreateList("path", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", CreateList("path", "material", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", CreateList("path", "material", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineWidth.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference17");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference17')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineArrow", CreateList("path", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineArrow').path.material.color.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference18");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference18')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineGlow", CreateList("path", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineGlow", CreateList("path", "material", "glowPower")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.glowPower.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference19");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference19')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", CreateList("path", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", CreateList("path", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", CreateList("path", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", CreateList("path", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference20");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference20')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", CreateList("path", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", CreateList("path", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", CreateList("path", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", CreateList("path", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", CreateList("path", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference21");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference21')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", CreateList("path", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", CreateList("path", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", CreateList("path", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", CreateList("path", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", CreateList("path", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualPoint()
        {
        }
        private void WriteReferenceValuesIndividualPolygon()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference22");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference22')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", CreateList("polygon", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", CreateList("polygon", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", CreateList("polygon", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", CreateList("polygon", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference23");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference23')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", CreateList("polygon", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", CreateList("polygon", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", CreateList("polygon", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", CreateList("polygon", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", CreateList("polygon", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference24");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference24')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", CreateList("polygon", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", CreateList("polygon", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", CreateList("polygon", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", CreateList("polygon", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", CreateList("polygon", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualPolyline()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference25");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference25')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", CreateList("polyline", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", CreateList("polyline", "material", "outlineColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", CreateList("polyline", "material", "outlineWidth")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineWidth.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference26");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference26')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineArrow", CreateList("polyline", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineArrow').polyline.material.color.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference27");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference27')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineGlow", CreateList("polyline", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineGlow", CreateList("polyline", "material", "glowPower")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.glowPower.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference28");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference28')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", CreateList("polyline", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", CreateList("polyline", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", CreateList("polyline", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", CreateList("polyline", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference29");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference29')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", CreateList("polyline", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", CreateList("polyline", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", CreateList("polyline", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", CreateList("polyline", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", CreateList("polyline", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference30");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference30')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", CreateList("polyline", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", CreateList("polyline", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", CreateList("polyline", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", CreateList("polyline", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", CreateList("polyline", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualRectangle()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference31");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference31')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", CreateList("rectangle", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", CreateList("rectangle", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", CreateList("rectangle", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", CreateList("rectangle", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference32");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference32')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", CreateList("rectangle", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", CreateList("rectangle", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", CreateList("rectangle", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", CreateList("rectangle", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", CreateList("rectangle", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference33");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference33')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", CreateList("rectangle", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", CreateList("rectangle", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", CreateList("rectangle", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", CreateList("rectangle", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", CreateList("rectangle", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualWall()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference34");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference34')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", CreateList("wall", "material", "image")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", CreateList("wall", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", CreateList("wall", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", CreateList("wall", "material", "transparent")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference35");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference35')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", CreateList("wall", "material", "color")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", CreateList("wall", "material", "cellAlpha")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", CreateList("wall", "material", "lineCount")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", CreateList("wall", "material", "lineThickness")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", CreateList("wall", "material", "lineOffset")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference36");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference36')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", CreateList("wall", "material", "orientation")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", CreateList("wall", "material", "evenColor")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", CreateList("wall", "material", "oddColor")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", CreateList("wall", "material", "offset")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", CreateList("wall", "material", "repeat")));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualConicSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference37");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference37')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", CreateList("conicSensor", "lateralSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", CreateList("conicSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", CreateList("conicSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", CreateList("conicSensor", "lateralSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference38");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference38')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", CreateList("conicSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", CreateList("conicSensor", "lateralSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", CreateList("conicSensor", "lateralSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", CreateList("conicSensor", "lateralSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", CreateList("conicSensor", "lateralSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference39");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference39')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", CreateList("conicSensor", "lateralSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", CreateList("conicSensor", "lateralSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", CreateList("conicSensor", "lateralSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", CreateList("conicSensor", "lateralSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", CreateList("conicSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference40");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference40')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference41");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference41')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference42");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference42')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference43");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference43')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference44");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference44')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference45");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference45')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference46");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference46')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", CreateList("conicSensor", "domeSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", CreateList("conicSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", CreateList("conicSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", CreateList("conicSensor", "domeSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference47");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference47')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", CreateList("conicSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", CreateList("conicSensor", "domeSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", CreateList("conicSensor", "domeSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", CreateList("conicSensor", "domeSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", CreateList("conicSensor", "domeSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference48");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference48')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", CreateList("conicSensor", "domeSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", CreateList("conicSensor", "domeSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", CreateList("conicSensor", "domeSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", CreateList("conicSensor", "domeSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", CreateList("conicSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference49");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference49')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", CreateList("conicSensor", "environmentOcclusionMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", CreateList("conicSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", CreateList("conicSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", CreateList("conicSensor", "environmentOcclusionMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference50");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference50')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", CreateList("conicSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", CreateList("conicSensor", "environmentOcclusionMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", CreateList("conicSensor", "environmentOcclusionMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", CreateList("conicSensor", "environmentOcclusionMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", CreateList("conicSensor", "environmentOcclusionMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference51");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference51')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", CreateList("conicSensor", "environmentOcclusionMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", CreateList("conicSensor", "environmentOcclusionMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", CreateList("conicSensor", "environmentOcclusionMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", CreateList("conicSensor", "environmentOcclusionMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", CreateList("conicSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualCustomPatternSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference52");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference52')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", CreateList("customPatternSensor", "lateralSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", CreateList("customPatternSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", CreateList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", CreateList("customPatternSensor", "lateralSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference53");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference53')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", CreateList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", CreateList("customPatternSensor", "lateralSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", CreateList("customPatternSensor", "lateralSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", CreateList("customPatternSensor", "lateralSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", CreateList("customPatternSensor", "lateralSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference54");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference54')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", CreateList("customPatternSensor", "lateralSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", CreateList("customPatternSensor", "lateralSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", CreateList("customPatternSensor", "lateralSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", CreateList("customPatternSensor", "lateralSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", CreateList("customPatternSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference55");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference55')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference56");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference56')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference57");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference57')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference58");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference58')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference59");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference59')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference60");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference60')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference61");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference61')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", CreateList("customPatternSensor", "domeSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", CreateList("customPatternSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", CreateList("customPatternSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", CreateList("customPatternSensor", "domeSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference62");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference62')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", CreateList("customPatternSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", CreateList("customPatternSensor", "domeSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", CreateList("customPatternSensor", "domeSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", CreateList("customPatternSensor", "domeSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", CreateList("customPatternSensor", "domeSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference63");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference63')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", CreateList("customPatternSensor", "domeSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", CreateList("customPatternSensor", "domeSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", CreateList("customPatternSensor", "domeSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", CreateList("customPatternSensor", "domeSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", CreateList("customPatternSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference64");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference64')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", CreateList("customPatternSensor", "environmentOcclusionMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", CreateList("customPatternSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", CreateList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", CreateList("customPatternSensor", "environmentOcclusionMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference65");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference65')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", CreateList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", CreateList("customPatternSensor", "environmentOcclusionMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", CreateList("customPatternSensor", "environmentOcclusionMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", CreateList("customPatternSensor", "environmentOcclusionMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", CreateList("customPatternSensor", "environmentOcclusionMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference66");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference66')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", CreateList("customPatternSensor", "environmentOcclusionMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", CreateList("customPatternSensor", "environmentOcclusionMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", CreateList("customPatternSensor", "environmentOcclusionMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", CreateList("customPatternSensor", "environmentOcclusionMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", CreateList("customPatternSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualRectangularSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference67");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference67')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", CreateList("rectangularSensor", "lateralSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", CreateList("rectangularSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", CreateList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", CreateList("rectangularSensor", "lateralSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference68");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference68')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", CreateList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", CreateList("rectangularSensor", "lateralSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", CreateList("rectangularSensor", "lateralSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", CreateList("rectangularSensor", "lateralSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", CreateList("rectangularSensor", "lateralSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference69");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference69')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", CreateList("rectangularSensor", "lateralSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", CreateList("rectangularSensor", "lateralSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", CreateList("rectangularSensor", "lateralSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", CreateList("rectangularSensor", "lateralSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", CreateList("rectangularSensor", "lateralSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference70");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference70')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference71");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference71')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference72");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference72')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference73");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference73')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference74");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference74')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference75");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference75')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", CreateList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference76");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference76')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", CreateList("rectangularSensor", "domeSurfaceMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", CreateList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", CreateList("rectangularSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", CreateList("rectangularSensor", "domeSurfaceMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference77");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference77')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", CreateList("rectangularSensor", "domeSurfaceMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", CreateList("rectangularSensor", "domeSurfaceMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", CreateList("rectangularSensor", "domeSurfaceMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", CreateList("rectangularSensor", "domeSurfaceMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", CreateList("rectangularSensor", "domeSurfaceMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference78");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference78')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", CreateList("rectangularSensor", "domeSurfaceMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", CreateList("rectangularSensor", "domeSurfaceMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", CreateList("rectangularSensor", "domeSurfaceMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", CreateList("rectangularSensor", "domeSurfaceMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", CreateList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference79");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference79')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", CreateList("rectangularSensor", "environmentOcclusionMaterial", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", CreateList("rectangularSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", CreateList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", CreateList("rectangularSensor", "environmentOcclusionMaterial", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference80");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference80')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", CreateList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", CreateList("rectangularSensor", "environmentOcclusionMaterial", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", CreateList("rectangularSensor", "environmentOcclusionMaterial", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", CreateList("rectangularSensor", "environmentOcclusionMaterial", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", CreateList("rectangularSensor", "environmentOcclusionMaterial", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference81");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference81')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", CreateList("rectangularSensor", "environmentOcclusionMaterial", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", CreateList("rectangularSensor", "environmentOcclusionMaterial", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", CreateList("rectangularSensor", "environmentOcclusionMaterial", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", CreateList("rectangularSensor", "environmentOcclusionMaterial", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", CreateList("rectangularSensor", "environmentOcclusionMaterial", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualFan()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference82");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference82')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", CreateList("fan", "material", "image")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", CreateList("fan", "material", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", CreateList("fan", "material", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", CreateList("fan", "material", "transparent")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference83");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference83')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", CreateList("fan", "material", "color")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", CreateList("fan", "material", "cellAlpha")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", CreateList("fan", "material", "lineCount")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", CreateList("fan", "material", "lineThickness")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", CreateList("fan", "material", "lineOffset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("reference84");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('reference84')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", CreateList("fan", "material", "orientation")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", CreateList("fan", "material", "evenColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", CreateList("fan", "material", "oddColor")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", CreateList("fan", "material", "offset")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", CreateList("fan", "material", "repeat")));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteReferenceValuesIndividualVector()
        {
        }
        private void WriteSampledValues()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("Sampled");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('Sampled')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(34, 35, 36), new Cartesian(37, 38, 39)));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(34, 35, 36));");
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(37, 38, 39));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteUnitQuaternion(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new UnitQuaternion(0.426162351429341, 0.473513723810378, 0.520865096191416, 0.568216468572454), new UnitQuaternion(0.446949206712144, 0.48132991492077, 0.515710623129397, 0.550091331338023)));
                    m_assertionsWriter.WriteLine("    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.473513723810378, 0.520865096191416, 0.568216468572454, 0.426162351429341), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.48132991492077, 0.515710623129397, 0.550091331338023, 0.446949206712144), 1e-14);");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(40, 41, 42), new Cartesian(43, 44, 45)));
                    m_assertionsWriter.WriteLine("    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(40, 41, 42));");
                    m_assertionsWriter.WriteLine("    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(43, 44, 45));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(161.0, 162.0));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(161.0);");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(162.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(213, 214), new Rectangular(215, 216)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(213, 214));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(215, 216));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(46, 47, 48), new Cartesian(49, 50, 51)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(46, 47, 48));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(49, 50, 51));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(131, 132, 133, 134), Color.FromArgb(135, 136, 137, 138)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(132, 133, 134, 131));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(163.0, 164.0));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(163.0);");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(164.0);");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteUnitCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new UnitCartesian(0.502570711032417, 0.574366526894191, 0.646162342755964), new UnitCartesian(0.523423922590214, 0.575766314849235, 0.628108707108257)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.502570711032417, 0.574366526894191, 0.646162342755964), 1e-14);");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.523423922590214, 0.575766314849235, 0.628108707108257), 1e-14);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(165.0, 166.0));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.width.getValue(documentStartDate)).toEqual(165.0);");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.width.getValue(documentStopDate)).toEqual(166.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(167.0, 168.0));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.height.getValue(documentStartDate)).toEqual(167.0);");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.height.getValue(documentStopDate)).toEqual(168.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(29, 30, 31, 32), new NearFarScalar(33, 34, 35, 36)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(29, 30, 31, 32));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(33, 34, 35, 36));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(37, 38, 39, 40), new NearFarScalar(41, 42, 43, 44)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(37, 38, 39, 40));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(41, 42, 43, 44));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(45, 46, 47, 48), new NearFarScalar(49, 50, 51, 52)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(45, 46, 47, 48));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(49, 50, 51, 52));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteBoundingRectangle(CreateList(m_documentStartDate, m_documentStopDate), CreateList(BoundingRectangle.FromWidthHeight(5, 6, 7, 8), BoundingRectangle.FromWidthHeight(9, 10, 11, 12)));
                        m_assertionsWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(5, 6, 7, 8));");
                        m_assertionsWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(9, 10, 11, 12));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(52, 53, 54), new Cartesian(55, 56, 57)));
                        m_assertionsWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(52, 53, 54));");
                        m_assertionsWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(55, 56, 57));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(139, 140, 141, 142), Color.FromArgb(143, 144, 145, 146)));
                                m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
                                m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(147, 148, 149, 150), Color.FromArgb(151, 152, 153, 154)));
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(169.0, 170.0));
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(169.0);");
                        m_assertionsWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(170.0);");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(171.0, 172.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.width.getValue(documentStartDate)).toEqual(171.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.width.getValue(documentStopDate)).toEqual(172.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(173.0, 174.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.height.getValue(documentStartDate)).toEqual(173.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.height.getValue(documentStopDate)).toEqual(174.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(175.0, 176.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(175.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(176.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(177.0, 178.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(177.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(178.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(155, 156, 157, 158), Color.FromArgb(159, 160, 161, 162)));
                                m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
                                m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(163, 164, 165, 166), Color.FromArgb(167, 168, 169, 170)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(179.0, 180.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(179.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(180.0);");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(181.0, 182.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(181.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(182.0);");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(183.0, 184.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(183.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(184.0);");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(185.0, 186.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(185.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(186.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(171, 172, 173, 174), Color.FromArgb(175, 176, 177, 178)));
                                m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                                m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(187.0, 188.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(187.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(188.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(189.0, 190.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(189.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(190.0);");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(191.0, 192.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(191.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(192.0);");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(193.0, 194.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(193.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(194.0);");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(195.0, 196.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(195.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(196.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(197.0, 198.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(197.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(198.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(199.0, 200.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(199.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(200.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(201.0, 202.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(201.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(202.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(203.0, 204.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(203.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(204.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(205.0, 206.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(205.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(206.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194)));
                                m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                                m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(195, 196, 197, 198), Color.FromArgb(199, 200, 201, 202)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(207.0, 208.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(207.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(208.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(209.0, 210.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(209.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(210.0);");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(58, 59, 60), new Cartesian(61, 62, 63)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(58, 59, 60));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(61, 62, 63));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(203, 204, 205, 206), Color.FromArgb(207, 208, 209, 210)));
                                m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
                                m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(211, 212, 213, 214), Color.FromArgb(215, 216, 217, 218)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(211.0, 212.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(211.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(212.0);");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(213.0, 214.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(213.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(214.0);");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(215.0, 216.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(215.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(216.0);");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(217.0, 218.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(217.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(218.0);");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(219.0, 220.0));
                        m_assertionsWriter.WriteLine("    expect(e.label.scale.getValue(documentStartDate)).toEqual(219.0);");
                        m_assertionsWriter.WriteLine("    expect(e.label.scale.getValue(documentStopDate)).toEqual(220.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(217, 218), new Rectangular(219, 220)));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(217, 218));");
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(219, 220));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(64, 65, 66), new Cartesian(67, 68, 69)));
                        m_assertionsWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(64, 65, 66));");
                        m_assertionsWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(67, 68, 69));");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(219, 220, 221, 222), Color.FromArgb(223, 224, 225, 226)));
                        m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                        m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(227, 228, 229, 230), Color.FromArgb(231, 232, 233, 234)));
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(221.0, 222.0));
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(221.0);");
                        m_assertionsWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(222.0);");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(53, 54, 55, 56), new NearFarScalar(57, 58, 59, 60)));
                        m_assertionsWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(53, 54, 55, 56));");
                        m_assertionsWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(57, 58, 59, 60));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(61, 62, 63, 64), new NearFarScalar(65, 66, 67, 68)));
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(61, 62, 63, 64));");
                        m_assertionsWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(65, 66, 67, 68));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(223.0, 224.0));
                        m_assertionsWriter.WriteLine("    expect(e.model.scale.getValue(documentStartDate)).toEqual(223.0);");
                        m_assertionsWriter.WriteLine("    expect(e.model.scale.getValue(documentStopDate)).toEqual(224.0);");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(225.0, 226.0));
                        m_assertionsWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(225.0);");
                        m_assertionsWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(226.0);");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(227.0, 228.0));
                        m_assertionsWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(227.0);");
                        m_assertionsWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(228.0);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(235, 236, 237, 238), Color.FromArgb(239, 240, 241, 242)));
                        m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(documentStartDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                        m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(documentStopDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                    }
                    using (var w2 = w.OpenColorBlendAmountProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(229.0, 230.0));
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendAmount.getValue(documentStartDate)).toEqual(229.0);");
                        m_assertionsWriter.WriteLine("    expect(e.model.colorBlendAmount.getValue(documentStopDate)).toEqual(230.0);");
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(231.0, 232.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.width.getValue(documentStartDate)).toEqual(231.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.width.getValue(documentStopDate)).toEqual(232.0);");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(233.0, 234.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.resolution.getValue(documentStartDate)).toEqual(233.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.resolution.getValue(documentStopDate)).toEqual(234.0);");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(235.0, 236.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(235.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(236.0);");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(237.0, 238.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(237.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(238.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(243, 244, 245, 246), Color.FromArgb(247, 248, 249, 250)));
                                m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
                                m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(239.0, 240.0));
                        m_assertionsWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(239.0);");
                        m_assertionsWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(240.0);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3)));
                        m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                        m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(4, 5, 6, 7), Color.FromArgb(8, 9, 10, 11)));
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(5, 6, 7, 4));");
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(241.0, 242.0));
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(241.0);");
                        m_assertionsWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(242.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(69, 70, 71, 72), new NearFarScalar(73, 74, 75, 76)));
                        m_assertionsWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(69, 70, 71, 72));");
                        m_assertionsWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(73, 74, 75, 76));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new NearFarScalar(77, 78, 79, 80), new NearFarScalar(81, 82, 83, 84)));
                        m_assertionsWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(77, 78, 79, 80));");
                        m_assertionsWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(81, 82, 83, 84));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(243.0, 244.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.height.getValue(documentStartDate)).toEqual(243.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.height.getValue(documentStopDate)).toEqual(244.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(245.0, 246.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(245.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(246.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(247.0, 248.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(247.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(248.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(249.0, 250.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(249.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(250.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(12, 13, 14, 15), Color.FromArgb(16, 17, 18, 19)));
                                m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                                m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(20, 21, 22, 23), Color.FromArgb(24, 25, 26, 27)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(251.0, 252.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(251.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(252.0);");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(253.0, 254.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.width.getValue(documentStartDate)).toEqual(253.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.width.getValue(documentStopDate)).toEqual(254.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(255.0, 256.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(255.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(256.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(28, 29, 30, 31), Color.FromArgb(32, 33, 34, 35)));
                                m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                                m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsen(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new CartographicExtent(1.14601836602552, 0.575222039230621, 0.00442571243572409, 1.00442571243572), new CartographicExtent(0.433629385640828, 1.43362938564083, 0.862833058845931, 0.292036732051034)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(1.14601836602552, 0.575222039230621, 0.00442571243572409, 1.00442571243572));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.433629385640828, 1.43362938564083, 0.862833058845931, 0.292036732051034));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(257.0, 258.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(257.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(258.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(259.0, 260.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(259.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(260.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(261.0, 262.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(261.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(262.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(263.0, 264.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(263.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(264.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(265.0, 266.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(265.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(266.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(36, 37, 38, 39), Color.FromArgb(40, 41, 42, 43)));
                                m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
                                m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(267.0, 268.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(267.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(268.0);");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(269.0, 270.0));
                        m_assertionsWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(269.0);");
                        m_assertionsWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(270.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(52, 53, 54, 55), Color.FromArgb(56, 57, 58, 59)));
                                m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
                                m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(60, 61, 62, 63), Color.FromArgb(64, 65, 66, 67)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(271.0, 272.0));
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(271.0);");
                        m_assertionsWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(272.0);");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(273.0, 274.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(273.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(274.0);");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(275.0, 276.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(275.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(276.0);");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(277.0, 278.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(277.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(278.0);");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(279.0, 280.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(279.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(280.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(281.0, 282.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(281.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(282.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(283.0, 284.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(283.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(284.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(76, 77, 78, 79), Color.FromArgb(80, 81, 82, 83)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(84, 85, 86, 87), Color.FromArgb(88, 89, 90, 91)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(100, 101, 102, 103), Color.FromArgb(104, 105, 106, 107)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(108, 109, 110, 111), Color.FromArgb(112, 113, 114, 115)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(116, 117, 118, 119), Color.FromArgb(120, 121, 122, 123)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(285.0, 286.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(285.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(286.0);");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(287.0, 288.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(287.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(288.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(124, 125, 126, 127), Color.FromArgb(128, 129, 130, 131)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(289.0, 290.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(289.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(290.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(132, 133, 134, 135), Color.FromArgb(136, 137, 138, 139)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(140, 141, 142, 143), Color.FromArgb(144, 145, 146, 147)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(148, 149, 150, 151), Color.FromArgb(152, 153, 154, 155)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(153, 154, 155, 152));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(156, 157, 158, 159), Color.FromArgb(160, 161, 162, 163)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(165, 166, 167, 164));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(172, 173, 174, 175), Color.FromArgb(176, 177, 178, 179)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(173, 174, 175, 172));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(177, 178, 179, 176));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(291.0, 292.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(291.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(292.0);");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(293.0, 294.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(293.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(294.0);");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(295.0, 296.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(295.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(296.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(297.0, 298.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(297.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(298.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(299.0, 300.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(299.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(300.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(189, 190, 191, 188));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(196, 197, 198, 199), Color.FromArgb(200, 201, 202, 203)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(201, 202, 203, 200));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(204, 205, 206, 207), Color.FromArgb(208, 209, 210, 211)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(220, 221, 222, 223), Color.FromArgb(224, 225, 226, 227)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(228, 229, 230, 231), Color.FromArgb(232, 233, 234, 235)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(301.0, 302.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(301.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(302.0);");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(303.0, 304.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.radius.getValue(documentStartDate)).toEqual(303.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.radius.getValue(documentStopDate)).toEqual(304.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(236, 237, 238, 239), Color.FromArgb(240, 241, 242, 243)));
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
                                m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(241, 242, 243, 240));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(244, 245, 246, 247), Color.FromArgb(248, 249, 250, 251)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 246, 247, 244));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(249, 250, 251, 248));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(305.0, 306.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(305.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(306.0);");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(307.0, 308.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(307.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(308.0);");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(252, 253, 254, 0), Color.FromArgb(1, 2, 3, 4)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteSpherical(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Spherical(4, 5, 6), new Spherical(7, 8, 9)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(4, 5, 6)));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(7, 8, 9)));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(309.0, 310.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.length.getValue(documentStartDate)).toEqual(309.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.length.getValue(documentStopDate)).toEqual(310.0);");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(311.0, 312.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(311.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(312.0);");
                    }
                }
            }
            WriteSampledValuesIndividual();
        }
        private void WriteSampledValuesIndividual()
        {
            WriteSampledValuesIndividualDescription();
            WriteSampledValuesIndividualPosition();
            WriteSampledValuesIndividualOrientation();
            WriteSampledValuesIndividualViewFrom();
            WriteSampledValuesIndividualBillboard();
            WriteSampledValuesIndividualBox();
            WriteSampledValuesIndividualCorridor();
            WriteSampledValuesIndividualCylinder();
            WriteSampledValuesIndividualEllipse();
            WriteSampledValuesIndividualEllipsoid();
            WriteSampledValuesIndividualLabel();
            WriteSampledValuesIndividualModel();
            WriteSampledValuesIndividualPath();
            WriteSampledValuesIndividualPoint();
            WriteSampledValuesIndividualPolygon();
            WriteSampledValuesIndividualPolyline();
            WriteSampledValuesIndividualRectangle();
            WriteSampledValuesIndividualWall();
            WriteSampledValuesIndividualConicSensor();
            WriteSampledValuesIndividualCustomPatternSensor();
            WriteSampledValuesIndividualRectangularSensor();
            WriteSampledValuesIndividualFan();
            WriteSampledValuesIndividualVector();
        }
        private void WriteSampledValuesIndividualDescription()
        {
        }
        private void WriteSampledValuesIndividualPosition()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled1");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled1')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicRadians(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartographic(0.716814692820414, 0.146018366025517, 9), new Cartographic(0.575222039230621, 0.00442571243572409, 12)));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(0.716814692820414, 0.146018366025517, 9));");
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.575222039230621, 0.00442571243572409, 12));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled2");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled2')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicDegrees(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartographic(13, 14, 15), new Cartographic(16, 17, 18)));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(13, 14, 15));");
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(16, 17, 18));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled3");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled3')).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesianVelocity(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Motion<Cartesian>(new Cartesian(7, 8, 9), new Cartesian(10, 11, 12)), new Motion<Cartesian>(new Cartesian(13, 14, 15), new Cartesian(16, 17, 18))));
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(7, 8, 9));");
                    m_assertionsWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(13, 14, 15));");
                }
            }
        }
        private void WriteSampledValuesIndividualOrientation()
        {
        }
        private void WriteSampledValuesIndividualViewFrom()
        {
        }
        private void WriteSampledValuesIndividualBillboard()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled4");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled4')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(131, 132, 133, 134), Color.FromArgb(135, 136, 137, 138)));
                    m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled5");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled5')).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenAlignedAxisProperty())
                {
                    w2.WriteUnitSpherical(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new UnitSpherical(5, 6), new UnitSpherical(7, 8)));
                    m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5, 6)));");
                    m_assertionsWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(7, 8)));");
                }
            }
        }
        private void WriteSampledValuesIndividualBox()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled6");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled6')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(139, 140, 141, 142), Color.FromArgb(143, 144, 145, 146)));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled7");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled7')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(221, 222), new Rectangular(223, 224)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(221, 222));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(223, 224));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(10, 11, 12, 9));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled8");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled8')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(13, 14, 15, 16), Color.FromArgb(17, 18, 19, 20)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(18, 19, 20, 17));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(313.0, 314.0));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(313.0);");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(314.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(225, 226), new Rectangular(227, 228)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(225, 226));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(227, 228));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(229, 230), new Rectangular(231, 232)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(229, 230));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(231, 232));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(233, 234), new Rectangular(235, 236)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(233, 234));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(235, 236));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled9");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled9')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(21, 22, 23, 24), Color.FromArgb(25, 26, 27, 28)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(22, 23, 24, 21));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(26, 27, 28, 25));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(29, 30, 31, 32), Color.FromArgb(33, 34, 35, 36)));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(30, 31, 32, 29));");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(34, 35, 36, 33));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(315.0, 316.0));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(315.0);");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(316.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(317.0, 318.0));
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(317.0);");
                        m_assertionsWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(318.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled10");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled10')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(147, 148, 149, 150), Color.FromArgb(151, 152, 153, 154)));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.596078431372549, 0.6, 0.603921568627451, 0.592156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled11");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled11')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(155, 156, 157, 158), Color.FromArgb(159, 160, 161, 162)));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled12");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled12')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(163, 164, 165, 166), Color.FromArgb(167, 168, 169, 170)));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled13");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled13')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(171, 172, 173, 174), Color.FromArgb(175, 176, 177, 178)));
                    m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.690196078431373, 0.694117647058824, 0.698039215686274, 0.686274509803922), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled14");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled14')).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186)));
                    m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualCorridor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled15");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled15')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.737254901960784, 0.741176470588235, 0.745098039215686, 0.733333333333333), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled16");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled16')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(237, 238), new Rectangular(239, 240)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(237, 238));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(239, 240));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(37, 38, 39, 40), Color.FromArgb(41, 42, 43, 44)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(38, 39, 40, 37));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(42, 43, 44, 41));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled17");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled17')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(45, 46, 47, 48), Color.FromArgb(49, 50, 51, 52)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(46, 47, 48, 45));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(319.0, 320.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(319.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(320.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(241, 242), new Rectangular(243, 244)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(241, 242));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(243, 244));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(245, 246), new Rectangular(247, 248)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(245, 246));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(247, 248));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(249, 250), new Rectangular(251, 252)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(249, 250));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(251, 252));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled18");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled18')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(53, 54, 55, 56), Color.FromArgb(57, 58, 59, 60)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(54, 55, 56, 53));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(58, 59, 60, 57));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(61, 62, 63, 64), Color.FromArgb(65, 66, 67, 68)));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(66, 67, 68, 65));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(321.0, 322.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(321.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(322.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(323.0, 324.0));
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(323.0);");
                        m_assertionsWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(324.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled19");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled19')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(195, 196, 197, 198), Color.FromArgb(199, 200, 201, 202)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled20");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled20')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(203, 204, 205, 206), Color.FromArgb(207, 208, 209, 210)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled21");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled21')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(211, 212, 213, 214), Color.FromArgb(215, 216, 217, 218)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled22");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled22')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(219, 220, 221, 222), Color.FromArgb(223, 224, 225, 226)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.87843137254902, 0.882352941176471, 0.886274509803922, 0.874509803921569), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled23");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled23')).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(227, 228, 229, 230), Color.FromArgb(231, 232, 233, 234)));
                    m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualCylinder()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled24");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled24')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(235, 236, 237, 238), Color.FromArgb(239, 240, 241, 242)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled25");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled25')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(253, 254), new Rectangular(255, 256)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(253, 254));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(255, 256));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled26");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled26')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 79, 80, 77));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(325.0, 326.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(325.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(326.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(257, 258), new Rectangular(259, 260)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(257, 258));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(259, 260));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(261, 262), new Rectangular(263, 264)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(261, 262));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(263, 264));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(265, 266), new Rectangular(267, 268)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(265, 266));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(267, 268));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled27");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled27')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(85, 86, 87, 88), Color.FromArgb(89, 90, 91, 92)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(86, 87, 88, 85));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(93, 94, 95, 96), Color.FromArgb(97, 98, 99, 100)));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(327.0, 328.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(327.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(328.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(329.0, 330.0));
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(329.0);");
                        m_assertionsWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(330.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled28");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled28')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(243, 244, 245, 246), Color.FromArgb(247, 248, 249, 250)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.972549019607843, 0.976470588235294, 0.980392156862745, 0.968627450980392), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled29");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled29')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled30");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled30')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(4, 5, 6, 7), Color.FromArgb(8, 9, 10, 11)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled31");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled31')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(12, 13, 14, 15), Color.FromArgb(16, 17, 18, 19)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled32");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled32')).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(20, 21, 22, 23), Color.FromArgb(24, 25, 26, 27)));
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualEllipse()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled33");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled33')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(28, 29, 30, 31), Color.FromArgb(32, 33, 34, 35)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.113725490196078, 0.117647058823529, 0.12156862745098, 0.109803921568627), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled34");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled34')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(269, 270), new Rectangular(271, 272)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(269, 270));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(271, 272));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled35");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled35')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(331.0, 332.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(331.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(332.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(273, 274), new Rectangular(275, 276)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(273, 274));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(275, 276));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(277, 278), new Rectangular(279, 280)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(277, 278));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(279, 280));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(281, 282), new Rectangular(283, 284)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(281, 282));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(283, 284));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled36");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled36')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(117, 118, 119, 120), Color.FromArgb(121, 122, 123, 124)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(122, 123, 124, 121));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(125, 126, 127, 128), Color.FromArgb(129, 130, 131, 132)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(126, 127, 128, 125));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(130, 131, 132, 129));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(333.0, 334.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(333.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(334.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(335.0, 336.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(335.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(336.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled37");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled37')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(36, 37, 38, 39), Color.FromArgb(40, 41, 42, 43)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.16078431372549, 0.164705882352941, 0.168627450980392, 0.156862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled38");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled38')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled39");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled39')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(52, 53, 54, 55), Color.FromArgb(56, 57, 58, 59)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled40");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled40')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(60, 61, 62, 63), Color.FromArgb(64, 65, 66, 67)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.254901960784314, 0.258823529411765, 0.262745098039216, 0.250980392156863), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled41");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled41')).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualEllipsoid()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled42");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled42')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(76, 77, 78, 79), Color.FromArgb(80, 81, 82, 83)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled43");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled43')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(285, 286), new Rectangular(287, 288)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(285, 286));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(287, 288));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(133, 134, 135, 136), Color.FromArgb(137, 138, 139, 140)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled44");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled44')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(141, 142, 143, 144), Color.FromArgb(145, 146, 147, 148)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(146, 147, 148, 145));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(337.0, 338.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(337.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(338.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(289, 290), new Rectangular(291, 292)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(289, 290));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(291, 292));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(293, 294), new Rectangular(295, 296)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(293, 294));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(295, 296));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(297, 298), new Rectangular(299, 300)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(297, 298));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(299, 300));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled45");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled45')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(149, 150, 151, 152), Color.FromArgb(153, 154, 155, 156)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(150, 151, 152, 149));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(154, 155, 156, 153));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(157, 158, 159, 160), Color.FromArgb(161, 162, 163, 164)));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(158, 159, 160, 157));");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(162, 163, 164, 161));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(339.0, 340.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(339.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(340.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(341.0, 342.0));
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(341.0);");
                        m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(342.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled46");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled46')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(84, 85, 86, 87), Color.FromArgb(88, 89, 90, 91)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.333333333333333, 0.337254901960784, 0.341176470588235, 0.329411764705882), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled47");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled47')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled48");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled48')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(100, 101, 102, 103), Color.FromArgb(104, 105, 106, 107)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled49");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled49')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(108, 109, 110, 111), Color.FromArgb(112, 113, 114, 115)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled50");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled50')).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(116, 117, 118, 119), Color.FromArgb(120, 121, 122, 123)));
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualLabel()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled51");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled51')).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenFillColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(124, 125, 126, 127), Color.FromArgb(128, 129, 130, 131)));
                    m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled52");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled52')).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(132, 133, 134, 135), Color.FromArgb(136, 137, 138, 139)));
                    m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.537254901960784, 0.541176470588235, 0.545098039215686, 0.533333333333333), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualModel()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled53");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled53')).toBeDefined();");
                using (var w = packet.OpenModelProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(140, 141, 142, 143), Color.FromArgb(144, 145, 146, 147)));
                    m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.552941176470588, 0.556862745098039, 0.56078431372549, 0.549019607843137), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.model.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.568627450980392, 0.572549019607843, 0.576470588235294, 0.564705882352941), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualPath()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled54");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled54')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(148, 149, 150, 151), Color.FromArgb(152, 153, 154, 155)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.584313725490196, 0.588235294117647, 0.592156862745098, 0.580392156862745), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled55");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled55')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(165, 166, 167, 168), Color.FromArgb(169, 170, 171, 172)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(173, 174, 175, 176), Color.FromArgb(177, 178, 179, 180)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(343.0, 344.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(343.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(344.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled56");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled56')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(181, 182, 183, 184), Color.FromArgb(185, 186, 187, 188)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled57");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled57')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(190, 191, 192, 189));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(194, 195, 196, 193));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(345.0, 346.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(345.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(346.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled58");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled58')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(301, 302), new Rectangular(303, 304)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(301, 302));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(303, 304));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(198, 199, 200, 197));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled59");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled59')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(347.0, 348.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(347.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(348.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(305, 306), new Rectangular(307, 308)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(305, 306));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(307, 308));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(309, 310), new Rectangular(311, 312)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(309, 310));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(311, 312));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(313, 314), new Rectangular(315, 316)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(313, 314));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(315, 316));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled60");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled60')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(213, 214, 215, 216), Color.FromArgb(217, 218, 219, 220)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(221, 222, 223, 224), Color.FromArgb(225, 226, 227, 228)));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(222, 223, 224, 221));");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(226, 227, 228, 225));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(349.0, 350.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(349.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(350.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(351.0, 352.0));
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(351.0);");
                        m_assertionsWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(352.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled61");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled61')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(156, 157, 158, 159), Color.FromArgb(160, 161, 162, 163)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.631372549019608, 0.635294117647059, 0.63921568627451, 0.627450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled62");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled62')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled63");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled63')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(172, 173, 174, 175), Color.FromArgb(176, 177, 178, 179)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.67843137254902, 0.682352941176471, 0.686274509803922, 0.674509803921569), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled64");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled64')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.709803921568627, 0.713725490196078, 0.717647058823529, 0.705882352941177), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.725490196078431, 0.729411764705882, 0.733333333333333, 0.72156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled65");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled65')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled66");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled66')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(196, 197, 198, 199), Color.FromArgb(200, 201, 202, 203)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled67");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled67')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(204, 205, 206, 207), Color.FromArgb(208, 209, 210, 211)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.819607843137255, 0.823529411764706, 0.827450980392157, 0.815686274509804), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled68");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled68')).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219)));
                    m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualPoint()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled69");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled69')).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(220, 221, 222, 223), Color.FromArgb(224, 225, 226, 227)));
                    m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.866666666666667, 0.870588235294118, 0.874509803921569, 0.862745098039216), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled70");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled70')).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(228, 229, 230, 231), Color.FromArgb(232, 233, 234, 235)));
                    m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.913725490196078, 0.917647058823529, 0.92156862745098, 0.909803921568627), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualPolygon()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled71");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled71')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(236, 237, 238, 239), Color.FromArgb(240, 241, 242, 243)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.933333333333333, 0.937254901960784, 0.925490196078431), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.945098039215686, 0.949019607843137, 0.952941176470588, 0.941176470588235), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled72");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled72')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(317, 318), new Rectangular(319, 320)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(317, 318));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(319, 320));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(229, 230, 231, 232), Color.FromArgb(233, 234, 235, 236)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled73");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled73')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(237, 238, 239, 240), Color.FromArgb(241, 242, 243, 244)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(238, 239, 240, 237));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(353.0, 354.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(353.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(354.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(321, 322), new Rectangular(323, 324)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(321, 322));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(323, 324));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(325, 326), new Rectangular(327, 328)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(325, 326));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(327, 328));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(329, 330), new Rectangular(331, 332)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(329, 330));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(331, 332));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled74");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled74')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(253, 254, 0, 1), Color.FromArgb(2, 3, 4, 5)));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(254, 0, 1, 253));");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(355.0, 356.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(355.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(356.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(357.0, 358.0));
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(357.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(358.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled75");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled75')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(244, 245, 246, 247), Color.FromArgb(248, 249, 250, 251)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.964705882352941, 0.968627450980392, 0.956862745098039), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled76");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled76')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(252, 253, 254, 0), Color.FromArgb(1, 2, 3, 4)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00784313725490196, 0.0117647058823529, 0.0156862745098039, 0.00392156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled77");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled77')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled78");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled78')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(13, 14, 15, 16), Color.FromArgb(17, 18, 19, 20)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled79");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled79')).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(21, 22, 23, 24), Color.FromArgb(25, 26, 27, 28)));
                    m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.101960784313725, 0.105882352941176, 0.109803921568627, 0.0980392156862745), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualPolyline()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled80");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled80')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(29, 30, 31, 32), Color.FromArgb(33, 34, 35, 36)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled81");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled81')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(14, 15, 16, 17), Color.FromArgb(18, 19, 20, 21)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(359.0, 360.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(359.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(360.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled82");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled82')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(22, 23, 24, 25), Color.FromArgb(26, 27, 28, 29)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(23, 24, 25, 22));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled83");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled83')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(30, 31, 32, 33), Color.FromArgb(34, 35, 36, 37)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(361.0, 362.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(361.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(362.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled84");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled84')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(333, 334), new Rectangular(335, 336)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(333, 334));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(335, 336));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(38, 39, 40, 41), Color.FromArgb(42, 43, 44, 45)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled85");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled85')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(363.0, 364.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(363.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(364.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(337, 338), new Rectangular(339, 340)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(337, 338));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(339, 340));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(341, 342), new Rectangular(343, 344)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(341, 342));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(343, 344));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(345, 346), new Rectangular(347, 348)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(345, 346));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(347, 348));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled86");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled86')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(54, 55, 56, 57), Color.FromArgb(58, 59, 60, 61)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(55, 56, 57, 54));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(59, 60, 61, 58));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(62, 63, 64, 65), Color.FromArgb(66, 67, 68, 69)));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(63, 64, 65, 62));");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(365.0, 366.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(365.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(366.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(367.0, 368.0));
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(367.0);");
                        m_assertionsWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(368.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled87");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled87')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(37, 38, 39, 40), Color.FromArgb(41, 42, 43, 44)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled88");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled88')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(45, 46, 47, 48), Color.FromArgb(49, 50, 51, 52)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.196078431372549, 0.2, 0.203921568627451, 0.192156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled89");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled89')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(53, 54, 55, 56), Color.FromArgb(57, 58, 59, 60)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled90");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled90')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(61, 62, 63, 64), Color.FromArgb(65, 66, 67, 68)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled91");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled91')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled92");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled92')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled93");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled93')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(85, 86, 87, 88), Color.FromArgb(89, 90, 91, 92)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled94");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled94')).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(93, 94, 95, 96), Color.FromArgb(97, 98, 99, 100)));
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.384313725490196, 0.388235294117647, 0.392156862745098, 0.380392156862745), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualRectangle()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled95");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled95')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenCoordinatesProperty())
                {
                    w2.WriteWsenDegrees(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new CartographicExtent(17, 18, 19, 20), new CartographicExtent(21, 22, 23, 24)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(17, 18, 19, 20));");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(21, 22, 23, 24));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled96");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled96')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled97");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled97')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(349, 350), new Rectangular(351, 352)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(349, 350));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(351, 352));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled98");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled98')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(78, 79, 80, 81), Color.FromArgb(82, 83, 84, 85)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(369.0, 370.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(369.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(370.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(353, 354), new Rectangular(355, 356)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(353, 354));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(355, 356));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(357, 358), new Rectangular(359, 360)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(357, 358));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(359, 360));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(361, 362), new Rectangular(363, 364)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(361, 362));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(363, 364));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled99");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled99')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(94, 95, 96, 97), Color.FromArgb(98, 99, 100, 101)));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(95, 96, 97, 94));");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(99, 100, 101, 98));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(371.0, 372.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(371.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(372.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(373.0, 374.0));
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(373.0);");
                        m_assertionsWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(374.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled100");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled100')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled101");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled101')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(117, 118, 119, 120), Color.FromArgb(121, 122, 123, 124)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.47843137254902, 0.482352941176471, 0.486274509803922, 0.474509803921569), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled102");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled102')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(125, 126, 127, 128), Color.FromArgb(129, 130, 131, 132)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled103");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled103')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(133, 134, 135, 136), Color.FromArgb(137, 138, 139, 140)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled104");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled104')).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(141, 142, 143, 144), Color.FromArgb(145, 146, 147, 148)));
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualWall()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled105");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled105')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(149, 150, 151, 152), Color.FromArgb(153, 154, 155, 156)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled106");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled106')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(365, 366), new Rectangular(367, 368)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(365, 366));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(367, 368));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(102, 103, 104, 105), Color.FromArgb(106, 107, 108, 109)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(103, 104, 105, 102));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(107, 108, 109, 106));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled107");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled107')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(375.0, 376.0));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(375.0);");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(376.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(369, 370), new Rectangular(371, 372)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(369, 370));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(371, 372));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(373, 374), new Rectangular(375, 376)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(373, 374));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(375, 376));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(377, 378), new Rectangular(379, 380)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(377, 378));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(379, 380));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled108");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled108')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(118, 119, 120, 121), Color.FromArgb(122, 123, 124, 125)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133)));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(377.0, 378.0));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(377.0);");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(378.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(379.0, 380.0));
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(379.0);");
                        m_assertionsWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(380.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled109");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled109')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(157, 158, 159, 160), Color.FromArgb(161, 162, 163, 164)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled110");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled110')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(165, 166, 167, 168), Color.FromArgb(169, 170, 171, 172)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.666666666666667, 0.670588235294118, 0.674509803921569, 0.662745098039216), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled111");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled111')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(173, 174, 175, 176), Color.FromArgb(177, 178, 179, 180)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled112");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled112')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(181, 182, 183, 184), Color.FromArgb(185, 186, 187, 188)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled113");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled113')).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196)));
                    m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-14);");
                    m_assertionsWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualConicSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled114");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled114')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled115");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled115')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled116");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled116')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(381, 382), new Rectangular(383, 384)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(381, 382));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(383, 384));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(134, 135, 136, 137), Color.FromArgb(138, 139, 140, 141)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(139, 140, 141, 138));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled117");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled117')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(142, 143, 144, 145), Color.FromArgb(146, 147, 148, 149)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(381.0, 382.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(381.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(382.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(385, 386), new Rectangular(387, 388)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(385, 386));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(387, 388));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(389, 390), new Rectangular(391, 392)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(389, 390));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(391, 392));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(393, 394), new Rectangular(395, 396)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(393, 394));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(395, 396));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled118");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled118')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(150, 151, 152, 153), Color.FromArgb(154, 155, 156, 157)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(158, 159, 160, 161), Color.FromArgb(162, 163, 164, 165)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(383.0, 384.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(383.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(384.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(385.0, 386.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(385.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(386.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled119");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled119')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(213, 214, 215, 216), Color.FromArgb(217, 218, 219, 220)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled120");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled120')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(221, 222, 223, 224), Color.FromArgb(225, 226, 227, 228)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled121");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled121')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(229, 230, 231, 232), Color.FromArgb(233, 234, 235, 236)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled122");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled122')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(237, 238, 239, 240), Color.FromArgb(241, 242, 243, 244)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.949019607843137, 0.952941176470588, 0.956862745098039, 0.945098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled123");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled123')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled124");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled124')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(397, 398), new Rectangular(399, 400)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(397, 398));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(399, 400));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(166, 167, 168, 169), Color.FromArgb(170, 171, 172, 173)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(167, 168, 169, 166));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(171, 172, 173, 170));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled125");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled125')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(174, 175, 176, 177), Color.FromArgb(178, 179, 180, 181)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(175, 176, 177, 174));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(179, 180, 181, 178));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(387.0, 388.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(387.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(388.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(401, 402), new Rectangular(403, 404)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(401, 402));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(403, 404));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(405, 406), new Rectangular(407, 408)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(405, 406));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(407, 408));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(409, 410), new Rectangular(411, 412)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(409, 410));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(411, 412));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled126");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled126')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(182, 183, 184, 185), Color.FromArgb(186, 187, 188, 189)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(183, 184, 185, 182));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(190, 191, 192, 193), Color.FromArgb(194, 195, 196, 197)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(191, 192, 193, 190));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(195, 196, 197, 194));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(389.0, 390.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(389.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(390.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(391.0, 392.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(391.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(392.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled127");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled127')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(253, 254, 0, 1), Color.FromArgb(2, 3, 4, 5)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.996078431372549, 0, 0.00392156862745098, 0.992156862745098), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled128");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled128')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled129");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled129')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(14, 15, 16, 17), Color.FromArgb(18, 19, 20, 21)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled130");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled130')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(22, 23, 24, 25), Color.FromArgb(26, 27, 28, 29)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled131");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled131')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(30, 31, 32, 33), Color.FromArgb(34, 35, 36, 37)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled132");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled132')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(413, 414), new Rectangular(415, 416)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(413, 414));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(415, 416));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled133");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled133')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(207, 208, 209, 206));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(393.0, 394.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(393.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(394.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(417, 418), new Rectangular(419, 420)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(417, 418));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(419, 420));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(421, 422), new Rectangular(423, 424)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(421, 422));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(423, 424));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(425, 426), new Rectangular(427, 428)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(425, 426));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(427, 428));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled134");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled134')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(214, 215, 216, 217), Color.FromArgb(218, 219, 220, 221)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(215, 216, 217, 214));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(219, 220, 221, 218));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(395.0, 396.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(395.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(396.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(397.0, 398.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(397.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(398.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled135");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled135')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(38, 39, 40, 41), Color.FromArgb(42, 43, 44, 45)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled136");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled136')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.184313725490196, 0.188235294117647, 0.192156862745098, 0.180392156862745), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled137");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled137')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(54, 55, 56, 57), Color.FromArgb(58, 59, 60, 61)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.231372549019608, 0.235294117647059, 0.23921568627451, 0.227450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled138");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled138')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(62, 63, 64, 65), Color.FromArgb(66, 67, 68, 69)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled139");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled139')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled140");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled140')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(429, 430), new Rectangular(431, 432)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(429, 430));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(431, 432));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(230, 231, 232, 233), Color.FromArgb(234, 235, 236, 237)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(231, 232, 233, 230));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(235, 236, 237, 234));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled141");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled141')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(238, 239, 240, 241), Color.FromArgb(242, 243, 244, 245)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(399.0, 400.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(399.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(400.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(433, 434), new Rectangular(435, 436)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(433, 434));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(435, 436));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(437, 438), new Rectangular(439, 440)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(437, 438));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(439, 440));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(441, 442), new Rectangular(443, 444)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(441, 442));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(443, 444));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled142");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled142')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(246, 247, 248, 249), Color.FromArgb(250, 251, 252, 253)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(401.0, 402.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(401.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(402.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(403.0, 404.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(403.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(404.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled143");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled143')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(78, 79, 80, 81), Color.FromArgb(82, 83, 84, 85)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled144");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled144')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled145");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled145')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(94, 95, 96, 97), Color.FromArgb(98, 99, 100, 101)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled146");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled146')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(102, 103, 104, 105), Color.FromArgb(106, 107, 108, 109)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.419607843137255, 0.423529411764706, 0.427450980392157, 0.415686274509804), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled147");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled147')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled148");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled148')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(445, 446), new Rectangular(447, 448)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(445, 446));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(447, 448));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled149");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled149')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(15, 16, 17, 18), Color.FromArgb(19, 20, 21, 22)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(405.0, 406.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(405.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(406.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(449, 450), new Rectangular(451, 452)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(449, 450));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(451, 452));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(453, 454), new Rectangular(455, 456)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(453, 454));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(455, 456));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(457, 458), new Rectangular(459, 460)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(457, 458));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(459, 460));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled150");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled150')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(24, 25, 26, 23));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(28, 29, 30, 27));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(31, 32, 33, 34), Color.FromArgb(35, 36, 37, 38)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(32, 33, 34, 31));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(407.0, 408.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(407.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(408.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(409.0, 410.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(409.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(410.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled151");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled151')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(118, 119, 120, 121), Color.FromArgb(122, 123, 124, 125)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled152");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled152')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled153");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled153')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(134, 135, 136, 137), Color.FromArgb(138, 139, 140, 141)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled154");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled154')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(142, 143, 144, 145), Color.FromArgb(146, 147, 148, 149)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled155");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled155')).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(150, 151, 152, 153), Color.FromArgb(154, 155, 156, 157)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.607843137254902, 0.611764705882353, 0.615686274509804, 0.603921568627451), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualCustomPatternSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled156");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled156')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(158, 159, 160, 161), Color.FromArgb(162, 163, 164, 165)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled157");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled157')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(166, 167, 168, 169), Color.FromArgb(170, 171, 172, 173)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.654901960784314, 0.658823529411765, 0.662745098039216, 0.650980392156863), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled158");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled158')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(461, 462), new Rectangular(463, 464)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(461, 462));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(463, 464));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(39, 40, 41, 42), Color.FromArgb(43, 44, 45, 46)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled159");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled159')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(47, 48, 49, 50), Color.FromArgb(51, 52, 53, 54)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(411.0, 412.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(411.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(412.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(465, 466), new Rectangular(467, 468)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(465, 466));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(467, 468));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(469, 470), new Rectangular(471, 472)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(469, 470));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(471, 472));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(473, 474), new Rectangular(475, 476)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(473, 474));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(475, 476));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled160");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled160')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(55, 56, 57, 58), Color.FromArgb(59, 60, 61, 62)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(60, 61, 62, 59));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(63, 64, 65, 66), Color.FromArgb(67, 68, 69, 70)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(64, 65, 66, 63));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(68, 69, 70, 67));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(413.0, 414.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(413.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(414.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(415.0, 416.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(415.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(416.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled161");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled161')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(174, 175, 176, 177), Color.FromArgb(178, 179, 180, 181)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled162");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled162')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(182, 183, 184, 185), Color.FromArgb(186, 187, 188, 189)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.717647058823529, 0.72156862745098, 0.725490196078431, 0.713725490196078), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled163");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled163')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(190, 191, 192, 193), Color.FromArgb(194, 195, 196, 197)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled164");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled164')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.796078431372549, 0.8, 0.803921568627451, 0.792156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled165");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled165')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled166");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled166')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(477, 478), new Rectangular(479, 480)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(477, 478));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(479, 480));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(71, 72, 73, 74), Color.FromArgb(75, 76, 77, 78)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(72, 73, 74, 71));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled167");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled167')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(417.0, 418.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(417.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(418.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(481, 482), new Rectangular(483, 484)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(481, 482));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(483, 484));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(485, 486), new Rectangular(487, 488)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(485, 486));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(487, 488));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(489, 490), new Rectangular(491, 492)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(489, 490));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(491, 492));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled168");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled168')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(87, 88, 89, 90), Color.FromArgb(91, 92, 93, 94)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(88, 89, 90, 87));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(92, 93, 94, 91));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(96, 97, 98, 95));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(100, 101, 102, 99));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(419.0, 420.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(419.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(420.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(421.0, 422.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(421.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(422.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled169");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled169')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(214, 215, 216, 217), Color.FromArgb(218, 219, 220, 221)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled170");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled170')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled171");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled171')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(230, 231, 232, 233), Color.FromArgb(234, 235, 236, 237)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled172");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled172')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(238, 239, 240, 241), Color.FromArgb(242, 243, 244, 245)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled173");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled173')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(246, 247, 248, 249), Color.FromArgb(250, 251, 252, 253)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled174");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled174')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(493, 494), new Rectangular(495, 496)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(493, 494));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(495, 496));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled175");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled175')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(111, 112, 113, 114), Color.FromArgb(115, 116, 117, 118)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(112, 113, 114, 111));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(116, 117, 118, 115));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(423.0, 424.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(423.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(424.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(497, 498), new Rectangular(499, 500)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(497, 498));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(499, 500));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(501, 502), new Rectangular(503, 504)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(501, 502));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(503, 504));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(505, 506), new Rectangular(507, 508)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(505, 506));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(507, 508));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled176");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled176')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(120, 121, 122, 119));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(124, 125, 126, 123));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(127, 128, 129, 130), Color.FromArgb(131, 132, 133, 134)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(132, 133, 134, 131));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(425.0, 426.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(425.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(426.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(427.0, 428.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(427.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(428.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled177");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled177')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled178");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled178')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled179");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled179')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(15, 16, 17, 18), Color.FromArgb(19, 20, 21, 22)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled180");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled180')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled181");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled181')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(31, 32, 33, 34), Color.FromArgb(35, 36, 37, 38)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.125490196078431, 0.129411764705882, 0.133333333333333, 0.12156862745098), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled182");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled182')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(509, 510), new Rectangular(511, 512)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(509, 510));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(511, 512));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled183");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled183')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(429.0, 430.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(429.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(430.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(513, 514), new Rectangular(515, 516)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(513, 514));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(515, 516));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(517, 518), new Rectangular(519, 520)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(517, 518));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(519, 520));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(521, 522), new Rectangular(523, 524)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(521, 522));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(523, 524));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled184");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled184')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(151, 152, 153, 154), Color.FromArgb(155, 156, 157, 158)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(159, 160, 161, 162), Color.FromArgb(163, 164, 165, 166)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(431.0, 432.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(431.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(432.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(433.0, 434.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(433.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(434.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled185");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled185')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(39, 40, 41, 42), Color.FromArgb(43, 44, 45, 46)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.172549019607843, 0.176470588235294, 0.180392156862745, 0.168627450980392), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled186");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled186')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(47, 48, 49, 50), Color.FromArgb(51, 52, 53, 54)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled187");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled187')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(55, 56, 57, 58), Color.FromArgb(59, 60, 61, 62)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled188");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled188')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(63, 64, 65, 66), Color.FromArgb(67, 68, 69, 70)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled189");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled189')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(71, 72, 73, 74), Color.FromArgb(75, 76, 77, 78)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled190");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled190')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(525, 526), new Rectangular(527, 528)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(525, 526));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(527, 528));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(167, 168, 169, 170), Color.FromArgb(171, 172, 173, 174)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled191");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled191')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(175, 176, 177, 178), Color.FromArgb(179, 180, 181, 182)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(435.0, 436.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(435.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(436.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(529, 530), new Rectangular(531, 532)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(529, 530));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(531, 532));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(533, 534), new Rectangular(535, 536)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(533, 534));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(535, 536));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(537, 538), new Rectangular(539, 540)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(537, 538));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(539, 540));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled192");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled192')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(183, 184, 185, 186), Color.FromArgb(187, 188, 189, 190)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(191, 192, 193, 194), Color.FromArgb(195, 196, 197, 198)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(437.0, 438.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(437.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(438.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(439.0, 440.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(439.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(440.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled193");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled193')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled194");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled194')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(87, 88, 89, 90), Color.FromArgb(91, 92, 93, 94)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled195");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled195')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled196");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled196')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.407843137254902, 0.411764705882353, 0.415686274509804, 0.403921568627451), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled197");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled197')).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(111, 112, 113, 114), Color.FromArgb(115, 116, 117, 118)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualRectangularSensor()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled198");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled198')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled199");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled199')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(127, 128, 129, 130), Color.FromArgb(131, 132, 133, 134)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.501960784313725, 0.505882352941176, 0.509803921568627, 0.498039215686275), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled200");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled200')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(541, 542), new Rectangular(543, 544)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(541, 542));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(543, 544));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(199, 200, 201, 202), Color.FromArgb(203, 204, 205, 206)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled201");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled201')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(441.0, 442.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(441.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(442.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(545, 546), new Rectangular(547, 548)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(545, 546));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(547, 548));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(549, 550), new Rectangular(551, 552)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(549, 550));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(551, 552));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(553, 554), new Rectangular(555, 556)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(553, 554));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(555, 556));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled202");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled202')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(223, 224, 225, 226), Color.FromArgb(227, 228, 229, 230)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(443.0, 444.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(443.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(444.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(445.0, 446.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(445.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(446.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled203");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled203')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled204");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled204')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled205");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled205')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(151, 152, 153, 154), Color.FromArgb(155, 156, 157, 158)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.596078431372549, 0.6, 0.603921568627451, 0.592156862745098), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled206");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled206')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(159, 160, 161, 162), Color.FromArgb(163, 164, 165, 166)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled207");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled207')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(167, 168, 169, 170), Color.FromArgb(171, 172, 173, 174)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled208");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled208')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(557, 558), new Rectangular(559, 560)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(557, 558));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(559, 560));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled209");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled209')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(447.0, 448.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(447.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(448.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(561, 562), new Rectangular(563, 564)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(561, 562));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(563, 564));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(565, 566), new Rectangular(567, 568)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(565, 566));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(567, 568));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(569, 570), new Rectangular(571, 572)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(569, 570));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(571, 572));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled210");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled210')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(247, 248, 249, 250), Color.FromArgb(251, 252, 253, 254)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(0, 1, 2, 3), Color.FromArgb(4, 5, 6, 7)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(5, 6, 7, 4));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(449.0, 450.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(449.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(450.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(451.0, 452.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(451.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(452.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled211");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled211')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(175, 176, 177, 178), Color.FromArgb(179, 180, 181, 182)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.690196078431373, 0.694117647058824, 0.698039215686274, 0.686274509803922), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled212");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled212')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(183, 184, 185, 186), Color.FromArgb(187, 188, 189, 190)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.737254901960784, 0.741176470588235, 0.745098039215686, 0.733333333333333), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled213");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled213')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(191, 192, 193, 194), Color.FromArgb(195, 196, 197, 198)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled214");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled214')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(199, 200, 201, 202), Color.FromArgb(203, 204, 205, 206)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled215");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled215')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled216");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled216')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(573, 574), new Rectangular(575, 576)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(573, 574));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(575, 576));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled217");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled217')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(16, 17, 18, 19), Color.FromArgb(20, 21, 22, 23)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(453.0, 454.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(453.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(454.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(577, 578), new Rectangular(579, 580)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(577, 578));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(579, 580));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(581, 582), new Rectangular(583, 584)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(581, 582));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(583, 584));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(585, 586), new Rectangular(587, 588)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(585, 586));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(587, 588));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled218");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled218')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(24, 25, 26, 27), Color.FromArgb(28, 29, 30, 31)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(32, 33, 34, 35), Color.FromArgb(36, 37, 38, 39)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(455.0, 456.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(455.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(456.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(457.0, 458.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(457.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(458.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled219");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled219')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled220");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled220')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(223, 224, 225, 226), Color.FromArgb(227, 228, 229, 230)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.87843137254902, 0.882352941176471, 0.886274509803922, 0.874509803921569), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled221");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled221')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled222");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled222')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled223");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled223')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(247, 248, 249, 250), Color.FromArgb(251, 252, 253, 254)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.972549019607843, 0.976470588235294, 0.980392156862745, 0.968627450980392), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled224");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled224')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(589, 590), new Rectangular(591, 592)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(589, 590));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(591, 592));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(40, 41, 42, 43), Color.FromArgb(44, 45, 46, 47)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled225");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled225')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(48, 49, 50, 51), Color.FromArgb(52, 53, 54, 55)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(459.0, 460.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(459.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(460.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(593, 594), new Rectangular(595, 596)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(593, 594));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(595, 596));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(597, 598), new Rectangular(599, 600)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(597, 598));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(599, 600));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(601, 602), new Rectangular(603, 604)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(601, 602));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(603, 604));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled226");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled226')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(64, 65, 66, 67), Color.FromArgb(68, 69, 70, 71)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(461.0, 462.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(461.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(462.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(463.0, 464.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(463.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(464.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled227");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled227')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(0, 1, 2, 3), Color.FromArgb(4, 5, 6, 7)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled228");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled228')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled229");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled229')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(16, 17, 18, 19), Color.FromArgb(20, 21, 22, 23)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled230");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled230')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(24, 25, 26, 27), Color.FromArgb(28, 29, 30, 31)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.113725490196078, 0.117647058823529, 0.12156862745098, 0.109803921568627), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled231");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled231')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(32, 33, 34, 35), Color.FromArgb(36, 37, 38, 39)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled232");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled232')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(605, 606), new Rectangular(607, 608)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(605, 606));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(607, 608));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(72, 73, 74, 75), Color.FromArgb(76, 77, 78, 79)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled233");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled233')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(80, 81, 82, 83), Color.FromArgb(84, 85, 86, 87)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(465.0, 466.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(465.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(466.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(609, 610), new Rectangular(611, 612)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(609, 610));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(611, 612));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(613, 614), new Rectangular(615, 616)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(613, 614));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(615, 616));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(617, 618), new Rectangular(619, 620)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(617, 618));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(619, 620));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled234");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled234')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(88, 89, 90, 91), Color.FromArgb(92, 93, 94, 95)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(96, 97, 98, 99), Color.FromArgb(100, 101, 102, 103)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(467.0, 468.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(467.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(468.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(469.0, 470.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(469.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(470.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled235");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled235')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(40, 41, 42, 43), Color.FromArgb(44, 45, 46, 47)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.16078431372549, 0.164705882352941, 0.168627450980392, 0.156862745098039), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled236");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled236')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(48, 49, 50, 51), Color.FromArgb(52, 53, 54, 55)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled237");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled237')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled238");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled238')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(64, 65, 66, 67), Color.FromArgb(68, 69, 70, 71)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.254901960784314, 0.258823529411765, 0.262745098039216, 0.250980392156863), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled239");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled239')).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(72, 73, 74, 75), Color.FromArgb(76, 77, 78, 79)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualFan()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled240");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled240')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(80, 81, 82, 83), Color.FromArgb(84, 85, 86, 87)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.333333333333333, 0.337254901960784, 0.341176470588235, 0.329411764705882), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled241");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled241')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(621, 622), new Rectangular(623, 624)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(621, 622));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(623, 624));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(104, 105, 106, 107), Color.FromArgb(108, 109, 110, 111)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled242");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled242')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(471.0, 472.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(471.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(472.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(625, 626), new Rectangular(627, 628)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(625, 626));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(627, 628));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(629, 630), new Rectangular(631, 632)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(629, 630));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(631, 632));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Rectangular(633, 634), new Rectangular(635, 636)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(633, 634));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(635, 636));");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled243");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled243')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(120, 121, 122, 123), Color.FromArgb(124, 125, 126, 127)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135)));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(473.0, 474.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(473.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(474.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(CreateList(m_documentStartDate, m_documentStopDate), CreateList(475.0, 476.0));
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(475.0);");
                        m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(476.0);");
                    }
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled244");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled244')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(88, 89, 90, 91), Color.FromArgb(92, 93, 94, 95)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled245");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled245')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(96, 97, 98, 99), Color.FromArgb(100, 101, 102, 103)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled246");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled246')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(104, 105, 106, 107), Color.FromArgb(108, 109, 110, 111)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled247");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled247')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled248");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled248')).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(120, 121, 122, 123), Color.FromArgb(124, 125, 126, 127)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-14);");
                }
            }
        }
        private void WriteSampledValuesIndividualVector()
        {
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled249");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled249')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(CreateList(m_documentStartDate, m_documentStopDate), CreateList(Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled250");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled250')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitSpherical(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new UnitSpherical(9, 10), new UnitSpherical(11, 12)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(9, 10)));");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(11, 12)));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled251");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled251')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new Cartesian(70, 71, 72), new Cartesian(73, 74, 75)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(70, 71, 72));");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(73, 74, 75));");
                }
            }
            using (var packet = m_writer.OpenPacket(m_output))
            {
                packet.WriteId("sampled252");
                WriteAssertionBoth("    expect(e = dataSource.entities.getById('sampled252')).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitCartesian(CreateList(m_documentStartDate, m_documentStopDate), CreateList(new UnitCartesian(0.535201530235202, 0.576370878714833, 0.617540227194464), new UnitCartesian(0.542762825242207, 0.576685501819845, 0.610608178397482)));
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.535201530235202, 0.576370878714833, 0.617540227194464), 1e-14);");
                    m_extensionsAssertionsWriter.WriteLine("    expect(e.vector.direction.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.542762825242207, 0.576685501819845, 0.610608178397482), 1e-14);");
                }
            }
        }
    }
}

// This file was generated automatically by GenerateFromSchema.  Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer

using System.Collections.Generic;
using System.Drawing;
using System.IO;
using CesiumLanguageWriter;
using NUnit.Framework;

namespace CesiumLanguageWriterTests
{
    [TestFixture]
    public class TestGenerateValidationDocument
    {
        [Test]
        public void GenerateValidationDocument()
        {
            JulianDate documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0).ToJulianDate();
            JulianDate documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0).ToJulianDate();
            using (var streamWriter = new StreamWriter("ValidationDocument.czml"))
            using (var assertionsStreamWriter = new StreamWriter("ValidationDocumentAssertions.js"))
            {
                assertionsStreamWriter.WriteLine("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
                assertionsStreamWriter.WriteLine("    /*jshint -W030, -W120 */");
                assertionsStreamWriter.WriteLine("    var e;");
                assertionsStreamWriter.WriteLine("    var checkExtensions = false;");
                assertionsStreamWriter.WriteLine("    var date;");
                assertionsStreamWriter.WriteLine("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
                assertionsStreamWriter.WriteLine("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
                var output = new CesiumOutputStream(streamWriter) { PrettyFormatting = true };
                var writer = new CesiumStreamWriter();
                output.WriteStartSequence();
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("document");
                    packet.WriteName("ValidationDocument");
                    packet.WriteVersion("1.0");
                    using (var clock = packet.OpenClockProperty())
                    {
                        clock.WriteInterval(documentStartDate, documentStopDate);
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
                        clock.WriteCurrentTime(documentStartDate);
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
                        clock.WriteMultiplier(1.0);
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.multiplier).toEqual(1.0);");
                        clock.WriteRange(ClockRange.Unbounded);
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
                        clock.WriteStep(ClockStep.SystemClockMultiplier);
                        assertionsStreamWriter.WriteLine("    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("Constant");
                    assertionsStreamWriter.WriteLine("    var constant = e = dataSource.entities.getById('Constant');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    assertionsStreamWriter.WriteLine("    date = JulianDate.now();");
                    using (var w = packet.OpenDescriptionProperty())
                    {
                        w.WriteString("string0");
                        assertionsStreamWriter.WriteLine("    expect(e.description.getValue(date)).toEqual('string0');");
                    }
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteCartesian(new Cartesian(1, 2, 3));
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
                    }
                    using (var w = packet.OpenOrientationProperty())
                    {
                        w.WriteUnitQuaternion(new UnitQuaternion(0.356348322549899, 0.445435403187374, 0.534522483824849, 0.623609564462324));
                        assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.445435403187374, 0.534522483824849, 0.623609564462324, 0.356348322549899), 1e-14);");
                    }
                    using (var w = packet.OpenViewFromProperty())
                    {
                        w.WriteCartesian(new Cartesian(8, 9, 10));
                        assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(8, 9, 10));");
                    }
                    using (var w = packet.OpenBillboardProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenImageProperty())
                        {
                            w2.WriteUri("http://example.com/11", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual('http://example.com/11');");
                        }
                        using (var w2 = w.OpenScaleProperty())
                        {
                            w2.WriteNumber(12.0);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(12.0);");
                        }
                        using (var w2 = w.OpenPixelOffsetProperty())
                        {
                            w2.WriteCartesian2(new Rectangular(13, 14));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(13, 14));");
                        }
                        using (var w2 = w.OpenEyeOffsetProperty())
                        {
                            w2.WriteCartesian(new Cartesian(15, 16, 17));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(15, 16, 17));");
                        }
                        using (var w2 = w.OpenHorizontalOriginProperty())
                        {
                            w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                        }
                        using (var w2 = w.OpenVerticalOriginProperty())
                        {
                            w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                        }
                        using (var w2 = w.OpenColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(18, 19, 20, 21));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                        }
                        using (var w2 = w.OpenRotationProperty())
                        {
                            w2.WriteNumber(22.0);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(22.0);");
                        }
                        using (var w2 = w.OpenAlignedAxisProperty())
                        {
                            w2.WriteCartesian(new Cartesian(23, 24, 25));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(new Cartesian3(23, 24, 25));");
                        }
                        using (var w2 = w.OpenSizeInMetersProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenWidthProperty())
                        {
                            w2.WriteNumber(26.0);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(26.0);");
                        }
                        using (var w2 = w.OpenHeightProperty())
                        {
                            w2.WriteNumber(27.0);
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(27.0);");
                        }
                        using (var w2 = w.OpenScaleByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(28, 29, 30, 31));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(28, 29, 30, 31));");
                        }
                        using (var w2 = w.OpenTranslucencyByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(32, 33, 34, 35));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(32, 33, 34, 35));");
                        }
                        using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(36, 37, 38, 39));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(36, 37, 38, 39));");
                        }
                        using (var w2 = w.OpenImageSubRegionProperty())
                        {
                            w2.WriteBoundingRectangle(BoundingRectangle.FromWidthHeight(40, 41, 42, 43));
                            assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(40, 41, 42, 43));");
                        }
                    }
                    using (var w = packet.OpenBoxProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDimensionsProperty())
                        {
                            w2.WriteCartesian(new Cartesian(44, 45, 46));
                            assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(44, 45, 46));");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenStripeProperty())
                            {
                                using (var m2 = m.OpenOrientationProperty())
                                {
                                    m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                                    assertionsStreamWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                                }
                                using (var m2 = m.OpenEvenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(48, 49, 50, 51));
                                    assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                                }
                                using (var m2 = m.OpenOddColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(52, 53, 54, 55));
                                    assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(53, 54, 55, 52));");
                                }
                                using (var m2 = m.OpenOffsetProperty())
                                {
                                    m2.WriteNumber(56.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(56.0);");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteNumber(57.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(57.0);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(58, 59, 60, 61));
                            assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(59, 60, 61, 58));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(62.0);
                            assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(62.0);");
                        }
                    }
                    using (var w = packet.OpenCorridorProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenPositionsProperty())
                        {
                            w2.WriteCartesian(new List<Cartesian> { new Cartesian(63, 64, 65), new Cartesian(66, 67, 68) });
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(63, 64, 65), new Cartesian3(66, 67, 68) ]);");
                        }
                        using (var w2 = w.OpenWidthProperty())
                        {
                            w2.WriteNumber(69.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(69.0);");
                        }
                        using (var w2 = w.OpenHeightProperty())
                        {
                            w2.WriteNumber(70.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(70.0);");
                        }
                        using (var w2 = w.OpenExtrudedHeightProperty())
                        {
                            w2.WriteNumber(71.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(71.0);");
                        }
                        using (var w2 = w.OpenCornerTypeProperty())
                        {
                            w2.WriteCornerType(CesiumCornerType.Beveled);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(72.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(72.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/74", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/74');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(75, 76));
                                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(75, 76));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(77, 78, 79, 80));
                                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(78, 79, 80, 77));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(81, 82, 83, 84));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(82, 83, 84, 81));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(85.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(85.0);");
                        }
                    }
                    using (var w = packet.OpenCylinderProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenLengthProperty())
                        {
                            w2.WriteNumber(86.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(86.0);");
                        }
                        using (var w2 = w.OpenTopRadiusProperty())
                        {
                            w2.WriteNumber(87.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(87.0);");
                        }
                        using (var w2 = w.OpenBottomRadiusProperty())
                        {
                            w2.WriteNumber(88.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(88.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/90", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/90');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(91, 92));
                                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(91, 92));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(93, 94, 95, 96));
                                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(97, 98, 99, 100));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(101.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(101.0);");
                        }
                        using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                        {
                            w2.WriteNumber(102.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(102.0);");
                        }
                        using (var w2 = w.OpenSlicesProperty())
                        {
                            w2.WriteNumber(103.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(103.0);");
                        }
                    }
                    using (var w = packet.OpenEllipseProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenSemiMajorAxisProperty())
                        {
                            w2.WriteNumber(104.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(104.0);");
                        }
                        using (var w2 = w.OpenSemiMinorAxisProperty())
                        {
                            w2.WriteNumber(105.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(105.0);");
                        }
                        using (var w2 = w.OpenHeightProperty())
                        {
                            w2.WriteNumber(106.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(106.0);");
                        }
                        using (var w2 = w.OpenExtrudedHeightProperty())
                        {
                            w2.WriteNumber(107.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(107.0);");
                        }
                        using (var w2 = w.OpenRotationProperty())
                        {
                            w2.WriteNumber(108.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(108.0);");
                        }
                        using (var w2 = w.OpenStRotationProperty())
                        {
                            w2.WriteNumber(109.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(109.0);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(110.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(110.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenStripeProperty())
                            {
                                using (var m2 = m.OpenOrientationProperty())
                                {
                                    m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                                }
                                using (var m2 = m.OpenEvenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(112, 113, 114, 115));
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                                }
                                using (var m2 = m.OpenOddColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(116, 117, 118, 119));
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                                }
                                using (var m2 = m.OpenOffsetProperty())
                                {
                                    m2.WriteNumber(120.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(120.0);");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteNumber(121.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(121.0);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(122, 123, 124, 125));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(126.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(126.0);");
                        }
                        using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                        {
                            w2.WriteNumber(127.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(127.0);");
                        }
                    }
                    using (var w = packet.OpenEllipsoidProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenRadiiProperty())
                        {
                            w2.WriteCartesian(new Cartesian(128, 129, 130));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(128, 129, 130));");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenStripeProperty())
                            {
                                using (var m2 = m.OpenOrientationProperty())
                                {
                                    m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                                }
                                using (var m2 = m.OpenEvenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(132, 133, 134, 135));
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                                }
                                using (var m2 = m.OpenOddColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(136, 137, 138, 139));
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                                }
                                using (var m2 = m.OpenOffsetProperty())
                                {
                                    m2.WriteNumber(140.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(140.0);");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteNumber(141.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(141.0);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(142, 143, 144, 145));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(146.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(146.0);");
                        }
                        using (var w2 = w.OpenStackPartitionsProperty())
                        {
                            w2.WriteNumber(147.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(147.0);");
                        }
                        using (var w2 = w.OpenSlicePartitionsProperty())
                        {
                            w2.WriteNumber(148.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(148.0);");
                        }
                        using (var w2 = w.OpenSubdivisionsProperty())
                        {
                            w2.WriteNumber(149.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(149.0);");
                        }
                    }
                    using (var w = packet.OpenLabelProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenTextProperty())
                        {
                            w2.WriteString("string150");
                            assertionsStreamWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual('string150');");
                        }
                        using (var w2 = w.OpenFontProperty())
                        {
                            w2.WriteFont("1px sans-serif");
                            assertionsStreamWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual('1px sans-serif');");
                        }
                        using (var w2 = w.OpenStyleProperty())
                        {
                            w2.WriteLabelStyle(CesiumLabelStyle.FillAndOutline);
                            assertionsStreamWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
                        }
                        using (var w2 = w.OpenScaleProperty())
                        {
                            w2.WriteNumber(152.0);
                            assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(152.0);");
                        }
                        using (var w2 = w.OpenPixelOffsetProperty())
                        {
                            w2.WriteCartesian2(new Rectangular(153, 154));
                            assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(153, 154));");
                        }
                        using (var w2 = w.OpenEyeOffsetProperty())
                        {
                            w2.WriteCartesian(new Cartesian(155, 156, 157));
                            assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(155, 156, 157));");
                        }
                        using (var w2 = w.OpenHorizontalOriginProperty())
                        {
                            w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                            assertionsStreamWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                        }
                        using (var w2 = w.OpenVerticalOriginProperty())
                        {
                            w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                            assertionsStreamWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                        }
                        using (var w2 = w.OpenFillColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(158, 159, 160, 161));
                            assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(162, 163, 164, 165));
                            assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(163, 164, 165, 162));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(166.0);
                            assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(166.0);");
                        }
                        using (var w2 = w.OpenTranslucencyByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(167, 168, 169, 170));
                            assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(167, 168, 169, 170));");
                        }
                        using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(171, 172, 173, 174));
                            assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(171, 172, 173, 174));");
                        }
                    }
                    using (var w = packet.OpenModelProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenGltfProperty())
                        {
                            w2.WriteUri("http://example.com/175", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual('http://example.com/175');");
                        }
                        using (var w2 = w.OpenScaleProperty())
                        {
                            w2.WriteNumber(176.0);
                            assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(176.0);");
                        }
                        using (var w2 = w.OpenMinimumPixelSizeProperty())
                        {
                            w2.WriteNumber(177.0);
                            assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(177.0);");
                        }
                        using (var w2 = w.OpenMaximumScaleProperty())
                        {
                            w2.WriteNumber(178.0);
                            assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(178.0);");
                        }
                        using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenRunAnimationsProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenNodeTransformationsProperty())
                        {
                            using (var a = w2.OpenNodeTransformationProperty("prop179"))
                            {
                                using (var w3 = a.OpenTranslationProperty())
                                {
                                    w3.WriteCartesian(new Cartesian(180, 181, 182));
                                    assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop179.translation.getValue(date)).toEqual(new Cartesian3(180, 181, 182));");
                                }
                                using (var w3 = a.OpenRotationProperty())
                                {
                                    w3.WriteUnitQuaternion(new UnitQuaternion(0.495925853928414, 0.498635831272286, 0.501345808616157, 0.504055785960028));
                                    assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop179.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.498635831272286, 0.501345808616157, 0.504055785960028, 0.495925853928414), 1e-14);");
                                }
                                using (var w3 = a.OpenScaleProperty())
                                {
                                    w3.WriteCartesian(new Cartesian(187, 188, 189));
                                    assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop179.scale.getValue(date)).toEqual(new Cartesian3(187, 188, 189));");
                                }
                            }
                        }
                    }
                    using (var w = packet.OpenPathProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenWidthProperty())
                        {
                            w2.WriteNumber(190.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(190.0);");
                        }
                        using (var w2 = w.OpenResolutionProperty())
                        {
                            w2.WriteNumber(191.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(191.0);");
                        }
                        using (var w2 = w.OpenLeadTimeProperty())
                        {
                            w2.WriteNumber(192.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(192.0);");
                        }
                        using (var w2 = w.OpenTrailTimeProperty())
                        {
                            w2.WriteNumber(193.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(193.0);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(195, 196, 197, 198));
                                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(199.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(199.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(200, 201));
                                    assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(200, 201));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(202, 203));
                                    assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(202, 203));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(204, 205));
                                    assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(204, 205));");
                                }
                            }
                        }
                    }
                    using (var w = packet.OpenPointProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenPixelSizeProperty())
                        {
                            w2.WriteNumber(206.0);
                            assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(206.0);");
                        }
                        using (var w2 = w.OpenColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(207, 208, 209, 210));
                            assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(208, 209, 210, 207));");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(211, 212, 213, 214));
                            assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(215.0);
                            assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(215.0);");
                        }
                        using (var w2 = w.OpenScaleByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(216, 217, 218, 219));
                            assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(216, 217, 218, 219));");
                        }
                        using (var w2 = w.OpenTranslucencyByDistanceProperty())
                        {
                            w2.WriteNearFarScalar(new NearFarScalar(220, 221, 222, 223));
                            assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(220, 221, 222, 223));");
                        }
                    }
                    using (var w = packet.OpenPolygonProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenPositionsProperty())
                        {
                            w2.WriteCartesian(new List<Cartesian> { new Cartesian(224, 225, 226), new Cartesian(227, 228, 229) });
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ new Cartesian3(224, 225, 226), new Cartesian3(227, 228, 229) ]);");
                        }
                        using (var w2 = w.OpenHeightProperty())
                        {
                            w2.WriteNumber(230.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(230.0);");
                        }
                        using (var w2 = w.OpenExtrudedHeightProperty())
                        {
                            w2.WriteNumber(231.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(231.0);");
                        }
                        using (var w2 = w.OpenStRotationProperty())
                        {
                            w2.WriteNumber(232.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(232.0);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(233.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(233.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(235, 236, 237, 238));
                                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(239.0);
                                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(239.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(240, 241));
                                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(240, 241));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(242, 243));
                                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(242, 243));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(244, 245));
                                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(244, 245));");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(250.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(250.0);");
                        }
                        using (var w2 = w.OpenPerPositionHeightProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenCloseTopProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenCloseBottomProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
                        }
                    }
                    using (var w = packet.OpenPolylineProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenPositionsProperty())
                        {
                            w2.WriteCartesian(new List<Cartesian> { new Cartesian(251, 252, 253), new Cartesian(254, 255, 256) });
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(251, 252, 253), new Cartesian3(254, 255, 256) ]);");
                        }
                        using (var w2 = w.OpenWidthProperty())
                        {
                            w2.WriteNumber(257.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(257.0);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(258.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(258.0);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenSolidColorProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(5, 6, 7, 8));
                                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                                }
                            }
                        }
                        using (var w2 = w.OpenFollowSurfaceProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(true);");
                        }
                    }
                    using (var w = packet.OpenRectangleProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenCoordinatesProperty())
                        {
                            w2.WriteWsen(new CartographicExtent(0.106217098457378, 1.10621709845738, 0.535420771662482, 1.53542077166248));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(0.106217098457378, 1.10621709845738, 0.535420771662482, 1.53542077166248));");
                        }
                        using (var w2 = w.OpenHeightProperty())
                        {
                            w2.WriteNumber(268.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(268.0);");
                        }
                        using (var w2 = w.OpenExtrudedHeightProperty())
                        {
                            w2.WriteNumber(269.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(269.0);");
                        }
                        using (var w2 = w.OpenRotationProperty())
                        {
                            w2.WriteNumber(270.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(270.0);");
                        }
                        using (var w2 = w.OpenStRotationProperty())
                        {
                            w2.WriteNumber(271.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(271.0);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(272.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(272.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/274", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/274');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(275, 276));
                                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(275, 276));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(22, 23, 24, 25));
                                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(23, 24, 25, 22));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(26, 27, 28, 29));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(285.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(285.0);");
                        }
                        using (var w2 = w.OpenCloseTopProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenCloseBottomProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(true);");
                        }
                    }
                    using (var w = packet.OpenWallProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenPositionsProperty())
                        {
                            w2.WriteCartesian(new List<Cartesian> { new Cartesian(286, 287, 288), new Cartesian(289, 290, 291) });
                            assertionsStreamWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(286, 287, 288), new Cartesian3(289, 290, 291) ]);");
                        }
                        using (var w2 = w.OpenMinimumHeightsProperty())
                        {
                            w2.WriteArray(new List<double> { 292, 293 });
                            assertionsStreamWriter.WriteLine("    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 292, 293 ]);");
                        }
                        using (var w2 = w.OpenMaximumHeightsProperty())
                        {
                            w2.WriteArray(new List<double> { 294, 295 });
                            assertionsStreamWriter.WriteLine("    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 294, 295 ]);");
                        }
                        using (var w2 = w.OpenGranularityProperty())
                        {
                            w2.WriteNumber(296.0);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(296.0);");
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/298", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/298');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(299, 300));
                                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(299, 300));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(46, 47, 48, 49));
                                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(50, 51, 52, 53));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(309.0);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(309.0);");
                        }
                    }
                    using (var w = packet.OpenConicSensorProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenInnerHalfAngleProperty())
                        {
                            w2.WriteNumber(310.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(310.0);");
                        }
                        using (var w2 = w.OpenOuterHalfAngleProperty())
                        {
                            w2.WriteNumber(311.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(311.0);");
                        }
                        using (var w2 = w.OpenMinimumClockAngleProperty())
                        {
                            w2.WriteNumber(312.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(312.0);");
                        }
                        using (var w2 = w.OpenMaximumClockAngleProperty())
                        {
                            w2.WriteNumber(313.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(313.0);");
                        }
                        using (var w2 = w.OpenRadiusProperty())
                        {
                            w2.WriteNumber(314.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(date)).toEqual(314.0);");
                        }
                        using (var w2 = w.OpenShowIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(60, 61, 62, 63));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                        }
                        using (var w2 = w.OpenIntersectionWidthProperty())
                        {
                            w2.WriteNumber(319.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(319.0);");
                        }
                        using (var w2 = w.OpenShowLateralSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenSolidColorProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(66, 67, 68, 69));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/326", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/326');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(327, 328));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(327, 328));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(74, 75, 76, 77));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/334", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/334');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(335, 336));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(335, 336));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowDomeSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/342", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/342');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(343, 344));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(343, 344));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(90, 91, 92, 93));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenPortionToDisplayProperty())
                        {
                            w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                        }
                        using (var w2 = w.OpenEnvironmentConstraintProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                        {
                            using (var m = w2.OpenImageProperty())
                            {
                                using (var m2 = m.OpenImageProperty())
                                {
                                    m2.WriteUri("http://example.com/350", CesiumResourceBehavior.LinkTo);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/350');");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(351, 352));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(351, 352));");
                                }
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(98, 99, 100, 101));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
                                }
                                using (var m2 = m.OpenTransparentProperty())
                                {
                                    m2.WriteBoolean(true);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(102, 103, 104, 105));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(103, 104, 105, 102));");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                        {
                            w2.WriteNumber(361.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(361.0);");
                        }
                    }
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDirectionsProperty())
                        {
                            w2.WriteSpherical(new List<Spherical> { new Spherical(362, 363, 364), new Spherical(365, 366, 367) });
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(362, 363, 364), new Spherical(365, 366, 367) ]);");
                        }
                        using (var w2 = w.OpenRadiusProperty())
                        {
                            w2.WriteNumber(368.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(date)).toEqual(368.0);");
                        }
                        using (var w2 = w.OpenShowIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(114, 115, 116, 117));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                        }
                        using (var w2 = w.OpenIntersectionWidthProperty())
                        {
                            w2.WriteNumber(373.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(373.0);");
                        }
                        using (var w2 = w.OpenShowLateralSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(120, 121, 122, 123));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(379.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(379.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(380, 381));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(380, 381));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(382, 383));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(382, 383));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(384, 385));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(384, 385));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(132, 133, 134, 135));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(391.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(391.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(392, 393));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(392, 393));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(394, 395));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(394, 395));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(396, 397));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(396, 397));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(144, 145, 146, 147));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(403.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(403.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(404, 405));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(404, 405));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(406, 407));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(406, 407));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(408, 409));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(408, 409));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowDomeSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(156, 157, 158, 159));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(157, 158, 159, 156));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(415.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(415.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(416, 417));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(416, 417));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(418, 419));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(418, 419));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(420, 421));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(420, 421));");
                                }
                            }
                        }
                        using (var w2 = w.OpenPortionToDisplayProperty())
                        {
                            w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                        }
                        using (var w2 = w.OpenEnvironmentConstraintProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(168, 169, 170, 171));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(427.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(427.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(428, 429));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(428, 429));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(430, 431));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(430, 431));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(432, 433));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(432, 433));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(179, 180, 181, 182));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                        {
                            w2.WriteNumber(438.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(438.0);");
                        }
                    }
                    using (var w = packet.OpenRectangularSensorProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenXHalfAngleProperty())
                        {
                            w2.WriteNumber(439.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(439.0);");
                        }
                        using (var w2 = w.OpenYHalfAngleProperty())
                        {
                            w2.WriteNumber(440.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(440.0);");
                        }
                        using (var w2 = w.OpenRadiusProperty())
                        {
                            w2.WriteNumber(441.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(date)).toEqual(441.0);");
                        }
                        using (var w2 = w.OpenShowIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(187, 188, 189, 190));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        }
                        using (var w2 = w.OpenIntersectionWidthProperty())
                        {
                            w2.WriteNumber(446.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(446.0);");
                        }
                        using (var w2 = w.OpenShowLateralSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenStripeProperty())
                            {
                                using (var m2 = m.OpenOrientationProperty())
                                {
                                    m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                                }
                                using (var m2 = m.OpenEvenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(193, 194, 195, 196));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(194, 195, 196, 193));");
                                }
                                using (var m2 = m.OpenOddColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(197, 198, 199, 200));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(198, 199, 200, 197));");
                                }
                                using (var m2 = m.OpenOffsetProperty())
                                {
                                    m2.WriteNumber(456.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(456.0);");
                                }
                                using (var m2 = m.OpenRepeatProperty())
                                {
                                    m2.WriteNumber(457.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(457.0);");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(204, 205, 206, 207));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(463.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(463.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(464, 465));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(464, 465));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(466, 467));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(466, 467));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(468, 469));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(468, 469));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(216, 217, 218, 219));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(475.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(475.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(476, 477));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(476, 477));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(478, 479));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(478, 479));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(480, 481));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(480, 481));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowDomeSurfacesProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(228, 229, 230, 231));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(487.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(487.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(488, 489));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(488, 489));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(490, 491));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(490, 491));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(492, 493));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(492, 493));");
                                }
                            }
                        }
                        using (var w2 = w.OpenPortionToDisplayProperty())
                        {
                            w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                        }
                        using (var w2 = w.OpenEnvironmentConstraintProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(240, 241, 242, 243));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(241, 242, 243, 240));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(499.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(499.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(500, 501));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(500, 501));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(502, 503));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(502, 503));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(504, 505));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(504, 505));");
                                }
                            }
                        }
                        using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(251, 252, 253, 254));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                        }
                        using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                        {
                            w2.WriteNumber(510.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(510.0);");
                        }
                    }
                    using (var w = packet.OpenFanProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenDirectionsProperty())
                        {
                            w2.WriteSpherical(new List<Spherical> { new Spherical(511, 512, 513), new Spherical(514, 515, 516) });
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(511, 512, 513), new Spherical(514, 515, 516) ]);");
                        }
                        using (var w2 = w.OpenRadiusProperty())
                        {
                            w2.WriteNumber(517.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(date)).toEqual(517.0);");
                        }
                        using (var w2 = w.OpenPerDirectionRadiusProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenMaterialProperty())
                        {
                            using (var m = w2.OpenGridProperty())
                            {
                                using (var m2 = m.OpenColorProperty())
                                {
                                    m2.WriteRgba(Color.FromArgb(9, 10, 11, 12));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(10, 11, 12, 9));");
                                }
                                using (var m2 = m.OpenCellAlphaProperty())
                                {
                                    m2.WriteNumber(523.0);
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(date)).toEqual(523.0);");
                                }
                                using (var m2 = m.OpenLineCountProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(524, 525));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(524, 525));");
                                }
                                using (var m2 = m.OpenLineThicknessProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(526, 527));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(526, 527));");
                                }
                                using (var m2 = m.OpenLineOffsetProperty())
                                {
                                    m2.WriteCartesian2(new Rectangular(528, 529));
                                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(528, 529));");
                                }
                            }
                        }
                        using (var w2 = w.OpenFillProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.fill.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outline.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenOutlineColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(20, 21, 22, 23));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                        }
                        using (var w2 = w.OpenOutlineWidthProperty())
                        {
                            w2.WriteNumber(534.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(date)).toEqual(534.0);");
                        }
                        using (var w2 = w.OpenNumberOfRingsProperty())
                        {
                            w2.WriteNumber(535.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(date)).toEqual(535.0);");
                        }
                    }
                    using (var w = packet.OpenVectorProperty())
                    {
                        using (var w2 = w.OpenShowProperty())
                        {
                            w2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.show.getValue(date)).toEqual(true);");
                        }
                        using (var w2 = w.OpenColorProperty())
                        {
                            w2.WriteRgba(Color.FromArgb(26, 27, 28, 29));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                        }
                        using (var w2 = w.OpenDirectionProperty())
                        {
                            w2.WriteSpherical(new Spherical(540, 541, 542));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(new Spherical(540, 541, 542));");
                        }
                        using (var w2 = w.OpenLengthProperty())
                        {
                            w2.WriteNumber(543.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(date)).toEqual(543.0);");
                        }
                        using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                        {
                            w2.WriteNumber(544.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(544.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference545");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference545');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenDescriptionProperty())
                    {
                        w.WriteReference(new Reference("Constant", "description"));
                        assertionsStreamWriter.WriteLine("    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference546");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference546');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteReference(new Reference("Constant", "position"));
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference547");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference547');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenOrientationProperty())
                    {
                        w.WriteReference(new Reference("Constant", "orientation"));
                        assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference548");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference548');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenViewFromProperty())
                    {
                        w.WriteReference(new Reference("Constant", "viewFrom"));
                        assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference549");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference549');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference550");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference550');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenImageProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference551");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference551');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference552");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference552');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "pixelOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference553");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference553');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "eyeOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference554");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference554');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "horizontalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference555");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference555');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "verticalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference556");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference556');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference557");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference557');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference558");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference558');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "alignedAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference559");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference559');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenSizeInMetersProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "sizeInMeters" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference560");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference560');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference561");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference561');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference562");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference562');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "scaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference563");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference563');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference564");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference564');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "pixelOffsetScaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference565");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference565');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "imageSubRegion" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference566");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference566');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference567");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference567');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "dimensions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference568");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference568');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material569");
                    assertionsStreamWriter.WriteLine("    var material569 = e = dataSource.entities.getById('material569');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(60, 61, 62, 63));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference574");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference574');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material569", new List<string> { "box", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(material569.box.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material575");
                    assertionsStreamWriter.WriteLine("    var material575 = e = dataSource.entities.getById('material575');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/576", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual('http://example.com/576');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(577, 578));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(577, 578));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(69, 70, 71, 72));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference583");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference583');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material575", new List<string> { "box", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual(material575.box.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material575", new List<string> { "box", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(material575.box.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material575", new List<string> { "box", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(material575.box.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material575", new List<string> { "box", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(material575.box.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material584");
                    assertionsStreamWriter.WriteLine("    var material584 = e = dataSource.entities.getById('material584');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(75, 76, 77, 78));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(589.0);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(589.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(590, 591));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(590, 591));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(592, 593));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(592, 593));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(594, 595));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(594, 595));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference596");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference596');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material584", new List<string> { "box", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(material584.box.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material584", new List<string> { "box", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(material584.box.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material584", new List<string> { "box", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(material584.box.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material584", new List<string> { "box", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(material584.box.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material584", new List<string> { "box", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(material584.box.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material597");
                    assertionsStreamWriter.WriteLine("    var material597 = e = dataSource.entities.getById('material597');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(88, 89, 90, 91));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(92, 93, 94, 95));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(606.0);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(606.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(607.0);
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(607.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference608");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference608');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material597", new List<string> { "box", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(material597.box.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material597", new List<string> { "box", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(material597.box.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material597", new List<string> { "box", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(material597.box.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material597", new List<string> { "box", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(material597.box.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material597", new List<string> { "box", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(material597.box.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference609");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference609');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference610");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference610');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference611");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference611');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference612");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference612');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference613");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference613');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference614");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference614');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference615");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference615');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference616");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference616');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenCornerTypeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "cornerType" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference617");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference617');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference618");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference618');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material619");
                    assertionsStreamWriter.WriteLine("    var material619 = e = dataSource.entities.getById('material619');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(110, 111, 112, 113));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference624");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference624');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material619", new List<string> { "corridor", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(material619.corridor.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material625");
                    assertionsStreamWriter.WriteLine("    var material625 = e = dataSource.entities.getById('material625');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/626", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/626');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(627, 628));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(627, 628));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(119, 120, 121, 122));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(120, 121, 122, 119));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference633");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference633');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material625", new List<string> { "corridor", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual(material625.corridor.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material625", new List<string> { "corridor", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(material625.corridor.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material625", new List<string> { "corridor", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(material625.corridor.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material625", new List<string> { "corridor", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(material625.corridor.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material634");
                    assertionsStreamWriter.WriteLine("    var material634 = e = dataSource.entities.getById('material634');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(125, 126, 127, 128));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(126, 127, 128, 125));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(639.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(639.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(640, 641));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(640, 641));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(642, 643));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(642, 643));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(644, 645));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(644, 645));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference646");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference646');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material634", new List<string> { "corridor", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(material634.corridor.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material634", new List<string> { "corridor", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(material634.corridor.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material634", new List<string> { "corridor", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(material634.corridor.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material634", new List<string> { "corridor", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(material634.corridor.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material634", new List<string> { "corridor", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(material634.corridor.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material647");
                    assertionsStreamWriter.WriteLine("    var material647 = e = dataSource.entities.getById('material647');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(138, 139, 140, 141));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(139, 140, 141, 138));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(142, 143, 144, 145));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(656.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(656.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(657.0);
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(657.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference658");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference658');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material647", new List<string> { "corridor", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(material647.corridor.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material647", new List<string> { "corridor", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(material647.corridor.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material647", new List<string> { "corridor", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(material647.corridor.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material647", new List<string> { "corridor", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(material647.corridor.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material647", new List<string> { "corridor", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(material647.corridor.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference659");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference659');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference660");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference660');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference661");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference661');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference662");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference662');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference663");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference663');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "length" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference664");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference664');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "topRadius" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference665");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference665');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "bottomRadius" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference666");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference666');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material667");
                    assertionsStreamWriter.WriteLine("    var material667 = e = dataSource.entities.getById('material667');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(158, 159, 160, 161));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference672");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference672');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material667", new List<string> { "cylinder", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(material667.cylinder.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material673");
                    assertionsStreamWriter.WriteLine("    var material673 = e = dataSource.entities.getById('material673');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/674", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/674');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(675, 676));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(675, 676));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(167, 168, 169, 170));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference681");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference681');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material673", new List<string> { "cylinder", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual(material673.cylinder.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material673", new List<string> { "cylinder", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(material673.cylinder.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material673", new List<string> { "cylinder", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(material673.cylinder.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material673", new List<string> { "cylinder", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(material673.cylinder.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material682");
                    assertionsStreamWriter.WriteLine("    var material682 = e = dataSource.entities.getById('material682');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(173, 174, 175, 176));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(687.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(687.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(688, 689));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(688, 689));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(690, 691));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(690, 691));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(692, 693));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(692, 693));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference694");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference694');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material682", new List<string> { "cylinder", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(material682.cylinder.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material682", new List<string> { "cylinder", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(material682.cylinder.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material682", new List<string> { "cylinder", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(material682.cylinder.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material682", new List<string> { "cylinder", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(material682.cylinder.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material682", new List<string> { "cylinder", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(material682.cylinder.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material695");
                    assertionsStreamWriter.WriteLine("    var material695 = e = dataSource.entities.getById('material695');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(186, 187, 188, 189));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(190, 191, 192, 193));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(191, 192, 193, 190));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(704.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(704.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(705.0);
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(705.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference706");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference706');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material695", new List<string> { "cylinder", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(material695.cylinder.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material695", new List<string> { "cylinder", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(material695.cylinder.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material695", new List<string> { "cylinder", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(material695.cylinder.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material695", new List<string> { "cylinder", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(material695.cylinder.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material695", new List<string> { "cylinder", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(material695.cylinder.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference707");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference707');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference708");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference708');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference709");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference709');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference710");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference710');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "numberOfVerticalLines" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference711");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference711');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "slices" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference712");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference712');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference713");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference713');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "semiMajorAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference714");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference714');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "semiMinorAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference715");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference715');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference716");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference716');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference717");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference717');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference718");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference718');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference719");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference719');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference720");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference720');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material721");
                    assertionsStreamWriter.WriteLine("    var material721 = e = dataSource.entities.getById('material721');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(212, 213, 214, 215));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference726");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference726');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material721", new List<string> { "ellipse", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(material721.ellipse.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material727");
                    assertionsStreamWriter.WriteLine("    var material727 = e = dataSource.entities.getById('material727');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/728", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual('http://example.com/728');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(729, 730));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(729, 730));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(221, 222, 223, 224));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(222, 223, 224, 221));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference735");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference735');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material727", new List<string> { "ellipse", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual(material727.ellipse.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material727", new List<string> { "ellipse", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(material727.ellipse.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material727", new List<string> { "ellipse", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(material727.ellipse.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material727", new List<string> { "ellipse", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(material727.ellipse.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material736");
                    assertionsStreamWriter.WriteLine("    var material736 = e = dataSource.entities.getById('material736');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(227, 228, 229, 230));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(741.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(741.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(742, 743));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(742, 743));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(744, 745));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(744, 745));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(746, 747));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(746, 747));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference748");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference748');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material736", new List<string> { "ellipse", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(material736.ellipse.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material736", new List<string> { "ellipse", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(material736.ellipse.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material736", new List<string> { "ellipse", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(material736.ellipse.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material736", new List<string> { "ellipse", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(material736.ellipse.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material736", new List<string> { "ellipse", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(material736.ellipse.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material749");
                    assertionsStreamWriter.WriteLine("    var material749 = e = dataSource.entities.getById('material749');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(240, 241, 242, 243));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(241, 242, 243, 240));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(244, 245, 246, 247));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(245, 246, 247, 244));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(758.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(758.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(759.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(759.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference760");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference760');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material749", new List<string> { "ellipse", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(material749.ellipse.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material749", new List<string> { "ellipse", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(material749.ellipse.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material749", new List<string> { "ellipse", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(material749.ellipse.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material749", new List<string> { "ellipse", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(material749.ellipse.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material749", new List<string> { "ellipse", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(material749.ellipse.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference761");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference761');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference762");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference762');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference763");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference763');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference764");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference764');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "numberOfVerticalLines" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference765");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference765');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference766");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference766');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "radii" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference767");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference767');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material768");
                    assertionsStreamWriter.WriteLine("    var material768 = e = dataSource.entities.getById('material768');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(4, 5, 6, 7));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(5, 6, 7, 4));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference773");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference773');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material768", new List<string> { "ellipsoid", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(material768.ellipsoid.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material774");
                    assertionsStreamWriter.WriteLine("    var material774 = e = dataSource.entities.getById('material774');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/775", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual('http://example.com/775');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(776, 777));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(776, 777));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(13, 14, 15, 16));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference782");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference782');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material774", new List<string> { "ellipsoid", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual(material774.ellipsoid.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material774", new List<string> { "ellipsoid", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(material774.ellipsoid.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material774", new List<string> { "ellipsoid", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(material774.ellipsoid.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material774", new List<string> { "ellipsoid", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(material774.ellipsoid.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material783");
                    assertionsStreamWriter.WriteLine("    var material783 = e = dataSource.entities.getById('material783');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(19, 20, 21, 22));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(20, 21, 22, 19));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(788.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(788.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(789, 790));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(789, 790));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(791, 792));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(791, 792));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(793, 794));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(793, 794));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference795");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference795');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material783", new List<string> { "ellipsoid", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(material783.ellipsoid.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material783", new List<string> { "ellipsoid", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(material783.ellipsoid.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material783", new List<string> { "ellipsoid", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(material783.ellipsoid.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material783", new List<string> { "ellipsoid", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(material783.ellipsoid.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material783", new List<string> { "ellipsoid", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(material783.ellipsoid.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material796");
                    assertionsStreamWriter.WriteLine("    var material796 = e = dataSource.entities.getById('material796');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(32, 33, 34, 35));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(36, 37, 38, 39));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(37, 38, 39, 36));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(805.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(805.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(806.0);
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(806.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference807");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference807');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material796", new List<string> { "ellipsoid", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(material796.ellipsoid.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material796", new List<string> { "ellipsoid", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(material796.ellipsoid.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material796", new List<string> { "ellipsoid", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(material796.ellipsoid.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material796", new List<string> { "ellipsoid", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(material796.ellipsoid.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material796", new List<string> { "ellipsoid", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(material796.ellipsoid.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference808");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference808');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference809");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference809');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference810");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference810');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference811");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference811');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "stackPartitions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference812");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference812');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "slicePartitions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference813");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference813');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "subdivisions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference814");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference814');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference815");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference815');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenTextProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "text" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference816");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference816');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenFontProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "font" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference817");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference817');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenStyleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "style" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference818");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference818');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference819");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference819');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "pixelOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference820");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference820');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "eyeOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference821");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference821');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "horizontalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference822");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference822');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "verticalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference823");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference823');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "fillColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference824");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference824');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference825");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference825');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference826");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference826');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference827");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference827');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "pixelOffsetScaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference828");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference828');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference829");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference829');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenGltfProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "uri" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference830");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference830');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference831");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference831');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "minimumPixelSize" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference832");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference832');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "maximumScale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference833");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference833');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "incrementallyLoadTextures" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference834");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference834');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenRunAnimationsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "runAnimations" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("obj835");
                    assertionsStreamWriter.WriteLine("    var obj835 = e = dataSource.entities.getById('obj835');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    using (var a = w2.OpenNodeTransformationProperty("prop836"))
                    {
                        using (var w3 = a.OpenTranslationProperty())
                        {
                            w3.WriteCartesian(new Cartesian(837, 838, 839));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop836.translation.getValue(date)).toEqual(new Cartesian3(837, 838, 839));");
                        }
                        using (var w3 = a.OpenRotationProperty())
                        {
                            w3.WriteUnitQuaternion(new UnitQuaternion(0.4991082938821, 0.499702470422436, 0.500296646962772, 0.500890823503108));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop836.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.499702470422436, 0.500296646962772, 0.500890823503108, 0.4991082938821), 1e-14);");
                        }
                        using (var w3 = a.OpenScaleProperty())
                        {
                            w3.WriteCartesian(new Cartesian(844, 845, 846));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop836.scale.getValue(date)).toEqual(new Cartesian3(844, 845, 846));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference847");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference847');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    using (var a = w2.OpenNodeTransformationProperty("prop848"))
                    {
                        using (var w3 = a.OpenTranslationProperty())
                        {
                            w3.WriteReference(new Reference("obj835", new List<string> { "model", "nodeTransformations", "prop836", "translation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop848.translation.getValue(date)).toEqual(obj835.model.nodeTransformations.prop836.translation.getValue(date));");
                        }
                        using (var w3 = a.OpenRotationProperty())
                        {
                            w3.WriteReference(new Reference("obj835", new List<string> { "model", "nodeTransformations", "prop836", "rotation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop848.rotation.getValue(date)).toEqual(obj835.model.nodeTransformations.prop836.rotation.getValue(date));");
                        }
                        using (var w3 = a.OpenScaleProperty())
                        {
                            w3.WriteReference(new Reference("obj835", new List<string> { "model", "nodeTransformations", "prop836", "scale" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop848.scale.getValue(date)).toEqual(obj835.model.nodeTransformations.prop836.scale.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference849");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference849');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference850");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference850');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference851");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference851');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "resolution" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference852");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference852');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "leadTime" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference853");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference853');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "trailTime" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material854");
                    assertionsStreamWriter.WriteLine("    var material854 = e = dataSource.entities.getById('material854');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(90, 91, 92, 93));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference859");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference859');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material854", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material854.path.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material860");
                    assertionsStreamWriter.WriteLine("    var material860 = e = dataSource.entities.getById('material860');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(96, 97, 98, 99));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                        }
                        using (var m2 = m.OpenOutlineColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(100, 101, 102, 103));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                        }
                        using (var m2 = m.OpenOutlineWidthProperty())
                        {
                            m2.WriteNumber(869.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(869.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference870");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference870');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material860", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material860.path.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenOutlineColorProperty())
                        {
                            m2.WriteReference(new Reference("material860", new List<string> { "path", "material", "outlineColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(material860.path.material.outlineColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOutlineWidthProperty())
                        {
                            m2.WriteReference(new Reference("material860", new List<string> { "path", "material", "outlineWidth" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(material860.path.material.outlineWidth.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material871");
                    assertionsStreamWriter.WriteLine("    var material871 = e = dataSource.entities.getById('material871');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(107, 108, 109, 110));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference876");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference876');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material871", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material871.path.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material877");
                    assertionsStreamWriter.WriteLine("    var material877 = e = dataSource.entities.getById('material877');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(113, 114, 115, 116));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                        }
                        using (var m2 = m.OpenGlowPowerProperty())
                        {
                            m2.WriteNumber(882.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(882.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference883");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference883');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material877", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material877.path.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenGlowPowerProperty())
                        {
                            m2.WriteReference(new Reference("material877", new List<string> { "path", "material", "glowPower" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(material877.path.material.glowPower.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material884");
                    assertionsStreamWriter.WriteLine("    var material884 = e = dataSource.entities.getById('material884');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/885", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual('http://example.com/885');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(886, 887));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(886, 887));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(123, 124, 125, 126));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(124, 125, 126, 123));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference892");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference892');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material884", new List<string> { "path", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual(material884.path.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material884", new List<string> { "path", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(material884.path.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material884", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material884.path.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material884", new List<string> { "path", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(material884.path.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material893");
                    assertionsStreamWriter.WriteLine("    var material893 = e = dataSource.entities.getById('material893');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(129, 130, 131, 132));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(130, 131, 132, 129));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(898.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(898.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(899, 900));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(899, 900));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(901, 902));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(901, 902));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(903, 904));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(903, 904));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference905");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference905');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material893", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material893.path.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material893", new List<string> { "path", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(material893.path.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material893", new List<string> { "path", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(material893.path.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material893", new List<string> { "path", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(material893.path.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material893", new List<string> { "path", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(material893.path.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material906");
                    assertionsStreamWriter.WriteLine("    var material906 = e = dataSource.entities.getById('material906');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(142, 143, 144, 145));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(146, 147, 148, 149));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(915.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(915.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(916.0);
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(916.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference917");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference917');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material906", new List<string> { "path", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(material906.path.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material906", new List<string> { "path", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(material906.path.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material906", new List<string> { "path", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(material906.path.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material906", new List<string> { "path", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(material906.path.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material906", new List<string> { "path", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(material906.path.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference918");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference918');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference919");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference919');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "pixelSize" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference920");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference920');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference921");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference921');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference922");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference922');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference923");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference923');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "scaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference924");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference924');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference925");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference925');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference926");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference926');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference927");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference927');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference928");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference928');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference929");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference929');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference930");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference930');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material931");
                    assertionsStreamWriter.WriteLine("    var material931 = e = dataSource.entities.getById('material931');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(167, 168, 169, 170));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference936");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference936');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material931", new List<string> { "polygon", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(material931.polygon.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material937");
                    assertionsStreamWriter.WriteLine("    var material937 = e = dataSource.entities.getById('material937');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/938", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual('http://example.com/938');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(939, 940));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(939, 940));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(176, 177, 178, 179));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(177, 178, 179, 176));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference945");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference945');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material937", new List<string> { "polygon", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual(material937.polygon.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material937", new List<string> { "polygon", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(material937.polygon.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material937", new List<string> { "polygon", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(material937.polygon.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material937", new List<string> { "polygon", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(material937.polygon.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material946");
                    assertionsStreamWriter.WriteLine("    var material946 = e = dataSource.entities.getById('material946');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(182, 183, 184, 185));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(183, 184, 185, 182));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(951.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(951.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(952, 953));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(952, 953));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(954, 955));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(954, 955));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(956, 957));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(956, 957));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference958");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference958');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material946", new List<string> { "polygon", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(material946.polygon.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material946", new List<string> { "polygon", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(material946.polygon.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material946", new List<string> { "polygon", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(material946.polygon.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material946", new List<string> { "polygon", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(material946.polygon.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material946", new List<string> { "polygon", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(material946.polygon.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material959");
                    assertionsStreamWriter.WriteLine("    var material959 = e = dataSource.entities.getById('material959');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(195, 196, 197, 198));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(199, 200, 201, 202));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(200, 201, 202, 199));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(968.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(968.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(969.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(969.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference970");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference970');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material959", new List<string> { "polygon", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(material959.polygon.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material959", new List<string> { "polygon", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(material959.polygon.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material959", new List<string> { "polygon", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(material959.polygon.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material959", new List<string> { "polygon", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(material959.polygon.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material959", new List<string> { "polygon", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(material959.polygon.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference971");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference971');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference972");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference972');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference973");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference973');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference974");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference974');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenPerPositionHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "perPositionHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference975");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference975');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "closeTop" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference976");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference976');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "closeBottom" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference977");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference977');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference978");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference978');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference979");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference979');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material980");
                    assertionsStreamWriter.WriteLine("    var material980 = e = dataSource.entities.getById('material980');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(216, 217, 218, 219));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference985");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference985');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material980", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material980.polyline.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material986");
                    assertionsStreamWriter.WriteLine("    var material986 = e = dataSource.entities.getById('material986');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(222, 223, 224, 225));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        }
                        using (var m2 = m.OpenOutlineColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(226, 227, 228, 229));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                        }
                        using (var m2 = m.OpenOutlineWidthProperty())
                        {
                            m2.WriteNumber(995.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(995.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference996");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference996');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material986", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material986.polyline.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenOutlineColorProperty())
                        {
                            m2.WriteReference(new Reference("material986", new List<string> { "polyline", "material", "outlineColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(material986.polyline.material.outlineColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOutlineWidthProperty())
                        {
                            m2.WriteReference(new Reference("material986", new List<string> { "polyline", "material", "outlineWidth" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(material986.polyline.material.outlineWidth.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material997");
                    assertionsStreamWriter.WriteLine("    var material997 = e = dataSource.entities.getById('material997');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(233, 234, 235, 236));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1002");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1002');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material997", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material997.polyline.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1003");
                    assertionsStreamWriter.WriteLine("    var material1003 = e = dataSource.entities.getById('material1003');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(239, 240, 241, 242));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                        }
                        using (var m2 = m.OpenGlowPowerProperty())
                        {
                            m2.WriteNumber(1008.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(1008.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1009");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1009');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1003", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material1003.polyline.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenGlowPowerProperty())
                        {
                            m2.WriteReference(new Reference("material1003", new List<string> { "polyline", "material", "glowPower" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(material1003.polyline.material.glowPower.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1010");
                    assertionsStreamWriter.WriteLine("    var material1010 = e = dataSource.entities.getById('material1010');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1011", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual('http://example.com/1011');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1012, 1013));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(1012, 1013));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(249, 250, 251, 252));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1018");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1018');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1010", new List<string> { "polyline", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual(material1010.polyline.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1010", new List<string> { "polyline", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(material1010.polyline.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1010", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material1010.polyline.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1010", new List<string> { "polyline", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(material1010.polyline.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1019");
                    assertionsStreamWriter.WriteLine("    var material1019 = e = dataSource.entities.getById('material1019');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(0, 1, 2, 3));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1024.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(1024.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1025, 1026));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(1025, 1026));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1027, 1028));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1027, 1028));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1029, 1030));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1029, 1030));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1031");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1031');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1019", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material1019.polyline.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1019", new List<string> { "polyline", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(material1019.polyline.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1019", new List<string> { "polyline", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(material1019.polyline.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1019", new List<string> { "polyline", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(material1019.polyline.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1019", new List<string> { "polyline", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(material1019.polyline.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1032");
                    assertionsStreamWriter.WriteLine("    var material1032 = e = dataSource.entities.getById('material1032');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(13, 14, 15, 16));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(17, 18, 19, 20));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(18, 19, 20, 17));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1041.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(1041.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1042.0);
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(1042.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1043");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1043');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1032", new List<string> { "polyline", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(material1032.polyline.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1032", new List<string> { "polyline", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(material1032.polyline.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1032", new List<string> { "polyline", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(material1032.polyline.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1032", new List<string> { "polyline", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(material1032.polyline.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1032", new List<string> { "polyline", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(material1032.polyline.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1044");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1044');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenFollowSurfaceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "followSurface" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(constant.polyline.followSurface.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1045");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1045');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1046");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1046');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "coordinates" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1047");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1047');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1048");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1048');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1049");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1049');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1050");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1050');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1051");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1051');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1052");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1052');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1053");
                    assertionsStreamWriter.WriteLine("    var material1053 = e = dataSource.entities.getById('material1053');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(34, 35, 36, 37));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1058");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1058');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1053", new List<string> { "rectangle", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(material1053.rectangle.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1059");
                    assertionsStreamWriter.WriteLine("    var material1059 = e = dataSource.entities.getById('material1059');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1060", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/1060');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1061, 1062));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(1061, 1062));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(43, 44, 45, 46));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1067");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1067');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1059", new List<string> { "rectangle", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual(material1059.rectangle.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1059", new List<string> { "rectangle", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(material1059.rectangle.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1059", new List<string> { "rectangle", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(material1059.rectangle.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1059", new List<string> { "rectangle", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(material1059.rectangle.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1068");
                    assertionsStreamWriter.WriteLine("    var material1068 = e = dataSource.entities.getById('material1068');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(49, 50, 51, 52));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1073.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(1073.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1074, 1075));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(1074, 1075));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1076, 1077));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1076, 1077));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1078, 1079));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1078, 1079));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1080");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1080');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1068", new List<string> { "rectangle", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(material1068.rectangle.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1068", new List<string> { "rectangle", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(material1068.rectangle.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1068", new List<string> { "rectangle", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(material1068.rectangle.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1068", new List<string> { "rectangle", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(material1068.rectangle.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1068", new List<string> { "rectangle", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(material1068.rectangle.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1081");
                    assertionsStreamWriter.WriteLine("    var material1081 = e = dataSource.entities.getById('material1081');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(62, 63, 64, 65));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(63, 64, 65, 62));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(66, 67, 68, 69));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1090.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(1090.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1091.0);
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(1091.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1092");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1092');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1081", new List<string> { "rectangle", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(material1081.rectangle.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1081", new List<string> { "rectangle", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(material1081.rectangle.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1081", new List<string> { "rectangle", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(material1081.rectangle.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1081", new List<string> { "rectangle", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(material1081.rectangle.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1081", new List<string> { "rectangle", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(material1081.rectangle.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1093");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1093');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1094");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1094');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1095");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1095');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1096");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1096');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "closeTop" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(constant.rectangle.closeTop.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1097");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1097');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "closeBottom" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(constant.rectangle.closeBottom.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1098");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1098');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1099");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1099');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1100");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1100');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1101");
                    assertionsStreamWriter.WriteLine("    var material1101 = e = dataSource.entities.getById('material1101');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1106");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1106');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1101", new List<string> { "wall", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(material1101.wall.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1107");
                    assertionsStreamWriter.WriteLine("    var material1107 = e = dataSource.entities.getById('material1107');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1108", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/1108');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1109, 1110));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(1109, 1110));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(91, 92, 93, 94));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(92, 93, 94, 91));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1115");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1115');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1107", new List<string> { "wall", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual(material1107.wall.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1107", new List<string> { "wall", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(material1107.wall.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1107", new List<string> { "wall", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(material1107.wall.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1107", new List<string> { "wall", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(material1107.wall.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1116");
                    assertionsStreamWriter.WriteLine("    var material1116 = e = dataSource.entities.getById('material1116');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(97, 98, 99, 100));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1121.0);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(1121.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1122, 1123));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(1122, 1123));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1124, 1125));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1124, 1125));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1126, 1127));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1126, 1127));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1128");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1128');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1116", new List<string> { "wall", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(material1116.wall.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1116", new List<string> { "wall", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(material1116.wall.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1116", new List<string> { "wall", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(material1116.wall.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1116", new List<string> { "wall", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(material1116.wall.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1116", new List<string> { "wall", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(material1116.wall.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1129");
                    assertionsStreamWriter.WriteLine("    var material1129 = e = dataSource.entities.getById('material1129');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(110, 111, 112, 113));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(114, 115, 116, 117));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1138.0);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(1138.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1139.0);
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(1139.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1140");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1140');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1129", new List<string> { "wall", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(material1129.wall.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1129", new List<string> { "wall", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(material1129.wall.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1129", new List<string> { "wall", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(material1129.wall.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1129", new List<string> { "wall", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(material1129.wall.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1129", new List<string> { "wall", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(material1129.wall.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1141");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1141');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1142");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1142');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1143");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1143');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1144");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1144');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1145");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1145');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "innerHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1146");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1146');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "outerHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1147");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1147');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "minimumClockAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1148");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1148');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "maximumClockAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1149");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1149');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1150");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1150');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1151");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1151');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1152");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1152');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1153");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1153');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1154");
                    assertionsStreamWriter.WriteLine("    var material1154 = e = dataSource.entities.getById('material1154');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(135, 136, 137, 138));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(136, 137, 138, 135));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1159");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1159');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1154", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1154.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1160");
                    assertionsStreamWriter.WriteLine("    var material1160 = e = dataSource.entities.getById('material1160');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1161", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1161');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1162, 1163));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1162, 1163));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(144, 145, 146, 147));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1168");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1168');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1160", new List<string> { "conicSensor", "lateralSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material1160.conicSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1160", new List<string> { "conicSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1160.conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1160", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1160.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1160", new List<string> { "conicSensor", "lateralSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material1160.conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1169");
                    assertionsStreamWriter.WriteLine("    var material1169 = e = dataSource.entities.getById('material1169');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(150, 151, 152, 153));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1174.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1174.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1175, 1176));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1175, 1176));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1177, 1178));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1177, 1178));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1179, 1180));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1179, 1180));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1181");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1181');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1169", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1169.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1169", new List<string> { "conicSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1169.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1169", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material1169.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1169", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1169.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1169", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1169.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1182");
                    assertionsStreamWriter.WriteLine("    var material1182 = e = dataSource.entities.getById('material1182');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(163, 164, 165, 166));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(167, 168, 169, 170));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1191.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1191.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1192.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1192.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1193");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1193');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1182", new List<string> { "conicSensor", "lateralSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material1182.conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1182", new List<string> { "conicSensor", "lateralSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material1182.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1182", new List<string> { "conicSensor", "lateralSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material1182.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1182", new List<string> { "conicSensor", "lateralSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material1182.conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1182", new List<string> { "conicSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1182.conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1194");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1194');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1195");
                    assertionsStreamWriter.WriteLine("    var material1195 = e = dataSource.entities.getById('material1195');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(176, 177, 178, 179));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(177, 178, 179, 176));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1200");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1200');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1195", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1195.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1201");
                    assertionsStreamWriter.WriteLine("    var material1201 = e = dataSource.entities.getById('material1201');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1202", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1202');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1203, 1204));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1203, 1204));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(185, 186, 187, 188));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1209");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1209');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1201", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material1201.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1201", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1201.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1201", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1201.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1201", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material1201.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1210");
                    assertionsStreamWriter.WriteLine("    var material1210 = e = dataSource.entities.getById('material1210');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(191, 192, 193, 194));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1215.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1215.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1216, 1217));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1216, 1217));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1218, 1219));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1218, 1219));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1220, 1221));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1220, 1221));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1222");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1222');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1210", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1210.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1210", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1210.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1210", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material1210.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1210", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1210.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1210", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1210.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1223");
                    assertionsStreamWriter.WriteLine("    var material1223 = e = dataSource.entities.getById('material1223');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(204, 205, 206, 207));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(208, 209, 210, 211));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1232.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1232.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1233.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1233.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1234");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1234');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1223", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material1223.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1223", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material1223.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1223", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material1223.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1223", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material1223.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1223", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1223.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1235");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1235');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1236");
                    assertionsStreamWriter.WriteLine("    var material1236 = e = dataSource.entities.getById('material1236');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(217, 218, 219, 220));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(218, 219, 220, 217));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1241");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1241');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1236", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1236.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1242");
                    assertionsStreamWriter.WriteLine("    var material1242 = e = dataSource.entities.getById('material1242');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1243", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1243');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1244, 1245));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1244, 1245));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(226, 227, 228, 229));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1250");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1250');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1242", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material1242.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1242", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1242.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1242", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1242.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1242", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material1242.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1251");
                    assertionsStreamWriter.WriteLine("    var material1251 = e = dataSource.entities.getById('material1251');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(232, 233, 234, 235));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1256.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1256.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1257, 1258));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1257, 1258));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1259, 1260));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1259, 1260));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1261, 1262));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1261, 1262));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1263");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1263');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1251", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1251.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1251", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1251.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1251", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material1251.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1251", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1251.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1251", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1251.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1264");
                    assertionsStreamWriter.WriteLine("    var material1264 = e = dataSource.entities.getById('material1264');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(245, 246, 247, 248));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(249, 250, 251, 252));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1273.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1273.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1274.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1274.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1275");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1275');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1264", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material1264.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1264", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material1264.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1264", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material1264.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1264", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material1264.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1264", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1264.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1276");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1276');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1277");
                    assertionsStreamWriter.WriteLine("    var material1277 = e = dataSource.entities.getById('material1277');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(3, 4, 5, 6));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1282");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1282');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1277", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1277.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1283");
                    assertionsStreamWriter.WriteLine("    var material1283 = e = dataSource.entities.getById('material1283');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1284", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1284');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1285, 1286));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1285, 1286));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(12, 13, 14, 15));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1291");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1291');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1283", new List<string> { "conicSensor", "domeSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material1283.conicSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1283", new List<string> { "conicSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1283.conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1283", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1283.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1283", new List<string> { "conicSensor", "domeSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material1283.conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1292");
                    assertionsStreamWriter.WriteLine("    var material1292 = e = dataSource.entities.getById('material1292');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(18, 19, 20, 21));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1297.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1297.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1298, 1299));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1298, 1299));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1300, 1301));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1300, 1301));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1302, 1303));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1302, 1303));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1304");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1304');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1292", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1292.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1292", new List<string> { "conicSensor", "domeSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1292.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1292", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material1292.conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1292", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1292.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1292", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1292.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1305");
                    assertionsStreamWriter.WriteLine("    var material1305 = e = dataSource.entities.getById('material1305');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(31, 32, 33, 34));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(32, 33, 34, 31));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(35, 36, 37, 38));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1314.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1314.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1315.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1315.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1316");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1316');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1305", new List<string> { "conicSensor", "domeSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material1305.conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1305", new List<string> { "conicSensor", "domeSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material1305.conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1305", new List<string> { "conicSensor", "domeSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material1305.conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1305", new List<string> { "conicSensor", "domeSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material1305.conicSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1305", new List<string> { "conicSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1305.conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1317");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1317');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1318");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1318');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1319");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1319');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1320");
                    assertionsStreamWriter.WriteLine("    var material1320 = e = dataSource.entities.getById('material1320');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(46, 47, 48, 49));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1325");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1325');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1320", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1320.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1326");
                    assertionsStreamWriter.WriteLine("    var material1326 = e = dataSource.entities.getById('material1326');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1327", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1327');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1328, 1329));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1328, 1329));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(55, 56, 57, 58));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1334");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1334');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1326", new List<string> { "conicSensor", "environmentOcclusionMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material1326.conicSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1326", new List<string> { "conicSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1326.conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1326", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1326.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1326", new List<string> { "conicSensor", "environmentOcclusionMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material1326.conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1335");
                    assertionsStreamWriter.WriteLine("    var material1335 = e = dataSource.entities.getById('material1335');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(61, 62, 63, 64));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1340.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1340.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1341, 1342));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1341, 1342));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1343, 1344));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1343, 1344));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1345, 1346));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1345, 1346));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1347");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1347');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1335", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1335.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1335", new List<string> { "conicSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material1335.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1335", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material1335.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1335", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material1335.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1335", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material1335.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1348");
                    assertionsStreamWriter.WriteLine("    var material1348 = e = dataSource.entities.getById('material1348');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(74, 75, 76, 77));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(78, 79, 80, 81));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1357.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1357.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1358.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1358.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1359");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1359');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1348", new List<string> { "conicSensor", "environmentOcclusionMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material1348.conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1348", new List<string> { "conicSensor", "environmentOcclusionMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material1348.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1348", new List<string> { "conicSensor", "environmentOcclusionMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material1348.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1348", new List<string> { "conicSensor", "environmentOcclusionMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material1348.conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1348", new List<string> { "conicSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1348.conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1360");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1360');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1361");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1361');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1362");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1362');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1363");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1363');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1364");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1364');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1365");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1365');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1366");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1366');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1367");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1367');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1368");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1368');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1369");
                    assertionsStreamWriter.WriteLine("    var material1369 = e = dataSource.entities.getById('material1369');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(95, 96, 97, 98));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(96, 97, 98, 95));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1374");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1374');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1369", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1369.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1375");
                    assertionsStreamWriter.WriteLine("    var material1375 = e = dataSource.entities.getById('material1375');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1376", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1376');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1377, 1378));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1377, 1378));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(104, 105, 106, 107));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1383");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1383');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1375", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material1375.customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1375", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1375.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1375", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1375.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1375", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material1375.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1384");
                    assertionsStreamWriter.WriteLine("    var material1384 = e = dataSource.entities.getById('material1384');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(110, 111, 112, 113));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1389.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1389.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1390, 1391));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1390, 1391));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1392, 1393));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1392, 1393));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1394, 1395));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1394, 1395));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1396");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1396');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1384", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1384.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1384", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1384.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1384", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material1384.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1384", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1384.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1384", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1384.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1397");
                    assertionsStreamWriter.WriteLine("    var material1397 = e = dataSource.entities.getById('material1397');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(123, 124, 125, 126));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(124, 125, 126, 123));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(127, 128, 129, 130));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(128, 129, 130, 127));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1406.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1406.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1407.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1407.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1408");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1408');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1397", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material1397.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1397", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material1397.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1397", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material1397.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1397", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material1397.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1397", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1397.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1409");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1409');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1410");
                    assertionsStreamWriter.WriteLine("    var material1410 = e = dataSource.entities.getById('material1410');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(136, 137, 138, 139));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1415");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1415');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1410", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1410.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1416");
                    assertionsStreamWriter.WriteLine("    var material1416 = e = dataSource.entities.getById('material1416');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1417", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1417');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1418, 1419));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1418, 1419));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(145, 146, 147, 148));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(146, 147, 148, 145));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1424");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1424');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1416", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material1416.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1416", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1416.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1416", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1416.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1416", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material1416.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1425");
                    assertionsStreamWriter.WriteLine("    var material1425 = e = dataSource.entities.getById('material1425');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(151, 152, 153, 154));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1430.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1430.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1431, 1432));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1431, 1432));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1433, 1434));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1433, 1434));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1435, 1436));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1435, 1436));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1437");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1437');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1425", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1425.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1425", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1425.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1425", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material1425.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1425", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1425.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1425", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1425.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1438");
                    assertionsStreamWriter.WriteLine("    var material1438 = e = dataSource.entities.getById('material1438');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(164, 165, 166, 167));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(165, 166, 167, 164));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(168, 169, 170, 171));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1447.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1447.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1448.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1448.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1449");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1449');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1438", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material1438.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1438", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material1438.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1438", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material1438.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1438", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material1438.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1438", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1438.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1450");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1450');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1451");
                    assertionsStreamWriter.WriteLine("    var material1451 = e = dataSource.entities.getById('material1451');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(177, 178, 179, 180));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(178, 179, 180, 177));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1456");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1456');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1451", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1451.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1457");
                    assertionsStreamWriter.WriteLine("    var material1457 = e = dataSource.entities.getById('material1457');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1458", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1458');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1459, 1460));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1459, 1460));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(186, 187, 188, 189));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1465");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1465');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1457", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material1457.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1457", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1457.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1457", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1457.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1457", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material1457.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1466");
                    assertionsStreamWriter.WriteLine("    var material1466 = e = dataSource.entities.getById('material1466');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(192, 193, 194, 195));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(193, 194, 195, 192));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1471.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1471.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1472, 1473));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1472, 1473));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1474, 1475));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1474, 1475));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1476, 1477));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1476, 1477));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1478");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1478');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1466", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1466.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1466", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1466.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1466", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material1466.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1466", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1466.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1466", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1466.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1479");
                    assertionsStreamWriter.WriteLine("    var material1479 = e = dataSource.entities.getById('material1479');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(205, 206, 207, 208));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(209, 210, 211, 212));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1488.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1488.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1489.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1489.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1490");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1490');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1479", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material1479.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1479", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material1479.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1479", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material1479.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1479", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material1479.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1479", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1479.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1491");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1491');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1492");
                    assertionsStreamWriter.WriteLine("    var material1492 = e = dataSource.entities.getById('material1492');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(218, 219, 220, 221));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(219, 220, 221, 218));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1497");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1497');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1492", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1492.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1498");
                    assertionsStreamWriter.WriteLine("    var material1498 = e = dataSource.entities.getById('material1498');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1499", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1499');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1500, 1501));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1500, 1501));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(227, 228, 229, 230));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1506");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1506');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1498", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material1498.customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1498", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1498.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1498", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1498.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1498", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material1498.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1507");
                    assertionsStreamWriter.WriteLine("    var material1507 = e = dataSource.entities.getById('material1507');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(233, 234, 235, 236));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1512.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1512.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1513, 1514));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1513, 1514));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1515, 1516));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1515, 1516));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1517, 1518));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1517, 1518));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1519");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1519');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1507", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1507.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1507", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1507.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1507", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material1507.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1507", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1507.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1507", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1507.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1520");
                    assertionsStreamWriter.WriteLine("    var material1520 = e = dataSource.entities.getById('material1520');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(250, 251, 252, 253));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1529.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1529.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1530.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1530.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1531");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1531');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1520", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material1520.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1520", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material1520.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1520", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material1520.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1520", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material1520.customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1520", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1520.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1532");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1532');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1533");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1533');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1534");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1534');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1535");
                    assertionsStreamWriter.WriteLine("    var material1535 = e = dataSource.entities.getById('material1535');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(6, 7, 8, 9));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1540");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1540');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1535", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1535.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1541");
                    assertionsStreamWriter.WriteLine("    var material1541 = e = dataSource.entities.getById('material1541');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1542", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1542');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1543, 1544));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1543, 1544));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(15, 16, 17, 18));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(16, 17, 18, 15));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1549");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1549');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1541", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material1541.customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1541", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1541.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1541", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1541.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1541", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material1541.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1550");
                    assertionsStreamWriter.WriteLine("    var material1550 = e = dataSource.entities.getById('material1550');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(21, 22, 23, 24));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(22, 23, 24, 21));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1555.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1555.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1556, 1557));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1556, 1557));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1558, 1559));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1558, 1559));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1560, 1561));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1560, 1561));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1562");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1562');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1550", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1550.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1550", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material1550.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1550", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material1550.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1550", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material1550.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1550", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material1550.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1563");
                    assertionsStreamWriter.WriteLine("    var material1563 = e = dataSource.entities.getById('material1563');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(34, 35, 36, 37));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(38, 39, 40, 41));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1572.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1572.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1573.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1573.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1574");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1574');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1563", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material1563.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1563", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material1563.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1563", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material1563.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1563", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material1563.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1563", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1563.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1575");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1575');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1576");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1576');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1577");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1577');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1578");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1578');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1579");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1579');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "xHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1580");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1580');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "yHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1581");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1581');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1582");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1582');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1583");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1583');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1584");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1584');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1585");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1585');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1586");
                    assertionsStreamWriter.WriteLine("    var material1586 = e = dataSource.entities.getById('material1586');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(57, 58, 59, 60));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(58, 59, 60, 57));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1591");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1591');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1586", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1586.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1592");
                    assertionsStreamWriter.WriteLine("    var material1592 = e = dataSource.entities.getById('material1592');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1593", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1593');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1594, 1595));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1594, 1595));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(66, 67, 68, 69));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1600");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1600');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1592", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material1592.rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1592", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1592.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1592", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1592.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1592", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material1592.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1601");
                    assertionsStreamWriter.WriteLine("    var material1601 = e = dataSource.entities.getById('material1601');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(72, 73, 74, 75));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1606.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1606.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1607, 1608));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1607, 1608));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1609, 1610));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1609, 1610));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1611, 1612));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1611, 1612));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1613");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1613');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1601", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material1601.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1601", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1601.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1601", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material1601.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1601", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1601.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1601", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1601.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1614");
                    assertionsStreamWriter.WriteLine("    var material1614 = e = dataSource.entities.getById('material1614');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(85, 86, 87, 88));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(86, 87, 88, 85));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(89, 90, 91, 92));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1623.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1623.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1624.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1624.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1625");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1625');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1614", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material1614.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1614", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material1614.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1614", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material1614.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1614", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material1614.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1614", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material1614.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1626");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1626');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1627");
                    assertionsStreamWriter.WriteLine("    var material1627 = e = dataSource.entities.getById('material1627');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(98, 99, 100, 101));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1632");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1632');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1627", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1627.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1633");
                    assertionsStreamWriter.WriteLine("    var material1633 = e = dataSource.entities.getById('material1633');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1634", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1634');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1635, 1636));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1635, 1636));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(107, 108, 109, 110));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1641");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1641');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1633", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material1633.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1633", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1633.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1633", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1633.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1633", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material1633.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1642");
                    assertionsStreamWriter.WriteLine("    var material1642 = e = dataSource.entities.getById('material1642');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(113, 114, 115, 116));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1647.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1647.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1648, 1649));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1648, 1649));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1650, 1651));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1650, 1651));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1652, 1653));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1652, 1653));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1654");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1654');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1642", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material1642.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1642", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1642.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1642", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material1642.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1642", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1642.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1642", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1642.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1655");
                    assertionsStreamWriter.WriteLine("    var material1655 = e = dataSource.entities.getById('material1655');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(126, 127, 128, 129));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(130, 131, 132, 133));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1664.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1664.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1665.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1665.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1666");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1666');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1655", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material1655.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1655", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material1655.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1655", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material1655.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1655", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material1655.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1655", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material1655.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1667");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1667');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1668");
                    assertionsStreamWriter.WriteLine("    var material1668 = e = dataSource.entities.getById('material1668');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(139, 140, 141, 142));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(140, 141, 142, 139));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1673");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1673');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1668", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1668.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1674");
                    assertionsStreamWriter.WriteLine("    var material1674 = e = dataSource.entities.getById('material1674');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1675", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1675');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1676, 1677));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1676, 1677));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(148, 149, 150, 151));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1682");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1682');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1674", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material1674.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1674", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1674.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1674", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1674.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1674", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material1674.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1683");
                    assertionsStreamWriter.WriteLine("    var material1683 = e = dataSource.entities.getById('material1683');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(154, 155, 156, 157));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1688.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1688.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1689, 1690));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1689, 1690));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1691, 1692));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1691, 1692));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1693, 1694));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1693, 1694));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1695");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1695');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1683", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material1683.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1683", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1683.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1683", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material1683.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1683", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1683.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1683", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1683.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1696");
                    assertionsStreamWriter.WriteLine("    var material1696 = e = dataSource.entities.getById('material1696');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(167, 168, 169, 170));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(171, 172, 173, 174));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1705.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1705.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1706.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1706.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1707");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1707');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1696", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material1696.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1696", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material1696.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1696", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material1696.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1696", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material1696.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1696", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material1696.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1708");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1708');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1709");
                    assertionsStreamWriter.WriteLine("    var material1709 = e = dataSource.entities.getById('material1709');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(180, 181, 182, 183));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1714");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1714');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1709", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1709.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1715");
                    assertionsStreamWriter.WriteLine("    var material1715 = e = dataSource.entities.getById('material1715');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1716", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1716');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1717, 1718));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1717, 1718));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(189, 190, 191, 192));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(190, 191, 192, 189));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1723");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1723');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1715", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material1715.rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1715", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1715.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1715", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1715.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1715", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material1715.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1724");
                    assertionsStreamWriter.WriteLine("    var material1724 = e = dataSource.entities.getById('material1724');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(195, 196, 197, 198));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1729.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1729.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1730, 1731));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1730, 1731));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1732, 1733));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1732, 1733));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1734, 1735));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1734, 1735));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1736");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1736');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1724", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material1724.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1724", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material1724.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1724", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material1724.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1724", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material1724.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1724", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material1724.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1737");
                    assertionsStreamWriter.WriteLine("    var material1737 = e = dataSource.entities.getById('material1737');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(208, 209, 210, 211));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(212, 213, 214, 215));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1746.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1746.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1747.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1747.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1748");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1748');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1737", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material1737.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1737", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material1737.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1737", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material1737.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1737", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material1737.rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1737", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material1737.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1749");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1749');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1750");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1750');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1751");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1751');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1752");
                    assertionsStreamWriter.WriteLine("    var material1752 = e = dataSource.entities.getById('material1752');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(223, 224, 225, 226));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1757");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1757');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1752", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1752.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1758");
                    assertionsStreamWriter.WriteLine("    var material1758 = e = dataSource.entities.getById('material1758');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1759", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1759');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1760, 1761));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1760, 1761));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(232, 233, 234, 235));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1766");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1766');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1758", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material1758.rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1758", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1758.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1758", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1758.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1758", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material1758.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1767");
                    assertionsStreamWriter.WriteLine("    var material1767 = e = dataSource.entities.getById('material1767');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(238, 239, 240, 241));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1772.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1772.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1773, 1774));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1773, 1774));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1775, 1776));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1775, 1776));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1777, 1778));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1777, 1778));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1779");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1779');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1767", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material1767.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1767", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material1767.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1767", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material1767.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1767", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material1767.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1767", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material1767.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1780");
                    assertionsStreamWriter.WriteLine("    var material1780 = e = dataSource.entities.getById('material1780');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(251, 252, 253, 254));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(0, 1, 2, 3));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1789.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1789.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1790.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1790.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1791");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1791');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1780", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material1780.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1780", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material1780.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1780", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material1780.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1780", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material1780.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1780", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material1780.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1792");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1792');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1793");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1793');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1794");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1794');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1795");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1795');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1796");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1796');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1797");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1797');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenPerDirectionRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "perDirectionRadius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1798");
                    assertionsStreamWriter.WriteLine("    var material1798 = e = dataSource.entities.getById('material1798');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(14, 15, 16, 17));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1803");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1803');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1798", new List<string> { "fan", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(material1798.fan.material.color.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1804");
                    assertionsStreamWriter.WriteLine("    var material1804 = e = dataSource.entities.getById('material1804');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteUri("http://example.com/1805", CesiumResourceBehavior.LinkTo);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.image.getValue(date)).toEqual('http://example.com/1805');");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1806, 1807));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(1806, 1807));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(23, 24, 25, 26));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(24, 25, 26, 23));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteBoolean(true);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1812");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1812');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    {
                        using (var m2 = m.OpenImageProperty())
                        {
                            m2.WriteReference(new Reference("material1804", new List<string> { "fan", "material", "image" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.image.getValue(date)).toEqual(material1804.fan.material.image.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1804", new List<string> { "fan", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(material1804.fan.material.repeat.getValue(date));");
                        }
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1804", new List<string> { "fan", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(material1804.fan.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenTransparentProperty())
                        {
                            m2.WriteReference(new Reference("material1804", new List<string> { "fan", "material", "transparent" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.transparent.getValue(date)).toEqual(material1804.fan.material.transparent.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1813");
                    assertionsStreamWriter.WriteLine("    var material1813 = e = dataSource.entities.getById('material1813');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(29, 30, 31, 32));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(30, 31, 32, 29));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteNumber(1818.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(date)).toEqual(1818.0);");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1819, 1820));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(1819, 1820));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1821, 1822));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1821, 1822));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteCartesian2(new Rectangular(1823, 1824));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1823, 1824));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1825");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1825');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1813", new List<string> { "fan", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(material1813.fan.material.color.getValue(date));");
                        }
                        using (var m2 = m.OpenCellAlphaProperty())
                        {
                            m2.WriteReference(new Reference("material1813", new List<string> { "fan", "material", "cellAlpha" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(date)).toEqual(material1813.fan.material.cellAlpha.getValue(date));");
                        }
                        using (var m2 = m.OpenLineCountProperty())
                        {
                            m2.WriteReference(new Reference("material1813", new List<string> { "fan", "material", "lineCount" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(date)).toEqual(material1813.fan.material.lineCount.getValue(date));");
                        }
                        using (var m2 = m.OpenLineThicknessProperty())
                        {
                            m2.WriteReference(new Reference("material1813", new List<string> { "fan", "material", "lineThickness" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(date)).toEqual(material1813.fan.material.lineThickness.getValue(date));");
                        }
                        using (var m2 = m.OpenLineOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1813", new List<string> { "fan", "material", "lineOffset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(date)).toEqual(material1813.fan.material.lineOffset.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("material1826");
                    assertionsStreamWriter.WriteLine("    var material1826 = e = dataSource.entities.getById('material1826');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(42, 43, 44, 45));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteRgba(Color.FromArgb(46, 47, 48, 49));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteNumber(1835.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(date)).toEqual(1835.0);");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteNumber(1836.0);
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(1836.0);");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1837");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1837');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    {
                        using (var m2 = m.OpenOrientationProperty())
                        {
                            m2.WriteReference(new Reference("material1826", new List<string> { "fan", "material", "orientation" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.orientation.getValue(date)).toEqual(material1826.fan.material.orientation.getValue(date));");
                        }
                        using (var m2 = m.OpenEvenColorProperty())
                        {
                            m2.WriteReference(new Reference("material1826", new List<string> { "fan", "material", "evenColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(date)).toEqual(material1826.fan.material.evenColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOddColorProperty())
                        {
                            m2.WriteReference(new Reference("material1826", new List<string> { "fan", "material", "oddColor" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(date)).toEqual(material1826.fan.material.oddColor.getValue(date));");
                        }
                        using (var m2 = m.OpenOffsetProperty())
                        {
                            m2.WriteReference(new Reference("material1826", new List<string> { "fan", "material", "offset" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(date)).toEqual(material1826.fan.material.offset.getValue(date));");
                        }
                        using (var m2 = m.OpenRepeatProperty())
                        {
                            m2.WriteReference(new Reference("material1826", new List<string> { "fan", "material", "repeat" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(material1826.fan.material.repeat.getValue(date));");
                        }
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1838");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1838');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "fill" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1839");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1839');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outline" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1840");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1840');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1841");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1841');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1842");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1842');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "numberOfRings" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1843");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1843');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1844");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1844');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1845");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1845');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "direction" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1846");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1846');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "length" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("reference1847");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference1847');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "minimumLengthInPixels" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1848");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1848');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(1849, 1850, 1851), new Cartesian(1852, 1853, 1854) });
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(1849, 1850, 1851));");
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(1852, 1853, 1854));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1855");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1855');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteCartographicRadians(new [] { documentStartDate, documentStopDate, }, new [] { new Cartographic(0.889538055227165, 0.318741728432268, 1858), new Cartographic(0.747945401637372, 0.177149074842475, 1861) });
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(0.889538055227165, 0.318741728432268, 1858));");
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.747945401637372, 0.177149074842475, 1861));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1862");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1862');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteCartographicDegrees(new [] { documentStartDate, documentStopDate, }, new [] { new Cartographic(18, 19, 1865), new Cartographic(21, 22, 1868) });
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(18, 19, 1865));");
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(21, 22, 1868));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1869");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1869');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPositionProperty())
                    {
                        w.WriteCartesianVelocity(new [] { documentStartDate, documentStopDate, }, new [] { new Motion<Cartesian>(new Cartesian(1870, 1871, 1872), new Cartesian(1873, 1874, 1875)), new Motion<Cartesian>(new Cartesian(1876, 1877, 1878), new Cartesian(1879, 1880, 1881)) });
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(1870, 1871, 1872));");
                        assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(1876, 1877, 1878));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1882");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1882');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenOrientationProperty())
                    {
                        w.WriteUnitQuaternion(new [] { documentStartDate, documentStopDate, }, new [] { new UnitQuaternion(0.499601928525103, 0.499867250845085, 0.500132573165066, 0.500397895485048), new UnitQuaternion(0.499602771859271, 0.499867532204718, 0.500132292550165, 0.500397052895613) });
                        assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.499867250845085, 0.500132573165066, 0.500397895485048, 0.499601928525103), 1e-14);");
                        assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.499867532204718, 0.500132292550165, 0.500397052895613, 0.499602771859271), 1e-14);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1891");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1891');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenViewFromProperty())
                    {
                        w.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(1892, 1893, 1894), new Cartesian(1895, 1896, 1897) });
                        assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(1892, 1893, 1894));");
                        assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(1895, 1896, 1897));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1898");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1898');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 1899.0, 1900.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(1899.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(1900.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1901");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1901');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(1902, 1903), new Rectangular(1904, 1905) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(1902, 1903));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(1904, 1905));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1906");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1906');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(1907, 1908, 1909), new Cartesian(1910, 1911, 1912) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(1907, 1908, 1909));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(1910, 1911, 1912));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1913");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1913');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(129, 130, 131, 132), Color.FromArgb(133, 134, 135, 136) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(130, 131, 132, 129));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1922");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1922');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(138, 139, 140, 141), Color.FromArgb(142, 143, 144, 145) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1931");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1931');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 1932.0, 1933.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(1932.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(1933.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1934");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1934');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(1935, 1936, 1937), new Cartesian(1938, 1939, 1940) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqual(new Cartesian3(1935, 1936, 1937));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqual(new Cartesian3(1938, 1939, 1940));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1941");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1941');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 1942.0, 1943.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(documentStartDate)).toEqual(1942.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(documentStopDate)).toEqual(1943.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1944");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1944');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 1945.0, 1946.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(documentStartDate)).toEqual(1945.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(documentStopDate)).toEqual(1946.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1947");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1947');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(1948, 1949, 1950, 1951), new NearFarScalar(1952, 1953, 1954, 1955) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(1948, 1949, 1950, 1951));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(1952, 1953, 1954, 1955));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1956");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1956');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(1957, 1958, 1959, 1960), new NearFarScalar(1961, 1962, 1963, 1964) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(1957, 1958, 1959, 1960));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(1961, 1962, 1963, 1964));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1965");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1965');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(1966, 1967, 1968, 1969), new NearFarScalar(1970, 1971, 1972, 1973) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(1966, 1967, 1968, 1969));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(1970, 1971, 1972, 1973));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1974");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1974');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBillboardProperty())
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteBoundingRectangle(new [] { documentStartDate, documentStopDate, }, new [] { BoundingRectangle.FromWidthHeight(1975, 1976, 1977, 1978), BoundingRectangle.FromWidthHeight(1979, 1980, 1981, 1982) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(1975, 1976, 1977, 1978));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(1979, 1980, 1981, 1982));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled1983");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled1983');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(1984, 1985, 1986), new Cartesian(1987, 1988, 1989) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(1984, 1985, 1986));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(1987, 1988, 1989));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial1990");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial1990');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(207, 208, 209, 206));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial1999");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial1999');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2008");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2008');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2009, 2010), new Rectangular(2011, 2012) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2009, 2010));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2011, 2012));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2013");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2013');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(229, 230, 231, 232), Color.FromArgb(233, 234, 235, 236) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2022");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2022');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(238, 239, 240, 241), Color.FromArgb(242, 243, 244, 245) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2031");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2031');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(247, 248, 249, 250), Color.FromArgb(251, 252, 253, 254) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2040");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2040');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(1, 2, 3, 4), Color.FromArgb(5, 6, 7, 8) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00784313725490196, 0.0117647058823529, 0.0156862745098039, 0.00392156862745098), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2049");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2049');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2050.0, 2051.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(2050.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(2051.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2052");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2052');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2053, 2054), new Rectangular(2055, 2056) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2053, 2054));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2055, 2056));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2057");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2057');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2058, 2059), new Rectangular(2060, 2061) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2058, 2059));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2060, 2061));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2062");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2062');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2063, 2064), new Rectangular(2065, 2066) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2063, 2064));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2065, 2066));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2067");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2067');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(28, 29, 30, 31), Color.FromArgb(32, 33, 34, 35) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2076");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2076');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(37, 38, 39, 40), Color.FromArgb(41, 42, 43, 44) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2085");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2085');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2094");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2094');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(55, 56, 57, 58), Color.FromArgb(59, 60, 61, 62) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2103");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2103');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2104.0, 2105.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(2104.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(2105.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2106");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2106');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2107.0, 2108.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(2107.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(2108.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2109");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2109');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2118");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2118');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2127");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2127');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenBoxProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2128.0, 2129.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(2128.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(2129.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2130");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2130');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2131.0, 2132.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(documentStartDate)).toEqual(2131.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(documentStopDate)).toEqual(2132.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2133");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2133');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2134.0, 2135.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(documentStartDate)).toEqual(2134.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(documentStopDate)).toEqual(2135.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2136");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2136');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2137.0, 2138.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(2137.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(2138.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2139");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2139');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2140.0, 2141.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(2140.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(2141.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2142");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2142');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2151");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2151');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2160");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2160');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2161, 2162), new Rectangular(2163, 2164) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2161, 2162));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2163, 2164));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2165");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2165');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2174");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2174');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2183");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2183');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(144, 145, 146, 147), Color.FromArgb(148, 149, 150, 151) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2192");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2192');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(153, 154, 155, 156), Color.FromArgb(157, 158, 159, 160) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2201");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2201');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2202.0, 2203.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(2202.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(2203.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2204");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2204');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2205, 2206), new Rectangular(2207, 2208) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2205, 2206));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2207, 2208));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2209");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2209');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2210, 2211), new Rectangular(2212, 2213) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2210, 2211));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2212, 2213));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2214");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2214');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2215, 2216), new Rectangular(2217, 2218) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2215, 2216));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2217, 2218));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2219");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2219');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2228");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2228');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2237");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2237');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2246");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2246');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2255");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2255');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2256.0, 2257.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(2256.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(2257.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2258");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2258');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2259.0, 2260.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(2259.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(2260.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2261");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2261');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2270");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2270');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2279");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2279');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCorridorProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2280.0, 2281.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(2280.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(2281.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2282");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2282');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2283.0, 2284.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(2283.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(2284.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2285");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2285');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2286.0, 2287.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(2286.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(2287.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2288");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2288');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2289.0, 2290.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(2289.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(2290.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2291");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2291');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(252, 253, 254, 0), Color.FromArgb(1, 2, 3, 4) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2300");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2300');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2309");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2309');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2310, 2311), new Rectangular(2312, 2313) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2310, 2311));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2312, 2313));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2314");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2314');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(20, 21, 22, 23), Color.FromArgb(24, 25, 26, 27) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2323");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2323');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(29, 30, 31, 32), Color.FromArgb(33, 34, 35, 36) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2332");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2332');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(38, 39, 40, 41), Color.FromArgb(42, 43, 44, 45) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2341");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2341');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(47, 48, 49, 50), Color.FromArgb(51, 52, 53, 54) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2350");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2350');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2351.0, 2352.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(2351.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(2352.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2353");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2353');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2354, 2355), new Rectangular(2356, 2357) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2354, 2355));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2356, 2357));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2358");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2358');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2359, 2360), new Rectangular(2361, 2362) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2359, 2360));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2361, 2362));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2363");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2363');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2364, 2365), new Rectangular(2366, 2367) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2364, 2365));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2366, 2367));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2368");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2368');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(74, 75, 76, 77), Color.FromArgb(78, 79, 80, 81) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2377");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2377');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(83, 84, 85, 86), Color.FromArgb(87, 88, 89, 90) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2386");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2386');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2395");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2395');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2404");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2404');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2405.0, 2406.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(2405.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(2406.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2407");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2407');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2408.0, 2409.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(2408.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(2409.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2410");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2410');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(116, 117, 118, 119), Color.FromArgb(120, 121, 122, 123) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2419");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2419');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(125, 126, 127, 128), Color.FromArgb(129, 130, 131, 132) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2428");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2428');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2429.0, 2430.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(2429.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(2430.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2431");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2431');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2432.0, 2433.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2432.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2433.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2434");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2434');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCylinderProperty())
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2435.0, 2436.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(2435.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(2436.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2437");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2437');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2438.0, 2439.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(2438.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(2439.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2440");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2440');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2441.0, 2442.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(2441.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(2442.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2443");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2443');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2444.0, 2445.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(2444.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(2445.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2446");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2446');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2447.0, 2448.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(2447.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(2448.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2449");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2449');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2450.0, 2451.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(2450.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(2451.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2452");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2452');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2453.0, 2454.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(2453.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(2454.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2455");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2455');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2456.0, 2457.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(2456.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(2457.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2458");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2458');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(165, 166, 167, 164));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2467");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2467');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(173, 174, 175, 176), Color.FromArgb(177, 178, 179, 180) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2476");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2476');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2477, 2478), new Rectangular(2479, 2480) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2477, 2478));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2479, 2480));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2481");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2481');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2490");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2490');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(196, 197, 198, 199), Color.FromArgb(200, 201, 202, 203) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2499");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2499');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2508");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2508');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(214, 215, 216, 217), Color.FromArgb(218, 219, 220, 221) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2517");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2517');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2518.0, 2519.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(2518.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(2519.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2520");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2520');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2521, 2522), new Rectangular(2523, 2524) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2521, 2522));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2523, 2524));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2525");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2525');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2526, 2527), new Rectangular(2528, 2529) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2526, 2527));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2528, 2529));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2530");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2530');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2531, 2532), new Rectangular(2533, 2534) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2531, 2532));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2533, 2534));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2535");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2535');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(241, 242, 243, 244), Color.FromArgb(245, 246, 247, 248) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2544");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2544');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(250, 251, 252, 253), Color.FromArgb(254, 0, 1, 2) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2553");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2553');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(4, 5, 6, 7), Color.FromArgb(8, 9, 10, 11) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(5, 6, 7, 4));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2562");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2562');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(13, 14, 15, 16), Color.FromArgb(17, 18, 19, 20) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2571");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2571');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2572.0, 2573.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(2572.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(2573.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2574");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2574');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2575.0, 2576.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(2575.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(2576.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2577");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2577');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(28, 29, 30, 31), Color.FromArgb(32, 33, 34, 35) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2586");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2586');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(37, 38, 39, 40), Color.FromArgb(41, 42, 43, 44) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2595");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2595');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2596.0, 2597.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(2596.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(2597.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2598");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2598');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipseProperty())
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2599.0, 2600.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2599.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2600.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2601");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2601');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(2602, 2603, 2604), new Cartesian(2605, 2606, 2607) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(2602, 2603, 2604));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(2605, 2606, 2607));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2608");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2608');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(60, 61, 62, 59));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(64, 65, 66, 63));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2617");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2617');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2626");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2626');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2627, 2628), new Rectangular(2629, 2630) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2627, 2628));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2629, 2630));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2631");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2631');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(82, 83, 84, 85), Color.FromArgb(86, 87, 88, 89) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2640");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2640');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(91, 92, 93, 94), Color.FromArgb(95, 96, 97, 98) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2649");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2649');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(100, 101, 102, 103), Color.FromArgb(104, 105, 106, 107) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2658");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2658');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2667");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2667');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2668.0, 2669.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(2668.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(2669.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2670");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2670');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2671, 2672), new Rectangular(2673, 2674) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2671, 2672));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2673, 2674));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2675");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2675');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2676, 2677), new Rectangular(2678, 2679) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2676, 2677));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2678, 2679));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2680");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2680');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2681, 2682), new Rectangular(2683, 2684) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2681, 2682));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2683, 2684));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2685");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2685');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(136, 137, 138, 139), Color.FromArgb(140, 141, 142, 143) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2694");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2694');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(145, 146, 147, 148), Color.FromArgb(149, 150, 151, 152) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2703");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2703');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(154, 155, 156, 157), Color.FromArgb(158, 159, 160, 161) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2712");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2712');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(163, 164, 165, 166), Color.FromArgb(167, 168, 169, 170) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2721");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2721');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2722.0, 2723.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(2722.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(2723.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2724");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2724');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2725.0, 2726.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(2725.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(2726.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2727");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2727');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(178, 179, 180, 181), Color.FromArgb(182, 183, 184, 185) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(179, 180, 181, 178));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(183, 184, 185, 182));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2736");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2736');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.737254901960784, 0.741176470588235, 0.745098039215686, 0.733333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2745");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2745');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2746.0, 2747.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(2746.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(2747.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2748");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2748');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2749.0, 2750.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(2749.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(2750.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2751");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2751');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2752.0, 2753.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(2752.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(2753.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2754");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2754');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenEllipsoidProperty())
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2755.0, 2756.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(2755.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(2756.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2757");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2757');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2758.0, 2759.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(documentStartDate)).toEqual(2758.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(documentStopDate)).toEqual(2759.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2760");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2760');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2761, 2762), new Rectangular(2763, 2764) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2761, 2762));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2763, 2764));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2765");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2765');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(2766, 2767, 2768), new Cartesian(2769, 2770, 2771) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(2766, 2767, 2768));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(2769, 2770, 2771));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2772");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2772');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(223, 224, 225, 226), Color.FromArgb(227, 228, 229, 230) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2781");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2781');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(232, 233, 234, 235), Color.FromArgb(236, 237, 238, 239) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.913725490196078, 0.917647058823529, 0.92156862745098, 0.909803921568627), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.929411764705882, 0.933333333333333, 0.937254901960784, 0.925490196078431), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2790");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2790');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(241, 242, 243, 244), Color.FromArgb(245, 246, 247, 248) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2799");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2799');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(250, 251, 252, 253), Color.FromArgb(254, 0, 1, 2) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2808");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2808');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2809.0, 2810.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(2809.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(2810.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2811");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2811');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(2812, 2813, 2814, 2815), new NearFarScalar(2816, 2817, 2818, 2819) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2812, 2813, 2814, 2815));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2816, 2817, 2818, 2819));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2820");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2820');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenLabelProperty())
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(2821, 2822, 2823, 2824), new NearFarScalar(2825, 2826, 2827, 2828) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2821, 2822, 2823, 2824));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2825, 2826, 2827, 2828));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2829");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2829');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2830.0, 2831.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(documentStartDate)).toEqual(2830.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(documentStopDate)).toEqual(2831.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2832");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2832');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2833.0, 2834.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(2833.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(2834.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2835");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2835');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenModelProperty())
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2836.0, 2837.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(2836.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(2837.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2838");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2838');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2839.0, 2840.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(documentStartDate)).toEqual(2839.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(documentStopDate)).toEqual(2840.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2841");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2841');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2842.0, 2843.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(documentStartDate)).toEqual(2842.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(documentStopDate)).toEqual(2843.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2844");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2844');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2845.0, 2846.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(2845.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(2846.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled2847");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2847');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2848.0, 2849.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(2848.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(2849.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2850");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2850');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2859");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2859');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(55, 56, 57, 58), Color.FromArgb(59, 60, 61, 62) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2868");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2868');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(64, 65, 66, 67), Color.FromArgb(68, 69, 70, 71) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2877");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2877');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(73, 74, 75, 76), Color.FromArgb(77, 78, 79, 80) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2886");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2886');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(82, 83, 84, 85), Color.FromArgb(86, 87, 88, 89) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2895");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2895');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(91, 92, 93, 94), Color.FromArgb(95, 96, 97, 98) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2904");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2904');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2905.0, 2906.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(2905.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(2906.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2907");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2907');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2916");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2916');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2925");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2925');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(121, 122, 123, 124), Color.FromArgb(125, 126, 127, 128) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(122, 123, 124, 121));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(126, 127, 128, 125));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2934");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2934');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(130, 131, 132, 133), Color.FromArgb(134, 135, 136, 137) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2943");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2943');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2944.0, 2945.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(2944.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(2945.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2946");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2946');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2947, 2948), new Rectangular(2949, 2950) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2947, 2948));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2949, 2950));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2951");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2951');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(147, 148, 149, 150), Color.FromArgb(151, 152, 153, 154) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2960");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2960');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(156, 157, 158, 159), Color.FromArgb(160, 161, 162, 163) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.631372549019608, 0.635294117647059, 0.63921568627451, 0.627450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2969");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2969');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(165, 166, 167, 168), Color.FromArgb(169, 170, 171, 172) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2978");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2978');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(174, 175, 176, 177), Color.FromArgb(178, 179, 180, 181) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2987");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2987');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 2988.0, 2989.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(2988.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(2989.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2990");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2990');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2991, 2992), new Rectangular(2993, 2994) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2991, 2992));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2993, 2994));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial2995");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2995');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(2996, 2997), new Rectangular(2998, 2999) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2996, 2997));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2998, 2999));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3000");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3000');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3001, 3002), new Rectangular(3003, 3004) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3001, 3002));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3003, 3004));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3005");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3005');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(201, 202, 203, 204), Color.FromArgb(205, 206, 207, 208) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3014");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3014');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(210, 211, 212, 213), Color.FromArgb(214, 215, 216, 217) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3023");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3023');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(219, 220, 221, 222), Color.FromArgb(223, 224, 225, 226) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3032");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3032');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(228, 229, 230, 231), Color.FromArgb(232, 233, 234, 235) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.913725490196078, 0.917647058823529, 0.92156862745098, 0.909803921568627), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3041");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3041');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3042.0, 3043.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(3042.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(3043.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3044");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3044');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPathProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3045.0, 3046.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(3045.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(3046.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3047");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3047');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3048.0, 3049.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(3048.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(3049.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3050");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3050');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(246, 247, 248, 249), Color.FromArgb(250, 251, 252, 253) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3059");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3059');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(0, 1, 2, 3), Color.FromArgb(4, 5, 6, 7) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3068");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3068');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(9, 10, 11, 12), Color.FromArgb(13, 14, 15, 16) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(10, 11, 12, 9));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3077");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3077');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(18, 19, 20, 21), Color.FromArgb(22, 23, 24, 25) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3086");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3086');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3087.0, 3088.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(3087.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(3088.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3089");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3089');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(3090, 3091, 3092, 3093), new NearFarScalar(3094, 3095, 3096, 3097) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(3090, 3091, 3092, 3093));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(3094, 3095, 3096, 3097));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3098");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3098');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPointProperty())
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new [] { documentStartDate, documentStopDate, }, new [] { new NearFarScalar(3099, 3100, 3101, 3102), new NearFarScalar(3103, 3104, 3105, 3106) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(3099, 3100, 3101, 3102));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(3103, 3104, 3105, 3106));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3107");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3107');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3108.0, 3109.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(documentStartDate)).toEqual(3108.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(documentStopDate)).toEqual(3109.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3110");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3110');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3111.0, 3112.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(3111.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(3112.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3113");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3113');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3114.0, 3115.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(3114.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(3115.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3116");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3116');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3117.0, 3118.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(3117.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(3118.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3119");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3119');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(60, 61, 62, 63), Color.FromArgb(64, 65, 66, 67) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3128");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3128');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3137");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3137');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3138, 3139), new Rectangular(3140, 3141) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3138, 3139));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3140, 3141));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3142");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3142');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(83, 84, 85, 86), Color.FromArgb(87, 88, 89, 90) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(88, 89, 90, 87));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3151");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3151');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3160");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3160');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3169");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3169');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3178");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3178');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3179.0, 3180.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(3179.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(3180.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3181");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3181');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3182, 3183), new Rectangular(3184, 3185) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3182, 3183));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3184, 3185));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3186");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3186');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3187, 3188), new Rectangular(3189, 3190) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3187, 3188));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3189, 3190));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3191");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3191');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3192, 3193), new Rectangular(3194, 3195) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3192, 3193));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3194, 3195));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3196");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3196');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(137, 138, 139, 140), Color.FromArgb(141, 142, 143, 144) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3205");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3205');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(146, 147, 148, 149), Color.FromArgb(150, 151, 152, 153) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3214");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3214');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(155, 156, 157, 158), Color.FromArgb(159, 160, 161, 162) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3223");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3223');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3232");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3232');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3233.0, 3234.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(3233.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(3234.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3235");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3235');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3236.0, 3237.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(3236.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(3237.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3238");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3238');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3247");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3247');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3256");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3256');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolygonProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3257.0, 3258.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(3257.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(3258.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3259");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3259');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3260.0, 3261.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(documentStartDate)).toEqual(3260.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(documentStopDate)).toEqual(3261.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3262");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3262');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3263.0, 3264.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(3263.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(3264.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3265");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3265');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(207, 208, 209, 206));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3274");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3274');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3283");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3283');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3292");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3292');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(233, 234, 235, 236), Color.FromArgb(237, 238, 239, 240) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3301");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3301');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(242, 243, 244, 245), Color.FromArgb(246, 247, 248, 249) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3310");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3310');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3319");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3319');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineOutlineProperty())
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3320.0, 3321.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(3320.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(3321.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3322");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3322');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3331");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3331');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineArrowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(17, 18, 19, 20), Color.FromArgb(21, 22, 23, 24) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3340");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3340');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(26, 27, 28, 29), Color.FromArgb(30, 31, 32, 33) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3349");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3349');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(35, 36, 37, 38), Color.FromArgb(39, 40, 41, 42) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3358");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3358');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenPolylineGlowProperty())
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3359.0, 3360.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(3359.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(3360.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3361");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3361');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3362, 3363), new Rectangular(3364, 3365) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3362, 3363));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3364, 3365));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3366");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3366');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(52, 53, 54, 55), Color.FromArgb(56, 57, 58, 59) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3375");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3375');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(61, 62, 63, 64), Color.FromArgb(65, 66, 67, 68) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3384");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3384');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(75, 76, 77, 74));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3393");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3393');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3402");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3402');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3403.0, 3404.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(3403.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(3404.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3405");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3405');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3406, 3407), new Rectangular(3408, 3409) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3406, 3407));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3408, 3409));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3410");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3410');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3411, 3412), new Rectangular(3413, 3414) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3411, 3412));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3413, 3414));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3415");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3415');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3416, 3417), new Rectangular(3418, 3419) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3416, 3417));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3418, 3419));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3420");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3420');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(106, 107, 108, 109), Color.FromArgb(110, 111, 112, 113) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(107, 108, 109, 106));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3429");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3429');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(115, 116, 117, 118), Color.FromArgb(119, 120, 121, 122) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3438");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3438');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(124, 125, 126, 127), Color.FromArgb(128, 129, 130, 131) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3447");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3447');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(133, 134, 135, 136), Color.FromArgb(137, 138, 139, 140) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3456");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3456');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3457.0, 3458.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(3457.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(3458.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3459");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3459');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenPolylineProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3460.0, 3461.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(3460.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(3461.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3462");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3462');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsen(new [] { documentStartDate, documentStopDate, }, new [] { new CartographicExtent(0.964895744047986, 0.39409941725309, 1.39409941725309, 0.823303090458193), new CartographicExtent(0.252506763663297, 1.2525067636633, 0.6817104368684, 0.110914110073503) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(0.964895744047986, 0.39409941725309, 1.39409941725309, 0.823303090458193));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.252506763663297, 1.2525067636633, 0.6817104368684, 0.110914110073503));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3471");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3471');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsenDegrees(new [] { documentStartDate, documentStopDate, }, new [] { new CartographicExtent(7, 8, 9, 10), new CartographicExtent(11, 12, 13, 14) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(7, 8, 9, 10));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(11, 12, 13, 14));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3480");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3480');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3481.0, 3482.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(3481.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(3482.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3483");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3483');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3484.0, 3485.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(3484.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(3485.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3486");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3486');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3487.0, 3488.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(3487.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(3488.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3489");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3489');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3490.0, 3491.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(3490.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(3491.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3492");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3492');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3493.0, 3494.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(3493.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(3494.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3495");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3495');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(181, 182, 183, 184), Color.FromArgb(185, 186, 187, 188) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3504");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3504');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(190, 191, 192, 193), Color.FromArgb(194, 195, 196, 197) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3513");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3513');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3514, 3515), new Rectangular(3516, 3517) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3514, 3515));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3516, 3517));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3518");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3518');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(204, 205, 206, 207), Color.FromArgb(208, 209, 210, 211) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3527");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3527');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(213, 214, 215, 216), Color.FromArgb(217, 218, 219, 220) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3536");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3536');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3545");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3545');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3554");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3554');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3555.0, 3556.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(3555.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(3556.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3557");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3557');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3558, 3559), new Rectangular(3560, 3561) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3558, 3559));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3560, 3561));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3562");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3562');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3563, 3564), new Rectangular(3565, 3566) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3563, 3564));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3565, 3566));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3567");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3567');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3568, 3569), new Rectangular(3570, 3571) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3568, 3569));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3570, 3571));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3572");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3572');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(3, 4, 5, 6), Color.FromArgb(7, 8, 9, 10) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3581");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3581');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(12, 13, 14, 15), Color.FromArgb(16, 17, 18, 19) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3590");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3590');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(21, 22, 23, 24), Color.FromArgb(25, 26, 27, 28) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(22, 23, 24, 21));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(26, 27, 28, 25));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3599");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3599');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(30, 31, 32, 33), Color.FromArgb(34, 35, 36, 37) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3608");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3608');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3609.0, 3610.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(3609.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(3610.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3611");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3611');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3612.0, 3613.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(3612.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(3613.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3614");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3614');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(45, 46, 47, 48), Color.FromArgb(49, 50, 51, 52) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(46, 47, 48, 45));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3623");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3623');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(54, 55, 56, 57), Color.FromArgb(58, 59, 60, 61) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.231372549019608, 0.235294117647059, 0.23921568627451, 0.227450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3632");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3632');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangleProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3633.0, 3634.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(3633.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(3634.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3635");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3635');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3636.0, 3637.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(3636.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(3637.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3638");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3638');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3647");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3647');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(78, 79, 80, 81), Color.FromArgb(82, 83, 84, 85) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3656");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3656');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3657, 3658), new Rectangular(3659, 3660) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3657, 3658));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3659, 3660));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3661");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3661');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3670");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3670');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3679");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3679');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3688");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3688');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3697");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3697');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3698.0, 3699.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(3698.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(3699.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3700");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3700');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3701, 3702), new Rectangular(3703, 3704) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3701, 3702));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3703, 3704));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3705");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3705');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3706, 3707), new Rectangular(3708, 3709) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3706, 3707));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3708, 3709));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3710");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3710');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3711, 3712), new Rectangular(3713, 3714) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3711, 3712));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3713, 3714));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3715");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3715');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(146, 147, 148, 149), Color.FromArgb(150, 151, 152, 153) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3724");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3724');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(155, 156, 157, 158), Color.FromArgb(159, 160, 161, 162) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3733");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3733');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(165, 166, 167, 164));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3742");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3742');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(173, 174, 175, 176), Color.FromArgb(177, 178, 179, 180) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3751");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3751');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3752.0, 3753.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(3752.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(3753.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3754");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3754');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3755.0, 3756.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(3755.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(3756.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3757");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3757');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(189, 190, 191, 188));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3766");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3766');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3775");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3775');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenWallProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3776.0, 3777.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(3776.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(3777.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3778");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3778');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3779.0, 3780.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(3779.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(3780.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3781");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3781');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3782.0, 3783.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(3782.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(3783.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3784");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3784');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3785.0, 3786.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(3785.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(3786.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3787");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3787');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3788.0, 3789.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(3788.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(3789.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3790");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3790');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3791.0, 3792.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(3791.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(3792.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3793");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3793');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3802");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3802');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(233, 234, 235, 236), Color.FromArgb(237, 238, 239, 240) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled3811");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3811');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3812.0, 3813.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(3812.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(3813.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3814");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3814');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3823");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3823');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3832");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3832');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3833, 3834), new Rectangular(3835, 3836) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3833, 3834));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3835, 3836));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3837");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3837');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(13, 14, 15, 16), Color.FromArgb(17, 18, 19, 20) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(18, 19, 20, 17));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3846");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3846');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(22, 23, 24, 25), Color.FromArgb(26, 27, 28, 29) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3855");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3855');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(31, 32, 33, 34), Color.FromArgb(35, 36, 37, 38) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(32, 33, 34, 31));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3864");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3864');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(40, 41, 42, 43), Color.FromArgb(44, 45, 46, 47) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.16078431372549, 0.164705882352941, 0.168627450980392, 0.156862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3873");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3873');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3874.0, 3875.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(3874.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(3875.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3876");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3876');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3877, 3878), new Rectangular(3879, 3880) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3877, 3878));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3879, 3880));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3881");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3881');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3882, 3883), new Rectangular(3884, 3885) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3882, 3883));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3884, 3885));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3886");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3886');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3887, 3888), new Rectangular(3889, 3890) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3887, 3888));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3889, 3890));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3891");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3891');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(67, 68, 69, 70), Color.FromArgb(71, 72, 73, 74) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(68, 69, 70, 67));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(72, 73, 74, 71));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3900");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3900');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(76, 77, 78, 79), Color.FromArgb(80, 81, 82, 83) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3909");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3909');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(85, 86, 87, 88), Color.FromArgb(89, 90, 91, 92) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(86, 87, 88, 85));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3918");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3918');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(94, 95, 96, 97), Color.FromArgb(98, 99, 100, 101) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3927");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3927');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3928.0, 3929.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(3928.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(3929.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3930");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3930');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3931.0, 3932.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(3931.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(3932.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3933");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3933');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3942");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3942');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(118, 119, 120, 121), Color.FromArgb(122, 123, 124, 125) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3951");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3951');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3952, 3953), new Rectangular(3954, 3955) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3952, 3953));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3954, 3955));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3956");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3956');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(132, 133, 134, 135), Color.FromArgb(136, 137, 138, 139) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3965");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3965');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(141, 142, 143, 144), Color.FromArgb(145, 146, 147, 148) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3974");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3974');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(150, 151, 152, 153), Color.FromArgb(154, 155, 156, 157) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3983");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3983');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(159, 160, 161, 162), Color.FromArgb(163, 164, 165, 166) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3992");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3992');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 3993.0, 3994.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(3993.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(3994.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial3995");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3995');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(3996, 3997), new Rectangular(3998, 3999) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3996, 3997));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3998, 3999));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4000");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4000');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4001, 4002), new Rectangular(4003, 4004) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4001, 4002));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4003, 4004));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4005");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4005');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4006, 4007), new Rectangular(4008, 4009) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4006, 4007));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4008, 4009));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4010");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4010');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(186, 187, 188, 189), Color.FromArgb(190, 191, 192, 193) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(191, 192, 193, 190));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4019");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4019');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(195, 196, 197, 198), Color.FromArgb(199, 200, 201, 202) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4028");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4028');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(204, 205, 206, 207), Color.FromArgb(208, 209, 210, 211) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4037");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4037');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(213, 214, 215, 216), Color.FromArgb(217, 218, 219, 220) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4046");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4046');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4047.0, 4048.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4047.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4048.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4049");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4049');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4050.0, 4051.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4050.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4051.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4052");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4052');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(228, 229, 230, 231), Color.FromArgb(232, 233, 234, 235) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4061");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4061');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(237, 238, 239, 240), Color.FromArgb(241, 242, 243, 244) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.949019607843137, 0.952941176470588, 0.956862745098039, 0.945098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4070");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4070');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4071, 4072), new Rectangular(4073, 4074) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4071, 4072));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4073, 4074));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4075");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4075');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4084");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4084');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4093");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4093');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(14, 15, 16, 17), Color.FromArgb(18, 19, 20, 21) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4102");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4102');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4111");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4111');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4112.0, 4113.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4112.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4113.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4114");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4114');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4115, 4116), new Rectangular(4117, 4118) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4115, 4116));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4117, 4118));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4119");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4119');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4120, 4121), new Rectangular(4122, 4123) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4120, 4121));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4122, 4123));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4124");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4124');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4125, 4126), new Rectangular(4127, 4128) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4125, 4126));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4127, 4128));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4129");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4129');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(50, 51, 52, 53), Color.FromArgb(54, 55, 56, 57) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(55, 56, 57, 54));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4138");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4138');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4147");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4147');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4156");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4156');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4165");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4165');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4166.0, 4167.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4166.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4167.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4168");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4168');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4169.0, 4170.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4169.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4170.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4171");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4171');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4180");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4180');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4189");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4189');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4190, 4191), new Rectangular(4192, 4193) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4190, 4191));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4192, 4193));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4194");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4194');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(115, 116, 117, 118), Color.FromArgb(119, 120, 121, 122) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(116, 117, 118, 115));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(120, 121, 122, 119));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4203");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4203');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(124, 125, 126, 127), Color.FromArgb(128, 129, 130, 131) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4212");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4212');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(133, 134, 135, 136), Color.FromArgb(137, 138, 139, 140) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4221");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4221');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(142, 143, 144, 145), Color.FromArgb(146, 147, 148, 149) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4230");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4230');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4231.0, 4232.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4231.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4232.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4233");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4233');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4234, 4235), new Rectangular(4236, 4237) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4234, 4235));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4236, 4237));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4238");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4238');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4239, 4240), new Rectangular(4241, 4242) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4239, 4240));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4241, 4242));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4243");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4243');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4244, 4245), new Rectangular(4246, 4247) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4244, 4245));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4246, 4247));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4248");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4248');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(169, 170, 171, 172), Color.FromArgb(173, 174, 175, 176) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4257");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4257');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(178, 179, 180, 181), Color.FromArgb(182, 183, 184, 185) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.717647058823529, 0.72156862745098, 0.725490196078431, 0.713725490196078), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4266");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4266');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4275");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4275');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(196, 197, 198, 199), Color.FromArgb(200, 201, 202, 203) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4284");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4284');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4285.0, 4286.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4285.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4286.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4287");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4287');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4288.0, 4289.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4288.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4289.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4290");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4290');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(211, 212, 213, 214), Color.FromArgb(215, 216, 217, 218) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4299");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4299');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(220, 221, 222, 223), Color.FromArgb(224, 225, 226, 227) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.866666666666667, 0.870588235294118, 0.874509803921569, 0.862745098039216), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4308");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4308');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4309, 4310), new Rectangular(4311, 4312) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4309, 4310));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4311, 4312));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4313");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4313');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(234, 235, 236, 237), Color.FromArgb(238, 239, 240, 241) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(235, 236, 237, 234));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4322");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4322');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(243, 244, 245, 246), Color.FromArgb(247, 248, 249, 250) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.972549019607843, 0.976470588235294, 0.980392156862745, 0.968627450980392), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4331");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4331');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(252, 253, 254, 0), Color.FromArgb(1, 2, 3, 4) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4340");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4340');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4349");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4349');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4350.0, 4351.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4350.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4351.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4352");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4352');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4353, 4354), new Rectangular(4355, 4356) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4353, 4354));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4355, 4356));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4357");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4357');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4358, 4359), new Rectangular(4360, 4361) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4358, 4359));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4360, 4361));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4362");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4362');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4363, 4364), new Rectangular(4365, 4366) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4363, 4364));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4365, 4366));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4367");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4367');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(33, 34, 35, 36), Color.FromArgb(37, 38, 39, 40) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(34, 35, 36, 33));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(38, 39, 40, 37));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4376");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4376');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(42, 43, 44, 45), Color.FromArgb(46, 47, 48, 49) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.184313725490196, 0.188235294117647, 0.192156862745098, 0.180392156862745), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4385");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4385');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(51, 52, 53, 54), Color.FromArgb(55, 56, 57, 58) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4394");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4394');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(60, 61, 62, 63), Color.FromArgb(64, 65, 66, 67) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.254901960784314, 0.258823529411765, 0.262745098039216, 0.250980392156863), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4403");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4403');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4404.0, 4405.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(4404.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(4405.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4406");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4406');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4407.0, 4408.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(4407.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(4408.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4409");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4409');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(75, 76, 77, 78), Color.FromArgb(79, 80, 81, 82) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4418");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4418');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(84, 85, 86, 87), Color.FromArgb(88, 89, 90, 91) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.333333333333333, 0.337254901960784, 0.341176470588235, 0.329411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4427");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4427');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenConicSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4428.0, 4429.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(4428.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(4429.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4430");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4430');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4431.0, 4432.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(4431.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(4432.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4433");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4433');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(99, 100, 101, 102), Color.FromArgb(103, 104, 105, 106) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(100, 101, 102, 99));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4442");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4442');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(108, 109, 110, 111), Color.FromArgb(112, 113, 114, 115) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled4451");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4451');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4452.0, 4453.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(4452.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(4453.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4454");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4454');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(120, 121, 122, 123), Color.FromArgb(124, 125, 126, 127) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4463");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4463');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(129, 130, 131, 132), Color.FromArgb(133, 134, 135, 136) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4472");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4472');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4473, 4474), new Rectangular(4475, 4476) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4473, 4474));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4475, 4476));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4477");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4477');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4486");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4486');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(152, 153, 154, 155), Color.FromArgb(156, 157, 158, 159) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4495");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4495');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(161, 162, 163, 164), Color.FromArgb(165, 166, 167, 168) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(162, 163, 164, 161));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4504");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4504');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(170, 171, 172, 173), Color.FromArgb(174, 175, 176, 177) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4513");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4513');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4514.0, 4515.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4514.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4515.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4516");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4516');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4517, 4518), new Rectangular(4519, 4520) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4517, 4518));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4519, 4520));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4521");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4521');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4522, 4523), new Rectangular(4524, 4525) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4522, 4523));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4524, 4525));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4526");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4526');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4527, 4528), new Rectangular(4529, 4530) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4527, 4528));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4529, 4530));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4531");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4531');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(198, 199, 200, 197));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4540");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4540');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4549");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4549');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4558");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4558');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4567");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4567');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4568.0, 4569.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4568.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4569.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4570");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4570');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4571.0, 4572.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4571.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4572.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4573");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4573');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4582");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4582');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(248, 249, 250, 251), Color.FromArgb(252, 253, 254, 0) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4591");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4591');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4592, 4593), new Rectangular(4594, 4595) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4592, 4593));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4594, 4595));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4596");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4596');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4605");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4605');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(16, 17, 18, 19), Color.FromArgb(20, 21, 22, 23) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4614");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4614');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(25, 26, 27, 28), Color.FromArgb(29, 30, 31, 32) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 27, 28, 25));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(30, 31, 32, 29));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4623");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4623');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(34, 35, 36, 37), Color.FromArgb(38, 39, 40, 41) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4632");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4632');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4633.0, 4634.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4633.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4634.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4635");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4635');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4636, 4637), new Rectangular(4638, 4639) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4636, 4637));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4638, 4639));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4640");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4640');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4641, 4642), new Rectangular(4643, 4644) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4641, 4642));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4643, 4644));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4645");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4645');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4646, 4647), new Rectangular(4648, 4649) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4646, 4647));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4648, 4649));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4650");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4650');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(61, 62, 63, 64), Color.FromArgb(65, 66, 67, 68) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(66, 67, 68, 65));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4659");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4659');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4668");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4668');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4677");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4677');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(88, 89, 90, 91), Color.FromArgb(92, 93, 94, 95) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4686");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4686');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4687.0, 4688.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4687.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4688.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4689");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4689');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4690.0, 4691.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4690.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4691.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4692");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4692');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4701");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4701');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4710");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4710');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4711, 4712), new Rectangular(4713, 4714) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4711, 4712));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4713, 4714));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4715");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4715');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4724");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4724');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4733");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4733');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(144, 145, 146, 147), Color.FromArgb(148, 149, 150, 151) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4742");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4742');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(153, 154, 155, 156), Color.FromArgb(157, 158, 159, 160) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4751");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4751');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4752.0, 4753.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4752.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4753.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4754");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4754');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4755, 4756), new Rectangular(4757, 4758) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4755, 4756));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4757, 4758));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4759");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4759');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4760, 4761), new Rectangular(4762, 4763) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4760, 4761));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4762, 4763));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4764");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4764');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4765, 4766), new Rectangular(4767, 4768) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4765, 4766));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4767, 4768));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4769");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4769');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4778");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4778');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4787");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4787');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4796");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4796');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4805");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4805');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4806.0, 4807.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4806.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4807.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4808");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4808');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4809.0, 4810.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4809.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4810.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4811");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4811');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4820");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4820');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4829");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4829');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4830, 4831), new Rectangular(4832, 4833) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4830, 4831));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4832, 4833));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4834");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4834');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4843");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4843');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4852");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4852');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4861");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4861');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(17, 18, 19, 20), Color.FromArgb(21, 22, 23, 24) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4870");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4870');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4871.0, 4872.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4871.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4872.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4873");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4873');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4874, 4875), new Rectangular(4876, 4877) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4874, 4875));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4876, 4877));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4878");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4878');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4879, 4880), new Rectangular(4881, 4882) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4879, 4880));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4881, 4882));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4883");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4883');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4884, 4885), new Rectangular(4886, 4887) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4884, 4885));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4886, 4887));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4888");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4888');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4897");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4897');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(53, 54, 55, 56), Color.FromArgb(57, 58, 59, 60) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4906");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4906');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(62, 63, 64, 65), Color.FromArgb(66, 67, 68, 69) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(63, 64, 65, 62));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4915");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4915');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(71, 72, 73, 74), Color.FromArgb(75, 76, 77, 78) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4924");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4924');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4925.0, 4926.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4925.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4926.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4927");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4927');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4928.0, 4929.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4928.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4929.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4930");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4930');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4939");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4939');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4948");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4948');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4949, 4950), new Rectangular(4951, 4952) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4949, 4950));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4951, 4952));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4953");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4953');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4962");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4962');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(118, 119, 120, 121), Color.FromArgb(122, 123, 124, 125) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4971");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4971');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(127, 128, 129, 130), Color.FromArgb(131, 132, 133, 134) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(132, 133, 134, 131));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4980");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4980');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(136, 137, 138, 139), Color.FromArgb(140, 141, 142, 143) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.537254901960784, 0.541176470588235, 0.545098039215686, 0.533333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.552941176470588, 0.556862745098039, 0.56078431372549, 0.549019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4989");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4989');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 4990.0, 4991.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4990.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4991.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4992");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4992');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4993, 4994), new Rectangular(4995, 4996) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4993, 4994));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4995, 4996));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial4997");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4997');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(4998, 4999), new Rectangular(5000, 5001) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4998, 4999));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5000, 5001));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5002");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5002');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5003, 5004), new Rectangular(5005, 5006) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5003, 5004));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5005, 5006));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5007");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5007');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(163, 164, 165, 166), Color.FromArgb(167, 168, 169, 170) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5016");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5016');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(172, 173, 174, 175), Color.FromArgb(176, 177, 178, 179) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.67843137254902, 0.682352941176471, 0.686274509803922, 0.674509803921569), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5025");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5025');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(181, 182, 183, 184), Color.FromArgb(185, 186, 187, 188) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5034");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5034');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(190, 191, 192, 193), Color.FromArgb(194, 195, 196, 197) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5043");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5043');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5044.0, 5045.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5044.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5045.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5046");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5046');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5047.0, 5048.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5047.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5048.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5049");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5049');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5058");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5058');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(214, 215, 216, 217), Color.FromArgb(218, 219, 220, 221) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5067");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5067');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenCustomPatternSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5068.0, 5069.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(5068.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(5069.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5070");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5070');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5071.0, 5072.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(5071.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(5072.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5073");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5073');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5074.0, 5075.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(5074.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(5075.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5076");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5076');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5077.0, 5078.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(5077.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(5078.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5079");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5079');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(235, 236, 237, 238), Color.FromArgb(239, 240, 241, 242) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5088");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5088');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(244, 245, 246, 247), Color.FromArgb(248, 249, 250, 251) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.964705882352941, 0.968627450980392, 0.956862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5097");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5097');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5098.0, 5099.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(5098.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(5099.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5100");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5100');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(1, 2, 3, 4), Color.FromArgb(5, 6, 7, 8) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5109");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5109');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(10, 11, 12, 13), Color.FromArgb(14, 15, 16, 17) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5118");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5118');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5119, 5120), new Rectangular(5121, 5122) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5119, 5120));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5121, 5122));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5123");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5123');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(24, 25, 26, 27), Color.FromArgb(28, 29, 30, 31) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5132");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5132');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(33, 34, 35, 36), Color.FromArgb(37, 38, 39, 40) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5141");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5141');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(42, 43, 44, 45), Color.FromArgb(46, 47, 48, 49) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5150");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5150');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(51, 52, 53, 54), Color.FromArgb(55, 56, 57, 58) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5159");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5159');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5160.0, 5161.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5160.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5161.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5162");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5162');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5163, 5164), new Rectangular(5165, 5166) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5163, 5164));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5165, 5166));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5167");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5167');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5168, 5169), new Rectangular(5170, 5171) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5168, 5169));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5170, 5171));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5172");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5172');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5173, 5174), new Rectangular(5175, 5176) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5173, 5174));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5175, 5176));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5177");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5177');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(78, 79, 80, 81), Color.FromArgb(82, 83, 84, 85) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5186");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5186');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(87, 88, 89, 90), Color.FromArgb(91, 92, 93, 94) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5195");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5195');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(96, 97, 98, 99), Color.FromArgb(100, 101, 102, 103) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5204");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5204');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(105, 106, 107, 108), Color.FromArgb(109, 110, 111, 112) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5213");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5213');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5214.0, 5215.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5214.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5215.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5216");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5216');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5217.0, 5218.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5217.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5218.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5219");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5219');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(120, 121, 122, 123), Color.FromArgb(124, 125, 126, 127) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5228");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5228');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(129, 130, 131, 132), Color.FromArgb(133, 134, 135, 136) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5237");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5237');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5238, 5239), new Rectangular(5240, 5241) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5238, 5239));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5240, 5241));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5242");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5242');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5251");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5251');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(152, 153, 154, 155), Color.FromArgb(156, 157, 158, 159) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5260");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5260');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(161, 162, 163, 164), Color.FromArgb(165, 166, 167, 168) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(162, 163, 164, 161));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5269");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5269');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(170, 171, 172, 173), Color.FromArgb(174, 175, 176, 177) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5278");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5278');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5279.0, 5280.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5279.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5280.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5281");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5281');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5282, 5283), new Rectangular(5284, 5285) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5282, 5283));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5284, 5285));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5286");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5286');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5287, 5288), new Rectangular(5289, 5290) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5287, 5288));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5289, 5290));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5291");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5291');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5292, 5293), new Rectangular(5294, 5295) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5292, 5293));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5294, 5295));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5296");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5296');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(198, 199, 200, 197));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5305");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5305');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5314");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5314');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5323");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5323');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5332");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5332');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5333.0, 5334.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5333.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5334.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5335");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5335');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5336.0, 5337.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5336.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5337.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5338");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5338');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5347");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5347');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(248, 249, 250, 251), Color.FromArgb(252, 253, 254, 0) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5356");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5356');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5357, 5358), new Rectangular(5359, 5360) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5357, 5358));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5359, 5360));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5361");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5361');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5370");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5370');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(16, 17, 18, 19), Color.FromArgb(20, 21, 22, 23) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5379");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5379');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(25, 26, 27, 28), Color.FromArgb(29, 30, 31, 32) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 27, 28, 25));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(30, 31, 32, 29));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5388");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5388');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(34, 35, 36, 37), Color.FromArgb(38, 39, 40, 41) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5397");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5397');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5398.0, 5399.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5398.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5399.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5400");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5400');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5401, 5402), new Rectangular(5403, 5404) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5401, 5402));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5403, 5404));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5405");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5405');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5406, 5407), new Rectangular(5408, 5409) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5406, 5407));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5408, 5409));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5410");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5410');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5411, 5412), new Rectangular(5413, 5414) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5411, 5412));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5413, 5414));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5415");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5415');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(61, 62, 63, 64), Color.FromArgb(65, 66, 67, 68) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(66, 67, 68, 65));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5424");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5424');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(70, 71, 72, 73), Color.FromArgb(74, 75, 76, 77) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5433");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5433');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5442");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5442');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(88, 89, 90, 91), Color.FromArgb(92, 93, 94, 95) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5451");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5451');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5452.0, 5453.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5452.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5453.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5454");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5454');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5455.0, 5456.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5455.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5456.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5457");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5457');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(103, 104, 105, 106), Color.FromArgb(107, 108, 109, 110) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5466");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5466');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5475");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5475');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5476, 5477), new Rectangular(5478, 5479) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5476, 5477));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5478, 5479));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5480");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5480');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5489");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5489');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5498");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5498');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(144, 145, 146, 147), Color.FromArgb(148, 149, 150, 151) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5507");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5507');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(153, 154, 155, 156), Color.FromArgb(157, 158, 159, 160) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5516");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5516');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5517.0, 5518.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5517.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5518.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5519");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5519');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5520, 5521), new Rectangular(5522, 5523) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5520, 5521));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5522, 5523));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5524");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5524');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5525, 5526), new Rectangular(5527, 5528) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5525, 5526));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5527, 5528));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5529");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5529');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5530, 5531), new Rectangular(5532, 5533) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5530, 5531));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5532, 5533));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5534");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5534');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5543");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5543');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5552");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5552');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5561");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5561');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5570");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5570');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5571.0, 5572.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5571.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5572.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5573");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5573');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5574.0, 5575.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5574.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5575.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5576");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5576');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5585");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5585');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5594");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5594');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5595, 5596), new Rectangular(5597, 5598) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5595, 5596));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5597, 5598));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5599");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5599');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(250, 251, 252, 249));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5608");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5608');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5617");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5617');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5626");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5626');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(17, 18, 19, 20), Color.FromArgb(21, 22, 23, 24) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5635");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5635');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5636.0, 5637.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5636.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5637.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5638");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5638');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5639, 5640), new Rectangular(5641, 5642) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5639, 5640));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5641, 5642));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5643");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5643');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5644, 5645), new Rectangular(5646, 5647) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5644, 5645));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5646, 5647));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5648");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5648');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5649, 5650), new Rectangular(5651, 5652) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5649, 5650));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5651, 5652));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5653");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5653');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5662");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5662');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(53, 54, 55, 56), Color.FromArgb(57, 58, 59, 60) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5671");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5671');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(62, 63, 64, 65), Color.FromArgb(66, 67, 68, 69) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(63, 64, 65, 62));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5680");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5680');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(71, 72, 73, 74), Color.FromArgb(75, 76, 77, 78) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5689");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5689');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5690.0, 5691.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5690.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5691.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5692");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5692');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5693.0, 5694.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5693.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5694.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5695");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5695');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5704");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5704');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5713");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5713');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenRectangularSensorProperty())
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5714.0, 5715.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(5714.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(5715.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5716");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5716');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5717.0, 5718.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(documentStartDate)).toEqual(5717.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(documentStopDate)).toEqual(5718.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5719");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5719');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(111, 112, 113, 110));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5728");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5728');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5737");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5737');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5738, 5739), new Rectangular(5740, 5741) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5738, 5739));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5740, 5741));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5742");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5742');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(133, 134, 135, 136), Color.FromArgb(137, 138, 139, 140) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5751");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5751');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenImageProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(142, 143, 144, 145), Color.FromArgb(146, 147, 148, 149) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5760");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5760');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(151, 152, 153, 154), Color.FromArgb(155, 156, 157, 158) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5769");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5769');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(160, 161, 162, 163), Color.FromArgb(164, 165, 166, 167) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.631372549019608, 0.635294117647059, 0.63921568627451, 0.627450980392157), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5778");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5778');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5779.0, 5780.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(5779.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(5780.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5781");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5781');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5782, 5783), new Rectangular(5784, 5785) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5782, 5783));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5784, 5785));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5786");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5786');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5787, 5788), new Rectangular(5789, 5790) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5787, 5788));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5789, 5790));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5791");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5791');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenGridProperty())
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new [] { documentStartDate, documentStopDate, }, new [] { new Rectangular(5792, 5793), new Rectangular(5794, 5795) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5792, 5793));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5794, 5795));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5796");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5796');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5805");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5805');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(196, 197, 198, 199), Color.FromArgb(200, 201, 202, 203) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5814");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5814');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5823");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5823');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(214, 215, 216, 217), Color.FromArgb(218, 219, 220, 221) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5832");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5832');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5833.0, 5834.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(5833.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(5834.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampledmaterial5835");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5835');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenStripeProperty())
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5836.0, 5837.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(5836.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(5837.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5838");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5838');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(229, 230, 231, 232), Color.FromArgb(233, 234, 235, 236) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5847");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5847');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(238, 239, 240, 241), Color.FromArgb(242, 243, 244, 245) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5856");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5856');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5857.0, 5858.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(5857.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(5858.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5859");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5859');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenFanProperty())
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5860.0, 5861.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(5860.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(5861.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5862");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5862');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(253, 254, 0, 1), Color.FromArgb(2, 3, 4, 5) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(254, 0, 1, 253));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5871");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5871');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgbaf(new [] { documentStartDate, documentStopDate, }, new [] { Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-6);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-6);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5880");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5880');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteSpherical(new [] { documentStartDate, documentStopDate, }, new [] { new Spherical(5881, 5882, 5883), new Spherical(5884, 5885, 5886) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Spherical(5881, 5882, 5883));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Spherical(5884, 5885, 5886));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5887");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5887');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteUnitSpherical(new [] { documentStartDate, documentStopDate, }, new [] { new UnitSpherical(5888, 5889), new UnitSpherical(5890, 5891) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Spherical(5888, 5889));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Spherical(5890, 5891));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5892");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5892');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new Cartesian(5893, 5894, 5895), new Cartesian(5896, 5897, 5898) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(5893, 5894, 5895));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(5896, 5897, 5898));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5899");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5899');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteUnitCartesian(new [] { documentStartDate, documentStopDate, }, new [] { new UnitCartesian(0.577252424268969, 0.577350263662913, 0.577448103056857), new UnitCartesian(0.577252473989723, 0.577350263668528, 0.577448053347334) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(0.577252424268969, 0.577350263662913, 0.577448103056857));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(0.577252473989723, 0.577350263668528, 0.577448053347334));");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5906");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5906');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5907.0, 5908.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(documentStartDate)).toEqual(5907.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(documentStopDate)).toEqual(5908.0);");
                    }
                }
                using (var packet = writer.OpenPacket(output))
                {
                    packet.WriteId("sampled5909");
                    assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5909');");
                    assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                    using (var w = packet.OpenVectorProperty())
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteNumber(new [] { documentStartDate, documentStopDate, }, new [] { 5910.0, 5911.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(5910.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(5911.0);");
                    }
                }
                output.WriteEndSequence();
                assertionsStreamWriter.WriteLine("});");
            }
        }
    }
}

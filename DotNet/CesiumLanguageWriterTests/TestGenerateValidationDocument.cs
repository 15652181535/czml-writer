// This file was generated automatically by GenerateFromSchema.  Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer

using System.Collections.Generic;
using System.Drawing;
using System.IO;
using CesiumLanguageWriter;
using NUnit.Framework;

namespace CesiumLanguageWriterTests
{
    [TestFixture]
    public class TestGenerateValidationDocument
    {
        private readonly JulianDate m_documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0).ToJulianDate();
        private readonly JulianDate m_documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0).ToJulianDate();
        [Test]
        public void GenerateValidationDocument()
        {
            using (var streamWriter = new StreamWriter("ValidationDocument.czml"))
            using (var assertionsStreamWriter = new StreamWriter("ValidationDocumentAssertions.js"))
            {
                assertionsStreamWriter.WriteLine("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
                assertionsStreamWriter.WriteLine("    /*jshint -W030, -W120 */");
                assertionsStreamWriter.WriteLine("    var e;");
                assertionsStreamWriter.WriteLine("    var checkExtensions = false;");
                assertionsStreamWriter.WriteLine("    var date;");
                assertionsStreamWriter.WriteLine("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
                assertionsStreamWriter.WriteLine("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
                var output = new CesiumOutputStream(streamWriter) { PrettyFormatting = true };
                var writer = new CesiumStreamWriter();
                output.WriteStartSequence();
                WriteClock(writer, assertionsStreamWriter, output);
                WriteConstantValues(writer, assertionsStreamWriter, output);
                WriteReferenceValues(writer, assertionsStreamWriter, output);
                WriteSampledValues(writer, assertionsStreamWriter, output);
                output.WriteEndSequence();
                assertionsStreamWriter.WriteLine("});");
            }
        }
        private void WriteClock(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("document");
                packet.WriteName("ValidationDocument");
                packet.WriteVersion("1.0");
                using (var clock = packet.OpenClockProperty())
                {
                    clock.WriteInterval(m_documentStartDate, m_documentStopDate);
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
                    clock.WriteCurrentTime(m_documentStartDate);
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
                    clock.WriteMultiplier(1.0);
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.multiplier).toEqual(1.0);");
                    clock.WriteRange(ClockRange.Unbounded);
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
                    clock.WriteStep(ClockStep.SystemClockMultiplier);
                    assertionsStreamWriter.WriteLine("    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
                }
            }
        }
        private void WriteConstantValues(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("Constant");
                assertionsStreamWriter.WriteLine("    var constant = e = dataSource.entities.getById('Constant');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                assertionsStreamWriter.WriteLine("    date = JulianDate.now();");
                using (var w = packet.OpenDescriptionProperty())
                {
                    w.WriteString("string0");
                    assertionsStreamWriter.WriteLine("    expect(e.description.getValue(date)).toEqual('string0');");
                }
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(1, 2, 3));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteUnitQuaternion(new UnitQuaternion(0.356348322549899, 0.445435403187374, 0.534522483824849, 0.623609564462324));
                    assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.445435403187374, 0.534522483824849, 0.623609564462324, 0.356348322549899), 1e-14);");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteCartesian(new Cartesian(8, 9, 10));
                    assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(8, 9, 10));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenImageProperty())
                    {
                        w2.WriteUri("http://example.com/11", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual('http://example.com/11');");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(12.0);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(12.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new Rectangular(13, 14));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(13, 14));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new Cartesian(15, 16, 17));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(15, 16, 17));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(18, 19, 20, 21));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(22.0);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(22.0);");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteCartesian(new Cartesian(23, 24, 25));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(new Cartesian3(23, 24, 25));");
                    }
                    using (var w2 = w.OpenSizeInMetersProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(26.0);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(26.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(27.0);
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(27.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(28, 29, 30, 31));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(28, 29, 30, 31));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(32, 33, 34, 35));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(32, 33, 34, 35));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(36, 37, 38, 39));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(36, 37, 38, 39));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteBoundingRectangle(BoundingRectangle.FromWidthHeight(40, 41, 42, 43));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(40, 41, 42, 43));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteCartesian(new Cartesian(44, 45, 46));
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(44, 45, 46));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(47, 48, 49, 50));
                                assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(51, 52, 53, 54));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(55.0);
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(55.0);");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(new List<Cartesian> { new Cartesian(56, 57, 58), new Cartesian(59, 60, 61) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(56, 57, 58), new Cartesian3(59, 60, 61) ]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(62.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(62.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(63.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(63.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(64.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(64.0);");
                    }
                    using (var w2 = w.OpenCornerTypeProperty())
                    {
                        w2.WriteCornerType(CesiumCornerType.Beveled);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(65.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(65.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(66, 67, 68, 69));
                                assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(70, 71, 72, 73));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(74.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(74.0);");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(75.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(75.0);");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteNumber(76.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(76.0);");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteNumber(77.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(77.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(78, 79, 80, 81));
                                assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(86.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(86.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(87.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(87.0);");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteNumber(88.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(88.0);");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteNumber(89.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(89.0);");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteNumber(90.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(90.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(91.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(91.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(92.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(92.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(93.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(93.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(94.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(94.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(95.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(95.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(96, 97, 98, 99));
                                assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(100, 101, 102, 103));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(104.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(104.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(105.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(105.0);");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteCartesian(new Cartesian(106, 107, 108));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(106, 107, 108));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(109, 110, 111, 112));
                                assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(113, 114, 115, 116));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(117.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(117.0);");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteNumber(118.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(118.0);");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteNumber(119.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(119.0);");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteNumber(120.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(120.0);");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenTextProperty())
                    {
                        w2.WriteString("string121");
                        assertionsStreamWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual('string121');");
                    }
                    using (var w2 = w.OpenFontProperty())
                    {
                        w2.WriteFont("22px sans-serif");
                        assertionsStreamWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual('22px sans-serif');");
                    }
                    using (var w2 = w.OpenStyleProperty())
                    {
                        w2.WriteLabelStyle(CesiumLabelStyle.FillAndOutline);
                        assertionsStreamWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(123.0);
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(123.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new Rectangular(124, 125));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(124, 125));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new Cartesian(126, 127, 128));
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(126, 127, 128));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteHorizontalOrigin(CesiumHorizontalOrigin.Left);
                        assertionsStreamWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteVerticalOrigin(CesiumVerticalOrigin.Bottom);
                        assertionsStreamWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(129, 130, 131, 132));
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(130, 131, 132, 129));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(133, 134, 135, 136));
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(134, 135, 136, 133));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(137.0);
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(137.0);");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(138, 139, 140, 141));
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(138, 139, 140, 141));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(142, 143, 144, 145));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(142, 143, 144, 145));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenGltfProperty())
                    {
                        w2.WriteUri("http://example.com/146", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual('http://example.com/146');");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(147.0);
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(147.0);");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteNumber(148.0);
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(148.0);");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteNumber(149.0);
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(149.0);");
                    }
                    using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenRunAnimationsProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    {
                        using (var a = w2.OpenNodeTransformationProperty("prop"))
                        {
                            using (var w3 = a.OpenTranslationProperty())
                            {
                                w3.WriteCartesian(new Cartesian(150, 151, 152));
                                assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop.translation.getValue(date)).toEqual(new Cartesian3(150, 151, 152));");
                            }
                            using (var w3 = a.OpenRotationProperty())
                            {
                                w3.WriteUnitQuaternion(new UnitQuaternion(0.495132667070277, 0.498368828292958, 0.50160498951564, 0.504841150738322));
                                assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.498368828292958, 0.50160498951564, 0.504841150738322, 0.495132667070277), 1e-14);");
                            }
                            using (var w3 = a.OpenScaleProperty())
                            {
                                w3.WriteCartesian(new Cartesian(157, 158, 159));
                                assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.prop.scale.getValue(date)).toEqual(new Cartesian3(157, 158, 159));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(160.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(160.0);");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteNumber(161.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(161.0);");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteNumber(162.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(162.0);");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteNumber(163.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(163.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(164, 165, 166, 167));
                                assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(165, 166, 167, 164));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteNumber(168.0);
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(168.0);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(169, 170, 171, 172));
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(173, 174, 175, 176));
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(177.0);
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(177.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(178, 179, 180, 181));
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(178, 179, 180, 181));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new NearFarScalar(182, 183, 184, 185));
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(182, 183, 184, 185));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(new List<Cartesian> { new Cartesian(186, 187, 188), new Cartesian(189, 190, 191) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ new Cartesian3(186, 187, 188), new Cartesian3(189, 190, 191) ]);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(192.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(192.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(193.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(193.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(194.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(194.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(195.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(195.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(196, 197, 198, 199));
                                assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(197, 198, 199, 196));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(200, 201, 202, 203));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(201, 202, 203, 200));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(204.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(204.0);");
                    }
                    using (var w2 = w.OpenPerPositionHeightProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(new List<Cartesian> { new Cartesian(205, 206, 207), new Cartesian(208, 209, 210) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(205, 206, 207), new Cartesian3(208, 209, 210) ]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(211.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(211.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(212.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(212.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(213, 214, 215, 216));
                                assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(214, 215, 216, 213));");
                            }
                        }
                    }
                    using (var w2 = w.OpenFollowSurfaceProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsen(new CartographicExtent(0.230106902304275, 1.23010690230428, 0.659310575509378, 0.0885142487144819));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(0.230106902304275, 1.23010690230428, 0.659310575509378, 0.0885142487144819));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(221.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(221.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(222.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(222.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(223.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(223.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(224.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(224.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(225.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(225.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(226, 227, 228, 229));
                                assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(230, 231, 232, 233));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(231, 232, 233, 230));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(234.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(234.0);");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(true);");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteCartesian(new List<Cartesian> { new Cartesian(235, 236, 237), new Cartesian(238, 239, 240) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(235, 236, 237), new Cartesian3(238, 239, 240) ]);");
                    }
                    using (var w2 = w.OpenMinimumHeightsProperty())
                    {
                        w2.WriteArray(new List<double> { 241, 242 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 241, 242 ]);");
                    }
                    using (var w2 = w.OpenMaximumHeightsProperty())
                    {
                        w2.WriteArray(new List<double> { 243, 244 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 243, 244 ]);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(245.0);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(245.0);");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                                assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(250, 251, 252, 253));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(254.0);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(254.0);");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteNumber(255.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(255.0);");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteNumber(256.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(256.0);");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteNumber(257.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(257.0);");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteNumber(258.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(258.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(259.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(date)).toEqual(259.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(5, 6, 7, 8));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(264.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(264.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(10, 11, 12, 13));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(14, 15, 16, 17));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(18, 19, 20, 21));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(22, 23, 24, 25));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(23, 24, 25, 22));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(26, 27, 28, 29));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(30, 31, 32, 33));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(289.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(289.0);");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDirectionsProperty())
                    {
                        w2.WriteSpherical(new List<Spherical> { new Spherical(290, 291, 292), new Spherical(293, 294, 295) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(290, 291, 292), new Spherical(293, 294, 295) ]);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(296.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(date)).toEqual(296.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(42, 43, 44, 45));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(301.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(301.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(47, 48, 49, 50));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(51, 52, 53, 54));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(55, 56, 57, 58));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(59, 60, 61, 62));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(60, 61, 62, 59));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(63, 64, 65, 66));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(67, 68, 69, 70));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(326.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(326.0);");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteNumber(327.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(327.0);");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteNumber(328.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(328.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(329.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(date)).toEqual(329.0);");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(75, 76, 77, 78));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(334.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(334.0);");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(80, 81, 82, 83));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(81, 82, 83, 80));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(84, 85, 86, 87));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(88, 89, 90, 91));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(92, 93, 94, 95));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                            }
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WritePortionToDisplay(CesiumSensorVolumePortionToDisplay.BelowEllipsoidHorizon);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(96, 97, 98, 99));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                            }
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(100, 101, 102, 103));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(359.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(359.0);");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenDirectionsProperty())
                    {
                        w2.WriteSpherical(new List<Spherical> { new Spherical(360, 361, 362), new Spherical(363, 364, 365) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(360, 361, 362), new Spherical(363, 364, 365) ]);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(366.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(date)).toEqual(366.0);");
                    }
                    using (var w2 = w.OpenPerDirectionRadiusProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(Color.FromArgb(112, 113, 114, 115));
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                            }
                        }
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.fill.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outline.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(116, 117, 118, 119));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(375.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(date)).toEqual(375.0);");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteNumber(376.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(date)).toEqual(376.0);");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.show.getValue(date)).toEqual(true);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(Color.FromArgb(122, 123, 124, 125));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteSpherical(new Spherical(381, 382, 383));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(381, 382, 383)));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(384.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(date)).toEqual(384.0);");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteNumber(385.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(385.0);");
                    }
                }
            }
            WriteConstantValuesIndividual(writer, assertionsStreamWriter, output);
        }
        private void WriteConstantValuesIndividual(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant386");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant386');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicRadians(new Cartographic(0.584103608455447, 0.0133072816605502, 389));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(Cartesian3.fromRadians(0.584103608455447, 0.0133072816605502, 389));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant390");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant390');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicDegrees(new Cartographic(31, 32, 393));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(Cartesian3.fromDegrees(31, 32, 393));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant394");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant394');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesianVelocity(new Motion<Cartesian>(new Cartesian(395, 396, 397), new Cartesian(398, 399, 400)));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(395, 396, 397));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant401");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant401');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(147, 148, 149, 150));
                    assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant406");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant406');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(152, 153, 154, 155));
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_image");
                assertionsStreamWriter.WriteLine("    var material_box_material_image = e = dataSource.entities.getById('material_box_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/411", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual('http://example.com/411');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(412, 413));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(412, 413));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(159, 160, 161, 162));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(160, 161, 162, 159));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_grid");
                assertionsStreamWriter.WriteLine("    var material_box_material_grid = e = dataSource.entities.getById('material_box_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(163, 164, 165, 166));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(422.0);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(422.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(423, 424));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(423, 424));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(425, 426));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(425, 426));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(427, 428));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(427, 428));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_box_material_stripe = e = dataSource.entities.getById('material_box_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(174, 175, 176, 177));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(175, 176, 177, 174));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(178, 179, 180, 181));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(179, 180, 181, 178));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(437.0);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(437.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(438.0);
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(438.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_image_439");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_box_material_image_439');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(185, 186, 187, 188));
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_grid_444");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_box_material_grid_444');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(190, 191, 192, 193));
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_stripe_449");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_box_material_stripe_449');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(195, 196, 197, 198));
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_box_material_stripe_454");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_box_material_stripe_454');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(200, 201, 202, 203));
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant459");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant459');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(205, 206, 207, 208));
                    assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant464");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant464');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(new List<Cartographic> { new Cartographic(0.0442872687106188, 1.04428726871062, 467), new Cartographic(1.47349094191572, 0.902694615120826, 470) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.0442872687106188, 1.04428726871062, 467), Cartesian3.fromRadians(1.47349094191572, 0.902694615120826, 470) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant471");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant471');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(new List<Cartographic> { new Cartographic(22, 23, 474), new Cartographic(25, 26, 477) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(22, 23, 474), Cartesian3.fromDegrees(25, 26, 477) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant478");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant478');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(224, 225, 226, 227));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_image");
                assertionsStreamWriter.WriteLine("    var material_corridor_material_image = e = dataSource.entities.getById('material_corridor_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/483", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/483');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(484, 485));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(484, 485));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(231, 232, 233, 234));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(232, 233, 234, 231));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_grid");
                assertionsStreamWriter.WriteLine("    var material_corridor_material_grid = e = dataSource.entities.getById('material_corridor_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(235, 236, 237, 238));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(494.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(494.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(495, 496));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(495, 496));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(497, 498));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(497, 498));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(499, 500));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(499, 500));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_corridor_material_stripe = e = dataSource.entities.getById('material_corridor_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(250, 251, 252, 253));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(509.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(509.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(510.0);
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(510.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_image_511");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_corridor_material_image_511');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(2, 3, 4, 5));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_grid_516");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_corridor_material_grid_516');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(7, 8, 9, 10));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_stripe_521");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_corridor_material_stripe_521');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(12, 13, 14, 15));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_corridor_material_stripe_526");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_corridor_material_stripe_526');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(17, 18, 19, 20));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant531");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant531');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(22, 23, 24, 25));
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant536");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant536');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(27, 28, 29, 30));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_image");
                assertionsStreamWriter.WriteLine("    var material_cylinder_material_image = e = dataSource.entities.getById('material_cylinder_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/541", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/541');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(542, 543));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(542, 543));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(34, 35, 36, 37));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_grid");
                assertionsStreamWriter.WriteLine("    var material_cylinder_material_grid = e = dataSource.entities.getById('material_cylinder_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(38, 39, 40, 41));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(552.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(552.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(553, 554));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(553, 554));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(555, 556));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(555, 556));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(557, 558));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(557, 558));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_cylinder_material_stripe = e = dataSource.entities.getById('material_cylinder_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(49, 50, 51, 52));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(53, 54, 55, 56));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(54, 55, 56, 53));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(567.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(567.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(568.0);
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(568.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_image_569");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_cylinder_material_image_569');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(60, 61, 62, 63));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_grid_574");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_cylinder_material_grid_574');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(65, 66, 67, 68));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_stripe_579");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_cylinder_material_stripe_579');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(70, 71, 72, 73));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_cylinder_material_stripe_584");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_cylinder_material_stripe_584');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(75, 76, 77, 78));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant589");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant589');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(80, 81, 82, 83));
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant594");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant594');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(85, 86, 87, 88));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_image");
                assertionsStreamWriter.WriteLine("    var material_ellipse_material_image = e = dataSource.entities.getById('material_ellipse_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/599", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual('http://example.com/599');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(600, 601));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(600, 601));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(92, 93, 94, 95));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_grid");
                assertionsStreamWriter.WriteLine("    var material_ellipse_material_grid = e = dataSource.entities.getById('material_ellipse_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(96, 97, 98, 99));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(610.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(610.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(611, 612));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(611, 612));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(613, 614));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(613, 614));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(615, 616));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(615, 616));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_ellipse_material_stripe = e = dataSource.entities.getById('material_ellipse_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(107, 108, 109, 110));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(111, 112, 113, 114));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(112, 113, 114, 111));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(625.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(625.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(626.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(626.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_image_627");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipse_material_image_627');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(118, 119, 120, 121));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_grid_632");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipse_material_grid_632');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(123, 124, 125, 126));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_stripe_637");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipse_material_stripe_637');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(128, 129, 130, 131));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipse_material_stripe_642");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipse_material_stripe_642');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(133, 134, 135, 136));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant647");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant647');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(138, 139, 140, 141));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant652");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant652');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(143, 144, 145, 146));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_image");
                assertionsStreamWriter.WriteLine("    var material_ellipsoid_material_image = e = dataSource.entities.getById('material_ellipsoid_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/657", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual('http://example.com/657');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(658, 659));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(658, 659));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(150, 151, 152, 153));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_grid");
                assertionsStreamWriter.WriteLine("    var material_ellipsoid_material_grid = e = dataSource.entities.getById('material_ellipsoid_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(154, 155, 156, 157));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(668.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(668.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(669, 670));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(669, 670));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(671, 672));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(671, 672));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(673, 674));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(673, 674));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_ellipsoid_material_stripe = e = dataSource.entities.getById('material_ellipsoid_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(165, 166, 167, 168));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(169, 170, 171, 172));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(683.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(683.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(684.0);
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(684.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_image_685");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipsoid_material_image_685');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(176, 177, 178, 179));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_grid_690");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipsoid_material_grid_690');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(181, 182, 183, 184));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_stripe_695");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipsoid_material_stripe_695');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(186, 187, 188, 189));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_ellipsoid_material_stripe_700");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_ellipsoid_material_stripe_700');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(191, 192, 193, 194));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant705");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant705');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(196, 197, 198, 199));
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant710");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant710');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenFillColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(201, 202, 203, 204));
                    assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant715");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant715');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(206, 207, 208, 209));
                    assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant720");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant720');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(211, 212, 213, 214));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineOutline");
                assertionsStreamWriter.WriteLine("    var material_path_material_polylineOutline = e = dataSource.entities.getById('material_path_material_polylineOutline');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(215, 216, 217, 218));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(219, 220, 221, 222));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(733.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(733.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineArrow");
                assertionsStreamWriter.WriteLine("    var material_path_material_polylineArrow = e = dataSource.entities.getById('material_path_material_polylineArrow');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(224, 225, 226, 227));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineGlow");
                assertionsStreamWriter.WriteLine("    var material_path_material_polylineGlow = e = dataSource.entities.getById('material_path_material_polylineGlow');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(228, 229, 230, 231));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(742.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(742.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_image");
                assertionsStreamWriter.WriteLine("    var material_path_material_image = e = dataSource.entities.getById('material_path_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/743", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual('http://example.com/743');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(744, 745));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(744, 745));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(236, 237, 238, 239));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(237, 238, 239, 236));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_grid");
                assertionsStreamWriter.WriteLine("    var material_path_material_grid = e = dataSource.entities.getById('material_path_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(240, 241, 242, 243));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(241, 242, 243, 240));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(754.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(754.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(755, 756));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(755, 756));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(757, 758));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(757, 758));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(759, 760));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(759, 760));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_path_material_stripe = e = dataSource.entities.getById('material_path_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(251, 252, 253, 254));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(0, 1, 2, 3));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(1, 2, 3, 0));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(769.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(769.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(770.0);
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(770.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineOutline_771");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_polylineOutline_771');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(7, 8, 9, 10));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineOutline_776");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_polylineOutline_776');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(12, 13, 14, 15));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineArrow_781");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_polylineArrow_781');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(17, 18, 19, 20));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_polylineGlow_786");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_polylineGlow_786');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(22, 23, 24, 25));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_image_791");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_image_791');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(27, 28, 29, 30));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_grid_796");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_grid_796');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(32, 33, 34, 35));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_stripe_801");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_stripe_801');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(37, 38, 39, 40));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_path_material_stripe_806");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_path_material_stripe_806');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(42, 43, 44, 45));
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant811");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant811');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(47, 48, 49, 50));
                    assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant816");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant816');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(52, 53, 54, 55));
                    assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant821");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant821');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(new List<Cartographic> { new Cartographic(0.4735210862691, 1.4735210862691, 824), new Cartographic(0.331928432679307, 1.33192843267931, 827) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromRadians(0.4735210862691, 1.4735210862691, 824), Cartesian3.fromRadians(0.331928432679307, 1.33192843267931, 827) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant828");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant828');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(new List<Cartographic> { new Cartographic(19, 20, 831), new Cartographic(22, 23, 834) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromDegrees(19, 20, 831), Cartesian3.fromDegrees(22, 23, 834) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant835");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant835');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(71, 72, 73, 74));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_image");
                assertionsStreamWriter.WriteLine("    var material_polygon_material_image = e = dataSource.entities.getById('material_polygon_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/840", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual('http://example.com/840');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(841, 842));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(841, 842));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(78, 79, 80, 81));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_grid");
                assertionsStreamWriter.WriteLine("    var material_polygon_material_grid = e = dataSource.entities.getById('material_polygon_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(851.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(851.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(852, 853));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(852, 853));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(854, 855));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(854, 855));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(856, 857));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(856, 857));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_polygon_material_stripe = e = dataSource.entities.getById('material_polygon_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(93, 94, 95, 96));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(97, 98, 99, 100));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(866.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(866.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(867.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(867.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_image_868");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polygon_material_image_868');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(104, 105, 106, 107));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_grid_873");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polygon_material_grid_873');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(109, 110, 111, 112));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_stripe_878");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polygon_material_stripe_878');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(114, 115, 116, 117));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polygon_material_stripe_883");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polygon_material_stripe_883');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(119, 120, 121, 122));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant888");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant888');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(124, 125, 126, 127));
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant893");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant893');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(new List<Cartographic> { new Cartographic(0.216890053703859, 1.21689005370386, 896), new Cartographic(0.0752974001140654, 1.07529740011407, 899) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.216890053703859, 1.21689005370386, 896), Cartesian3.fromRadians(0.0752974001140654, 1.07529740011407, 899) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant900");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant900');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(new List<Cartographic> { new Cartographic(1, 2, 903), new Cartographic(4, 5, 906) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(1, 2, 903), Cartesian3.fromDegrees(4, 5, 906) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant907");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant907');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(143, 144, 145, 146));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineOutline");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_polylineOutline = e = dataSource.entities.getById('material_polyline_material_polylineOutline');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(147, 148, 149, 150));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(151, 152, 153, 154));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(920.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(920.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineArrow");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_polylineArrow = e = dataSource.entities.getById('material_polyline_material_polylineArrow');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(156, 157, 158, 159));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(157, 158, 159, 156));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineGlow");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_polylineGlow = e = dataSource.entities.getById('material_polyline_material_polylineGlow');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(160, 161, 162, 163));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(161, 162, 163, 160));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(929.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(929.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_image");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_image = e = dataSource.entities.getById('material_polyline_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/930", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual('http://example.com/930');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(931, 932));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(931, 932));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(168, 169, 170, 171));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_grid");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_grid = e = dataSource.entities.getById('material_polyline_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(172, 173, 174, 175));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(173, 174, 175, 172));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(941.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(941.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(942, 943));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(942, 943));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(944, 945));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(944, 945));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(946, 947));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(946, 947));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_polyline_material_stripe = e = dataSource.entities.getById('material_polyline_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(183, 184, 185, 186));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(187, 188, 189, 190));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(956.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(956.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(957.0);
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(957.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineOutline_958");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_polylineOutline_958');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(194, 195, 196, 197));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineOutline_963");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_polylineOutline_963');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(199, 200, 201, 202));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineArrow_968");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_polylineArrow_968');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(204, 205, 206, 207));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_polylineGlow_973");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_polylineGlow_973');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(209, 210, 211, 212));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_image_978");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_image_978');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(214, 215, 216, 217));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_grid_983");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_grid_983');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(219, 220, 221, 222));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_stripe_988");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_stripe_988');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(224, 225, 226, 227));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_polyline_material_stripe_993");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_polyline_material_stripe_993');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(229, 230, 231, 232));
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant998");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant998');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenCoordinatesProperty())
                {
                    w2.WriteWsenDegrees(new CartographicExtent(9, 10, 11, 12));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(Rectangle.fromDegrees(9, 10, 11, 12));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1003");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1003');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(239, 240, 241, 242));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_image");
                assertionsStreamWriter.WriteLine("    var material_rectangle_material_image = e = dataSource.entities.getById('material_rectangle_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1008", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/1008');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1009, 1010));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(1009, 1010));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(246, 247, 248, 249));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangle_material_grid = e = dataSource.entities.getById('material_rectangle_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(250, 251, 252, 253));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1019.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(1019.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1020, 1021));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(1020, 1021));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1022, 1023));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1022, 1023));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1024, 1025));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1024, 1025));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangle_material_stripe = e = dataSource.entities.getById('material_rectangle_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(6, 7, 8, 9));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(10, 11, 12, 13));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1034.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(1034.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1035.0);
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(1035.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_image_1036");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangle_material_image_1036');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(17, 18, 19, 20));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_grid_1041");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangle_material_grid_1041');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(22, 23, 24, 25));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_stripe_1046");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangle_material_stripe_1046');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(27, 28, 29, 30));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangle_material_stripe_1051");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangle_material_stripe_1051');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(32, 33, 34, 35));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1056");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1056');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(37, 38, 39, 40));
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1061");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1061');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicRadians(new List<Cartographic> { new Cartographic(0.141683086649927, 1.14168308664993, 1064), new Cartographic(9.04330601336767E-05, 1.00009043306013, 1067) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.141683086649927, 1.14168308664993, 1064), Cartesian3.fromRadians(9.04330601336767E-05, 1.00009043306013, 1067) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1068");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1068');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenPositionsProperty())
                {
                    w2.WriteCartographicDegrees(new List<Cartographic> { new Cartographic(34, 35, 1071), new Cartographic(37, 38, 1074) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(34, 35, 1071), Cartesian3.fromDegrees(37, 38, 1074) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1075");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1075');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(56, 57, 58, 59));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_image");
                assertionsStreamWriter.WriteLine("    var material_wall_material_image = e = dataSource.entities.getById('material_wall_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1080", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/1080');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1081, 1082));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(1081, 1082));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(63, 64, 65, 66));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_grid");
                assertionsStreamWriter.WriteLine("    var material_wall_material_grid = e = dataSource.entities.getById('material_wall_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(67, 68, 69, 70));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1091.0);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(1091.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1092, 1093));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(1092, 1093));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1094, 1095));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1094, 1095));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1096, 1097));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1096, 1097));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_wall_material_stripe = e = dataSource.entities.getById('material_wall_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(78, 79, 80, 81));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(82, 83, 84, 85));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1106.0);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(1106.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1107.0);
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(1107.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_image_1108");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_wall_material_image_1108');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(89, 90, 91, 92));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_grid_1113");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_wall_material_grid_1113');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(94, 95, 96, 97));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_stripe_1118");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_wall_material_stripe_1118');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(99, 100, 101, 102));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_wall_material_stripe_1123");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_wall_material_stripe_1123');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(104, 105, 106, 107));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1128");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1128');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(109, 110, 111, 112));
                    assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1133");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1133');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(114, 115, 116, 117));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1138");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1138');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(119, 120, 121, 122));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_lateralSurfaceMaterial_image = e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1143", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1143');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1144, 1145));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1144, 1145));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(126, 127, 128, 129));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_lateralSurfaceMaterial_grid = e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(130, 131, 132, 133));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1154.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1154.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1155, 1156));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1155, 1156));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1157, 1158));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1157, 1158));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1159, 1160));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1159, 1160));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_lateralSurfaceMaterial_stripe = e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(141, 142, 143, 144));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(145, 146, 147, 148));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(146, 147, 148, 145));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1169.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1169.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1170.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1170.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_image_1171");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image_1171');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(152, 153, 154, 155));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_grid_1176");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid_1176');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(157, 158, 159, 160));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_stripe_1181");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe_1181');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(162, 163, 164, 165));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_lateralSurfaceMaterial_stripe_1186");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe_1186');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(167, 168, 169, 170));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1191");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1191');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(172, 173, 174, 175));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.67843137254902, 0.682352941176471, 0.686274509803922, 0.674509803921569), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidSurfaceMaterial_image = e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1196", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1196');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1197, 1198));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1197, 1198));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(179, 180, 181, 182));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidSurfaceMaterial_grid = e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(183, 184, 185, 186));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1207.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1207.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1208, 1209));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1208, 1209));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1210, 1211));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1210, 1211));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1212, 1213));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1212, 1213));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidSurfaceMaterial_stripe = e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(194, 195, 196, 197));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(195, 196, 197, 194));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(198, 199, 200, 201));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1222.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1222.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1223.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1223.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_image_1224");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image_1224');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(205, 206, 207, 208));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_grid_1229");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid_1229');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(210, 211, 212, 213));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_stripe_1234");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe_1234');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(215, 216, 217, 218));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidSurfaceMaterial_stripe_1239");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe_1239');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(220, 221, 222, 223));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.866666666666667, 0.870588235294118, 0.874509803921569, 0.862745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1244");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1244');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(225, 226, 227, 228));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidHorizonSurfaceMaterial_image = e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1249", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1249');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1250, 1251));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1250, 1251));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(232, 233, 234, 235));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid = e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(236, 237, 238, 239));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(237, 238, 239, 236));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1260.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1260.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1261, 1262));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1261, 1262));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1263, 1264));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1263, 1264));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1265, 1266));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1265, 1266));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe = e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(247, 248, 249, 250));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(248, 249, 250, 247));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(251, 252, 253, 254));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1275.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1275.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1276.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1276.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image_1277");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image_1277');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(3, 4, 5, 6));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_1282");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_1282');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(8, 9, 10, 11));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1287");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1287');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(13, 14, 15, 16));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1292");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1292');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(18, 19, 20, 21));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1297");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1297');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(23, 24, 25, 26));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_domeSurfaceMaterial_image = e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1302", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1302');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1303, 1304));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1303, 1304));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(30, 31, 32, 33));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_domeSurfaceMaterial_grid = e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(34, 35, 36, 37));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1313.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1313.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1314, 1315));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1314, 1315));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1316, 1317));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1316, 1317));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1318, 1319));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1318, 1319));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_domeSurfaceMaterial_stripe = e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(45, 46, 47, 48));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(46, 47, 48, 45));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(49, 50, 51, 52));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1328.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1328.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1329.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1329.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_image_1330");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image_1330');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(56, 57, 58, 59));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_grid_1335");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid_1335');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(61, 62, 63, 64));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_stripe_1340");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe_1340');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(66, 67, 68, 69));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_domeSurfaceMaterial_stripe_1345");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe_1345');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(71, 72, 73, 74));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1350");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1350');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(76, 77, 78, 79));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_environmentOcclusionMaterial_image = e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1355", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1355');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1356, 1357));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1356, 1357));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(83, 84, 85, 86));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_environmentOcclusionMaterial_grid = e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(87, 88, 89, 90));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(88, 89, 90, 87));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1366.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1366.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1367, 1368));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1367, 1368));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1369, 1370));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1369, 1370));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1371, 1372));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1371, 1372));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_conicSensor_environmentOcclusionMaterial_stripe = e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(98, 99, 100, 101));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(102, 103, 104, 105));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(103, 104, 105, 102));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1381.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1381.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1382.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1382.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_image_1383");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image_1383');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(109, 110, 111, 112));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_grid_1388");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid_1388');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(114, 115, 116, 117));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_stripe_1393");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe_1393');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(119, 120, 121, 122));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_conicSensor_environmentOcclusionMaterial_stripe_1398");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe_1398');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(124, 125, 126, 127));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1403");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1403');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(129, 130, 131, 132));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1408");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1408');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitSpherical(new List<UnitSpherical> { new UnitSpherical(1409, 1410), new UnitSpherical(1411, 1412) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1409, 1410), new Spherical(1411, 1412) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1413");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1413');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteCartesian(new List<Cartesian> { new Cartesian(1414, 1415, 1416), new Cartesian(1417, 1418, 1419) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Cartesian3(1414, 1415, 1416), new Cartesian3(1417, 1418, 1419) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1420");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1420');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitCartesian(new List<UnitCartesian> { new UnitCartesian(0.576944161234916, 0.577350174015517, 0.577756186796119), new UnitCartesian(0.576945016398694, 0.577350174415828, 0.577755332432962) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(0.576944161234916, 0.577350174015517, 0.577756186796119)), Spherical.fromCartesian3(new Cartesian3(0.576945016398694, 0.577350174415828, 0.577755332432962)) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1427");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1427');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(153, 154, 155, 156));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1432");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1432');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(158, 159, 160, 161));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_lateralSurfaceMaterial_image = e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1437", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1437');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1438, 1439));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1438, 1439));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(165, 166, 167, 168));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_lateralSurfaceMaterial_grid = e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(169, 170, 171, 172));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1448.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1448.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1449, 1450));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1449, 1450));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1451, 1452));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1451, 1452));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1453, 1454));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1453, 1454));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_lateralSurfaceMaterial_stripe = e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(180, 181, 182, 183));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(184, 185, 186, 187));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1463.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1463.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1464.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1464.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_image_1465");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image_1465');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(191, 192, 193, 194));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_grid_1470");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid_1470');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(196, 197, 198, 199));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_stripe_1475");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe_1475');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(201, 202, 203, 204));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_lateralSurfaceMaterial_stripe_1480");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe_1480');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(206, 207, 208, 209));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1485");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1485');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(211, 212, 213, 214));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidSurfaceMaterial_image = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1490", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1490');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1491, 1492));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1491, 1492));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(218, 219, 220, 221));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(219, 220, 221, 218));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidSurfaceMaterial_grid = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(222, 223, 224, 225));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1501.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1501.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1502, 1503));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1502, 1503));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1504, 1505));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1504, 1505));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1506, 1507));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1506, 1507));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidSurfaceMaterial_stripe = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(233, 234, 235, 236));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(237, 238, 239, 240));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(238, 239, 240, 237));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1516.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1516.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1517.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1517.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_image_1518");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image_1518');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(244, 245, 246, 247));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.96078431372549, 0.964705882352941, 0.968627450980392, 0.956862745098039), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid_1523");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid_1523');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(249, 250, 251, 252));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1528");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1528');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(254, 0, 1, 2));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1533");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1533');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(4, 5, 6, 7));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1538");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1538');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(9, 10, 11, 12));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1543", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1543');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1544, 1545));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1544, 1545));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(16, 17, 18, 19));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(17, 18, 19, 16));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(20, 21, 22, 23));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1554.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1554.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1555, 1556));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1555, 1556));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1557, 1558));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1557, 1558));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1559, 1560));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1559, 1560));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe = e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(31, 32, 33, 34));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(32, 33, 34, 31));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(35, 36, 37, 38));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1569.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1569.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1570.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1570.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_1571");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_1571');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(42, 43, 44, 45));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_1576");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_1576');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(47, 48, 49, 50));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1581");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1581');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(52, 53, 54, 55));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1586");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1586');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(57, 58, 59, 60));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1591");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1591');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(62, 63, 64, 65));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_domeSurfaceMaterial_image = e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1596", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1596');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1597, 1598));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1597, 1598));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(69, 70, 71, 72));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_domeSurfaceMaterial_grid = e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(73, 74, 75, 76));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1607.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1607.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1608, 1609));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1608, 1609));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1610, 1611));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1610, 1611));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1612, 1613));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1612, 1613));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_domeSurfaceMaterial_stripe = e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(84, 85, 86, 87));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(88, 89, 90, 91));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1622.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1622.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1623.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1623.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_image_1624");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image_1624');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(95, 96, 97, 98));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_grid_1629");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid_1629');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(100, 101, 102, 103));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_stripe_1634");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe_1634');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(105, 106, 107, 108));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_domeSurfaceMaterial_stripe_1639");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe_1639');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(110, 111, 112, 113));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1644");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1644');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(115, 116, 117, 118));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_environmentOcclusionMaterial_image = e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1649", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1649');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1650, 1651));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1650, 1651));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(122, 123, 124, 125));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_environmentOcclusionMaterial_grid = e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(126, 127, 128, 129));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1660.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1660.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1661, 1662));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1661, 1662));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1663, 1664));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1663, 1664));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1665, 1666));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1665, 1666));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_customPatternSensor_environmentOcclusionMaterial_stripe = e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(137, 138, 139, 140));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(138, 139, 140, 137));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(141, 142, 143, 144));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1675.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1675.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1676.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1676.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_image_1677");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image_1677');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(148, 149, 150, 151));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.584313725490196, 0.588235294117647, 0.592156862745098, 0.580392156862745), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_grid_1682");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid_1682');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(153, 154, 155, 156));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_stripe_1687");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe_1687');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(158, 159, 160, 161));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_customPatternSensor_environmentOcclusionMaterial_stripe_1692");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe_1692');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(163, 164, 165, 166));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1697");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1697');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(168, 169, 170, 171));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1702");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1702');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(173, 174, 175, 176));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1707");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1707');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(178, 179, 180, 181));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_lateralSurfaceMaterial_image = e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1712", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1712');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1713, 1714));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1713, 1714));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(185, 186, 187, 188));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_lateralSurfaceMaterial_grid = e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(189, 190, 191, 192));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(190, 191, 192, 189));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1723.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1723.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1724, 1725));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1724, 1725));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1726, 1727));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1726, 1727));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1728, 1729));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1728, 1729));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_lateralSurfaceMaterial_stripe = e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(200, 201, 202, 203));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(201, 202, 203, 200));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(204, 205, 206, 207));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1738.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1738.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1739.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1739.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_image_1740");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image_1740');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(211, 212, 213, 214));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_grid_1745");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid_1745');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(216, 217, 218, 219));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_stripe_1750");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe_1750');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(221, 222, 223, 224));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_lateralSurfaceMaterial_stripe_1755");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe_1755');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(226, 227, 228, 229));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1760");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1760');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(231, 232, 233, 234));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidSurfaceMaterial_image = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1765", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1765');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1766, 1767));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1766, 1767));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(238, 239, 240, 241));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidSurfaceMaterial_grid = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(242, 243, 244, 245));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1776.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1776.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1777, 1778));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1777, 1778));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1779, 1780));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1779, 1780));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1781, 1782));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1781, 1782));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidSurfaceMaterial_stripe = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(253, 254, 0, 1));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(254, 0, 1, 253));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(2, 3, 4, 5));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1791.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1791.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1792.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1792.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_image_1793");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image_1793');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(9, 10, 11, 12));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid_1798");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid_1798');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(14, 15, 16, 17));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1803");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1803');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(19, 20, 21, 22));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1808");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1808');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(24, 25, 26, 27));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1813");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1813');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(29, 30, 31, 32));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1818", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1818');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1819, 1820));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1819, 1820));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(36, 37, 38, 39));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(37, 38, 39, 36));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(40, 41, 42, 43));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(41, 42, 43, 40));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1829.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1829.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1830, 1831));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1830, 1831));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1832, 1833));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1832, 1833));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1834, 1835));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1834, 1835));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe = e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(51, 52, 53, 54));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(55, 56, 57, 58));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1844.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1844.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1845.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1845.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_1846");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_1846');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(62, 63, 64, 65));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_1851");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_1851');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(67, 68, 69, 70));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1856");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1856');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(72, 73, 74, 75));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1861");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1861');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(77, 78, 79, 80));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1866");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1866');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(82, 83, 84, 85));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_domeSurfaceMaterial_image = e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1871", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1871');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1872, 1873));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1872, 1873));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(89, 90, 91, 92));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_domeSurfaceMaterial_grid = e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(93, 94, 95, 96));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1882.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1882.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1883, 1884));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1883, 1884));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1885, 1886));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1885, 1886));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1887, 1888));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1887, 1888));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_domeSurfaceMaterial_stripe = e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(104, 105, 106, 107));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(108, 109, 110, 111));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1897.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1897.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1898.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1898.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_image_1899");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image_1899');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(115, 116, 117, 118));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_grid_1904");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid_1904');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(120, 121, 122, 123));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_stripe_1909");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe_1909');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(125, 126, 127, 128));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_domeSurfaceMaterial_stripe_1914");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe_1914');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(130, 131, 132, 133));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1919");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1919');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(135, 136, 137, 138));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_image");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_environmentOcclusionMaterial_image = e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/1924", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1924');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1925, 1926));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1925, 1926));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(142, 143, 144, 145));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_grid");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_environmentOcclusionMaterial_grid = e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(146, 147, 148, 149));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(1935.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1935.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1936, 1937));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1936, 1937));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1938, 1939));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1938, 1939));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(1940, 1941));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1940, 1941));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_stripe");
                assertionsStreamWriter.WriteLine("    var material_rectangularSensor_environmentOcclusionMaterial_stripe = e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(157, 158, 159, 160));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(158, 159, 160, 157));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(161, 162, 163, 164));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(162, 163, 164, 161));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(1950.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1950.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(1951.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1951.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_image_1952");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image_1952');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(168, 169, 170, 171));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_grid_1957");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid_1957');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(173, 174, 175, 176));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_stripe_1962");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe_1962');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(178, 179, 180, 181));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_rectangularSensor_environmentOcclusionMaterial_stripe_1967");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe_1967');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(183, 184, 185, 186));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1972");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1972');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(188, 189, 190, 191));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1977");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1977');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitSpherical(new List<UnitSpherical> { new UnitSpherical(1978, 1979), new UnitSpherical(1980, 1981) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(1978, 1979), new Spherical(1980, 1981) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1982");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1982');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteCartesian(new List<Cartesian> { new Cartesian(1983, 1984, 1985), new Cartesian(1986, 1987, 1988) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.directions.getValue(date)).toEqual([ new Cartesian3(1983, 1984, 1985), new Cartesian3(1986, 1987, 1988) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1989");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1989');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenDirectionsProperty())
                {
                    w2.WriteUnitCartesian(new List<UnitCartesian> { new UnitCartesian(0.577060240620744, 0.577350220641156, 0.577640200661569), new UnitCartesian(0.577060677045512, 0.57735022078713, 0.577639764528748) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(0.577060240620744, 0.577350220641156, 0.577640200661569)), Spherical.fromCartesian3(new Cartesian3(0.577060677045512, 0.57735022078713, 0.577639764528748)) ]);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant1996");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant1996');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(212, 213, 214, 215));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_image");
                assertionsStreamWriter.WriteLine("    var material_fan_material_image = e = dataSource.entities.getById('material_fan_material_image');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteUri("http://example.com/2001", CesiumResourceBehavior.LinkTo);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.image.getValue(date)).toEqual('http://example.com/2001');");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(2002, 2003));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(2002, 2003));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(219, 220, 221, 222));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteBoolean(true);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_grid");
                assertionsStreamWriter.WriteLine("    var material_fan_material_grid = e = dataSource.entities.getById('material_fan_material_grid');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(223, 224, 225, 226));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(2012.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(date)).toEqual(2012.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(2013, 2014));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(2013, 2014));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(2015, 2016));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(2015, 2016));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new Rectangular(2017, 2018));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(2017, 2018));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_stripe");
                assertionsStreamWriter.WriteLine("    var material_fan_material_stripe = e = dataSource.entities.getById('material_fan_material_stripe');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteStripeOrientation(CesiumStripeOrientation.Vertical);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(234, 235, 236, 237));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(235, 236, 237, 234));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(Color.FromArgb(238, 239, 240, 241));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(2027.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(date)).toEqual(2027.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(2028.0);
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(2028.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_image_2029");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_fan_material_image_2029');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(245, 246, 247, 248));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_grid_2034");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_fan_material_grid_2034');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(250, 251, 252, 253));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_stripe_2039");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_fan_material_stripe_2039');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(0, 1, 2, 3));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("material_fan_material_stripe_2044");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('material_fan_material_stripe_2044');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(Color.FromArgb(5, 6, 7, 8));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant2049");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant2049');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(10, 11, 12, 13));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant2054");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant2054');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(Color.FromArgb(15, 16, 17, 18));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(date)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant2059");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant2059');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitSpherical(new UnitSpherical(2060, 2061));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(2060, 2061)));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant2062");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant2062');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteCartesian(new Cartesian(2063, 2064, 2065));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(2063, 2064, 2065));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("constant2066");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('constant2066');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitCartesian(new UnitCartesian(0.577071041295453, 0.577350224189161, 0.57762940708287));
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(0.577071041295453, 0.577350224189161, 0.57762940708287));");
                }
            }
        }
        private void WriteReferenceValues(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("ConstantPosition1");
                assertionsStreamWriter.WriteLine("    var constantPosition1 = e = dataSource.entities.getById('ConstantPosition1');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(2070, 2071, 2072));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(2070, 2071, 2072));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("ConstantDouble1");
                assertionsStreamWriter.WriteLine("    var constantDouble1 = e = dataSource.entities.getById('ConstantDouble1');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenScaleProperty())
                {
                    w2.WriteNumber(2073.0);
                    assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(2073.0);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("ConstantPosition2");
                assertionsStreamWriter.WriteLine("    var constantPosition2 = e = dataSource.entities.getById('ConstantPosition2');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new Cartesian(2074, 2075, 2076));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(new Cartesian3(2074, 2075, 2076));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("ConstantDouble2");
                assertionsStreamWriter.WriteLine("    var constantDouble2 = e = dataSource.entities.getById('ConstantDouble2');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenScaleProperty())
                {
                    w2.WriteNumber(2077.0);
                    assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(2077.0);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("Reference");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('Reference');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenDescriptionProperty())
                {
                    w.WriteReference(new Reference("Constant", "description"));
                    assertionsStreamWriter.WriteLine("    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
                }
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteReference(new Reference("Constant", "position"));
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteReference(new Reference("Constant", "orientation"));
                    assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteReference(new Reference("Constant", "viewFrom"));
                    assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
                    }
                    using (var w2 = w.OpenImageProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "pixelOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "eyeOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "horizontalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "verticalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "alignedAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenSizeInMetersProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "sizeInMeters" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "scaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "pixelOffsetScaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "billboard", "imageSubRegion" }));
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
                    }
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "dimensions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "box", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(constant.box.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "box", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantPosition1", new List<string> { "position" }), new Reference("ConstantPosition2", new List<string> { "position" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.positions.getValue(date)).toEqual([constantPosition1.position.getValue(date), constantPosition2.position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenCornerTypeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "cornerType" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "corridor", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(constant.corridor.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "corridor", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "length" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "topRadius" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "bottomRadius" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(constant.cylinder.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "numberOfVerticalLines" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "cylinder", "slices" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
                    }
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "semiMajorAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "semiMinorAxis" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(constant.ellipse.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipse", "numberOfVerticalLines" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "radii" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(constant.ellipsoid.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "stackPartitions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "slicePartitions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "ellipsoid", "subdivisions" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
                    }
                    using (var w2 = w.OpenTextProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "text" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
                    }
                    using (var w2 = w.OpenFontProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "font" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
                    }
                    using (var w2 = w.OpenStyleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "style" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "pixelOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "eyeOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
                    }
                    using (var w2 = w.OpenHorizontalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "horizontalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenVerticalOriginProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "verticalOrigin" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "fillColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "label", "pixelOffsetScaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
                    }
                    using (var w2 = w.OpenGltfProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "uri" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "scale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "minimumPixelSize" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "maximumScale" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
                    }
                    using (var w2 = w.OpenIncrementallyLoadTexturesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "incrementallyLoadTextures" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
                    }
                    using (var w2 = w.OpenRunAnimationsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "model", "runAnimations" }));
                        assertionsStreamWriter.WriteLine("    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
                    }
                    using (var w2 = w.OpenNodeTransformationsProperty())
                    using (var a = w2.OpenNodeTransformationProperty("referenceProp"))
                    {
                        using (var w3 = a.OpenTranslationProperty())
                        {
                            w3.WriteReference(new Reference("Constant", new List<string> { "model", "nodeTransformations", "prop", "translation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.translation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.translation.getValue(date));");
                        }
                        using (var w3 = a.OpenRotationProperty())
                        {
                            w3.WriteReference(new Reference("Constant", new List<string> { "model", "nodeTransformations", "prop", "rotation" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.rotation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.rotation.getValue(date));");
                        }
                        using (var w3 = a.OpenScaleProperty())
                        {
                            w3.WriteReference(new Reference("Constant", new List<string> { "model", "nodeTransformations", "prop", "scale" }));
                            assertionsStreamWriter.WriteLine("    expect(e.model.nodeTransformations.referenceProp.scale.getValue(date)).toEqual(constant.model.nodeTransformations.prop.scale.getValue(date));");
                        }
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "resolution" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "leadTime" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "path", "trailTime" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "path", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(constant.path.material.color.getValue(date));");
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "pixelSize" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "scaleByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "point", "translucencyByDistance" }));
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantPosition1", new List<string> { "position" }), new Reference("ConstantPosition2", new List<string> { "position" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.hierarchy.getValue(date)).toEqual([constantPosition1.position.getValue(date), constantPosition2.position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "polygon", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(constant.polygon.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenPerPositionHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "perPositionHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "closeTop" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polygon", "closeBottom" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantPosition1", new List<string> { "position" }), new Reference("ConstantPosition2", new List<string> { "position" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.positions.getValue(date)).toEqual([constantPosition1.position.getValue(date), constantPosition2.position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "width" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "polyline", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(constant.polyline.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenFollowSurfaceProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "polyline", "followSurface" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.followSurface.getValue(date)).toEqual(constant.polyline.followSurface.getValue(date));");
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
                    }
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "coordinates" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "height" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "extrudedHeight" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "rotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "stRotation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(constant.rectangle.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseTopProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "closeTop" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeTop.getValue(date)).toEqual(constant.rectangle.closeTop.getValue(date));");
                    }
                    using (var w2 = w.OpenCloseBottomProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangle", "closeBottom" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.closeBottom.getValue(date)).toEqual(constant.rectangle.closeBottom.getValue(date));");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "show" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
                    }
                    using (var w2 = w.OpenPositionsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantPosition1", new List<string> { "position" }), new Reference("ConstantPosition2", new List<string> { "position" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.positions.getValue(date)).toEqual([constantPosition1.position.getValue(date), constantPosition2.position.getValue(date)]);");
                    }
                    using (var w2 = w.OpenMinimumHeightsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantDouble1", new List<string> { "billboard", "scale" }), new Reference("ConstantDouble2", new List<string> { "billboard", "scale" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.minimumHeights.getValue(date)).toEqual([constantDouble1.billboard.scale.getValue(date), constantDouble2.billboard.scale.getValue(date)]);");
                    }
                    using (var w2 = w.OpenMaximumHeightsProperty())
                    {
                        w2.WriteReferences(new List<Reference> { new Reference("ConstantDouble1", new List<string> { "billboard", "scale" }), new Reference("ConstantDouble2", new List<string> { "billboard", "scale" }) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.maximumHeights.getValue(date)).toEqual([constantDouble1.billboard.scale.getValue(date), constantDouble2.billboard.scale.getValue(date)]);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "granularity" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "fill" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "wall", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(constant.wall.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outline" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "wall", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "innerHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "outerHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "minimumClockAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "maximumClockAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "conicSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "customPatternSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
                    }
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "xHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "yHalfAngle" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenShowIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "intersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "intersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenShowLateralSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showLateralSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEllipsoidSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEllipsoidHorizonSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEllipsoidHorizonSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowDomeSurfacesProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showDomeSurfaces" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenPortionToDisplayProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "portionToDisplay" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentConstraintProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentConstraint" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
                    }
                    using (var w2 = w.OpenShowEnvironmentOcclusionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEnvironmentOcclusion" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenShowEnvironmentIntersectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "showEnvironmentIntersection" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentIntersectionColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "rectangularSensor", "environmentIntersectionWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "radius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
                    }
                    using (var w2 = w.OpenPerDirectionRadiusProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "perDirectionRadius" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    using (var m = w2.OpenSolidColorProperty())
                    {
                        using (var m2 = m.OpenColorProperty())
                        {
                            m2.WriteReference(new Reference("Constant", new List<string> { "fan", "material", "color" }));
                            assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(constant.fan.material.color.getValue(date));");
                        }
                    }
                    using (var w2 = w.OpenFillProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "fill" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outline" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "fan", "numberOfRings" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenShowProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "show" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "direction" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "length" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteReference(new Reference("Constant", new List<string> { "vector", "minimumLengthInPixels" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
                    }
                }
            }
            WriteReferenceValuesIndividual(writer, assertionsStreamWriter, output);
        }
        private void WriteReferenceValuesIndividual(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2078");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2078');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", new List<string> { "box", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.image.getValue(date)).toEqual(material_box_material_image.box.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", new List<string> { "box", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(material_box_material_image.box.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", new List<string> { "box", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(material_box_material_image.box.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_image", new List<string> { "box", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.transparent.getValue(date)).toEqual(material_box_material_image.box.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2079");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2079');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", new List<string> { "box", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(date)).toEqual(material_box_material_grid.box.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", new List<string> { "box", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(date)).toEqual(material_box_material_grid.box.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", new List<string> { "box", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(date)).toEqual(material_box_material_grid.box.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", new List<string> { "box", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(date)).toEqual(material_box_material_grid.box.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_grid", new List<string> { "box", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(date)).toEqual(material_box_material_grid.box.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2080");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2080');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", new List<string> { "box", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.orientation.getValue(date)).toEqual(material_box_material_stripe.box.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", new List<string> { "box", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(date)).toEqual(material_box_material_stripe.box.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", new List<string> { "box", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(date)).toEqual(material_box_material_stripe.box.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", new List<string> { "box", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(date)).toEqual(material_box_material_stripe.box.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_box_material_stripe", new List<string> { "box", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(date)).toEqual(material_box_material_stripe.box.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2081");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2081');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", new List<string> { "corridor", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.image.getValue(date)).toEqual(material_corridor_material_image.corridor.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", new List<string> { "corridor", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(material_corridor_material_image.corridor.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", new List<string> { "corridor", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(material_corridor_material_image.corridor.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_image", new List<string> { "corridor", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.transparent.getValue(date)).toEqual(material_corridor_material_image.corridor.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2082");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2082');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", new List<string> { "corridor", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(date)).toEqual(material_corridor_material_grid.corridor.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", new List<string> { "corridor", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(material_corridor_material_grid.corridor.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", new List<string> { "corridor", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(date)).toEqual(material_corridor_material_grid.corridor.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", new List<string> { "corridor", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(material_corridor_material_grid.corridor.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_grid", new List<string> { "corridor", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(material_corridor_material_grid.corridor.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2083");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2083');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", new List<string> { "corridor", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.orientation.getValue(date)).toEqual(material_corridor_material_stripe.corridor.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", new List<string> { "corridor", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(date)).toEqual(material_corridor_material_stripe.corridor.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", new List<string> { "corridor", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(date)).toEqual(material_corridor_material_stripe.corridor.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", new List<string> { "corridor", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(date)).toEqual(material_corridor_material_stripe.corridor.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_corridor_material_stripe", new List<string> { "corridor", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(date)).toEqual(material_corridor_material_stripe.corridor.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2084");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2084');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", new List<string> { "cylinder", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.image.getValue(date)).toEqual(material_cylinder_material_image.cylinder.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", new List<string> { "cylinder", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(material_cylinder_material_image.cylinder.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", new List<string> { "cylinder", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(material_cylinder_material_image.cylinder.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_image", new List<string> { "cylinder", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.transparent.getValue(date)).toEqual(material_cylinder_material_image.cylinder.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2085");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2085');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", new List<string> { "cylinder", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(date)).toEqual(material_cylinder_material_grid.cylinder.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", new List<string> { "cylinder", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(material_cylinder_material_grid.cylinder.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", new List<string> { "cylinder", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(material_cylinder_material_grid.cylinder.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", new List<string> { "cylinder", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(material_cylinder_material_grid.cylinder.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_grid", new List<string> { "cylinder", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(material_cylinder_material_grid.cylinder.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2086");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2086');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", new List<string> { "cylinder", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.orientation.getValue(date)).toEqual(material_cylinder_material_stripe.cylinder.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", new List<string> { "cylinder", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(material_cylinder_material_stripe.cylinder.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", new List<string> { "cylinder", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(material_cylinder_material_stripe.cylinder.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", new List<string> { "cylinder", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(date)).toEqual(material_cylinder_material_stripe.cylinder.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_cylinder_material_stripe", new List<string> { "cylinder", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(date)).toEqual(material_cylinder_material_stripe.cylinder.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2087");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2087');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", new List<string> { "ellipse", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.image.getValue(date)).toEqual(material_ellipse_material_image.ellipse.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", new List<string> { "ellipse", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(material_ellipse_material_image.ellipse.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", new List<string> { "ellipse", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(material_ellipse_material_image.ellipse.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_image", new List<string> { "ellipse", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.transparent.getValue(date)).toEqual(material_ellipse_material_image.ellipse.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2088");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2088');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", new List<string> { "ellipse", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(date)).toEqual(material_ellipse_material_grid.ellipse.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", new List<string> { "ellipse", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(material_ellipse_material_grid.ellipse.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", new List<string> { "ellipse", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(material_ellipse_material_grid.ellipse.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", new List<string> { "ellipse", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(material_ellipse_material_grid.ellipse.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_grid", new List<string> { "ellipse", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(material_ellipse_material_grid.ellipse.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2089");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2089');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", new List<string> { "ellipse", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.orientation.getValue(date)).toEqual(material_ellipse_material_stripe.ellipse.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", new List<string> { "ellipse", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(material_ellipse_material_stripe.ellipse.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", new List<string> { "ellipse", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(material_ellipse_material_stripe.ellipse.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", new List<string> { "ellipse", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(date)).toEqual(material_ellipse_material_stripe.ellipse.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipse_material_stripe", new List<string> { "ellipse", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(date)).toEqual(material_ellipse_material_stripe.ellipse.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2090");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2090');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", new List<string> { "ellipsoid", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.image.getValue(date)).toEqual(material_ellipsoid_material_image.ellipsoid.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", new List<string> { "ellipsoid", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(material_ellipsoid_material_image.ellipsoid.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", new List<string> { "ellipsoid", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(material_ellipsoid_material_image.ellipsoid.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_image", new List<string> { "ellipsoid", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(material_ellipsoid_material_image.ellipsoid.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2091");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2091');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", new List<string> { "ellipsoid", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(date)).toEqual(material_ellipsoid_material_grid.ellipsoid.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", new List<string> { "ellipsoid", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(material_ellipsoid_material_grid.ellipsoid.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", new List<string> { "ellipsoid", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(material_ellipsoid_material_grid.ellipsoid.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", new List<string> { "ellipsoid", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(material_ellipsoid_material_grid.ellipsoid.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_grid", new List<string> { "ellipsoid", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(material_ellipsoid_material_grid.ellipsoid.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2092");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2092');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", new List<string> { "ellipsoid", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(material_ellipsoid_material_stripe.ellipsoid.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", new List<string> { "ellipsoid", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(material_ellipsoid_material_stripe.ellipsoid.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", new List<string> { "ellipsoid", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(material_ellipsoid_material_stripe.ellipsoid.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", new List<string> { "ellipsoid", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(material_ellipsoid_material_stripe.ellipsoid.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_ellipsoid_material_stripe", new List<string> { "ellipsoid", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(material_ellipsoid_material_stripe.ellipsoid.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2093");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2093');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", new List<string> { "path", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material_path_material_polylineOutline.path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", new List<string> { "path", "material", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(date)).toEqual(material_path_material_polylineOutline.path.material.outlineColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineOutline", new List<string> { "path", "material", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(date)).toEqual(material_path_material_polylineOutline.path.material.outlineWidth.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2094");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2094');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineArrow", new List<string> { "path", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material_path_material_polylineArrow.path.material.color.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2095");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2095');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineGlow", new List<string> { "path", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material_path_material_polylineGlow.path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_polylineGlow", new List<string> { "path", "material", "glowPower" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(date)).toEqual(material_path_material_polylineGlow.path.material.glowPower.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2096");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2096');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", new List<string> { "path", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.image.getValue(date)).toEqual(material_path_material_image.path.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", new List<string> { "path", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(material_path_material_image.path.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", new List<string> { "path", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material_path_material_image.path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_image", new List<string> { "path", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.transparent.getValue(date)).toEqual(material_path_material_image.path.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2097");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2097');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", new List<string> { "path", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(date)).toEqual(material_path_material_grid.path.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", new List<string> { "path", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(date)).toEqual(material_path_material_grid.path.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", new List<string> { "path", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(date)).toEqual(material_path_material_grid.path.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", new List<string> { "path", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(date)).toEqual(material_path_material_grid.path.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_grid", new List<string> { "path", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(date)).toEqual(material_path_material_grid.path.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2098");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2098');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", new List<string> { "path", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.orientation.getValue(date)).toEqual(material_path_material_stripe.path.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", new List<string> { "path", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(date)).toEqual(material_path_material_stripe.path.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", new List<string> { "path", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(date)).toEqual(material_path_material_stripe.path.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", new List<string> { "path", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(date)).toEqual(material_path_material_stripe.path.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_path_material_stripe", new List<string> { "path", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(date)).toEqual(material_path_material_stripe.path.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2099");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2099');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", new List<string> { "polygon", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.image.getValue(date)).toEqual(material_polygon_material_image.polygon.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", new List<string> { "polygon", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(material_polygon_material_image.polygon.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", new List<string> { "polygon", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(material_polygon_material_image.polygon.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_image", new List<string> { "polygon", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.transparent.getValue(date)).toEqual(material_polygon_material_image.polygon.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2100");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2100');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", new List<string> { "polygon", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(date)).toEqual(material_polygon_material_grid.polygon.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", new List<string> { "polygon", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(material_polygon_material_grid.polygon.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", new List<string> { "polygon", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(date)).toEqual(material_polygon_material_grid.polygon.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", new List<string> { "polygon", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(material_polygon_material_grid.polygon.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_grid", new List<string> { "polygon", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(material_polygon_material_grid.polygon.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2101");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2101');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", new List<string> { "polygon", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.orientation.getValue(date)).toEqual(material_polygon_material_stripe.polygon.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", new List<string> { "polygon", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(date)).toEqual(material_polygon_material_stripe.polygon.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", new List<string> { "polygon", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(date)).toEqual(material_polygon_material_stripe.polygon.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", new List<string> { "polygon", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(date)).toEqual(material_polygon_material_stripe.polygon.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polygon_material_stripe", new List<string> { "polygon", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(date)).toEqual(material_polygon_material_stripe.polygon.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2102");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2102');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", new List<string> { "polyline", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material_polyline_material_polylineOutline.polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", new List<string> { "polyline", "material", "outlineColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(material_polyline_material_polylineOutline.polyline.material.outlineColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineOutline", new List<string> { "polyline", "material", "outlineWidth" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(material_polyline_material_polylineOutline.polyline.material.outlineWidth.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2103");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2103');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineArrow", new List<string> { "polyline", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material_polyline_material_polylineArrow.polyline.material.color.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2104");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2104');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineGlow", new List<string> { "polyline", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material_polyline_material_polylineGlow.polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_polylineGlow", new List<string> { "polyline", "material", "glowPower" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(date)).toEqual(material_polyline_material_polylineGlow.polyline.material.glowPower.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2105");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2105');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", new List<string> { "polyline", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.image.getValue(date)).toEqual(material_polyline_material_image.polyline.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", new List<string> { "polyline", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(material_polyline_material_image.polyline.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", new List<string> { "polyline", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material_polyline_material_image.polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_image", new List<string> { "polyline", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.transparent.getValue(date)).toEqual(material_polyline_material_image.polyline.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2106");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2106');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", new List<string> { "polyline", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(date)).toEqual(material_polyline_material_grid.polyline.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", new List<string> { "polyline", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(material_polyline_material_grid.polyline.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", new List<string> { "polyline", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(date)).toEqual(material_polyline_material_grid.polyline.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", new List<string> { "polyline", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(material_polyline_material_grid.polyline.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_grid", new List<string> { "polyline", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(material_polyline_material_grid.polyline.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2107");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2107');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", new List<string> { "polyline", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.orientation.getValue(date)).toEqual(material_polyline_material_stripe.polyline.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", new List<string> { "polyline", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(date)).toEqual(material_polyline_material_stripe.polyline.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", new List<string> { "polyline", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(date)).toEqual(material_polyline_material_stripe.polyline.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", new List<string> { "polyline", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(date)).toEqual(material_polyline_material_stripe.polyline.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_polyline_material_stripe", new List<string> { "polyline", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(date)).toEqual(material_polyline_material_stripe.polyline.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2108");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2108');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", new List<string> { "rectangle", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.image.getValue(date)).toEqual(material_rectangle_material_image.rectangle.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", new List<string> { "rectangle", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(material_rectangle_material_image.rectangle.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", new List<string> { "rectangle", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(material_rectangle_material_image.rectangle.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_image", new List<string> { "rectangle", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.transparent.getValue(date)).toEqual(material_rectangle_material_image.rectangle.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2109");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2109');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", new List<string> { "rectangle", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(date)).toEqual(material_rectangle_material_grid.rectangle.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", new List<string> { "rectangle", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(material_rectangle_material_grid.rectangle.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", new List<string> { "rectangle", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(material_rectangle_material_grid.rectangle.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", new List<string> { "rectangle", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(material_rectangle_material_grid.rectangle.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_grid", new List<string> { "rectangle", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(material_rectangle_material_grid.rectangle.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2110");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2110');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", new List<string> { "rectangle", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.orientation.getValue(date)).toEqual(material_rectangle_material_stripe.rectangle.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", new List<string> { "rectangle", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(material_rectangle_material_stripe.rectangle.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", new List<string> { "rectangle", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(material_rectangle_material_stripe.rectangle.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", new List<string> { "rectangle", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(date)).toEqual(material_rectangle_material_stripe.rectangle.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangle_material_stripe", new List<string> { "rectangle", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(date)).toEqual(material_rectangle_material_stripe.rectangle.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2111");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2111');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", new List<string> { "wall", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.image.getValue(date)).toEqual(material_wall_material_image.wall.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", new List<string> { "wall", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(material_wall_material_image.wall.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", new List<string> { "wall", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(material_wall_material_image.wall.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_image", new List<string> { "wall", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.transparent.getValue(date)).toEqual(material_wall_material_image.wall.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2112");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2112');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", new List<string> { "wall", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(date)).toEqual(material_wall_material_grid.wall.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", new List<string> { "wall", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(material_wall_material_grid.wall.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", new List<string> { "wall", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(date)).toEqual(material_wall_material_grid.wall.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", new List<string> { "wall", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(date)).toEqual(material_wall_material_grid.wall.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_grid", new List<string> { "wall", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(date)).toEqual(material_wall_material_grid.wall.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2113");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2113');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", new List<string> { "wall", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.orientation.getValue(date)).toEqual(material_wall_material_stripe.wall.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", new List<string> { "wall", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(date)).toEqual(material_wall_material_stripe.wall.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", new List<string> { "wall", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(date)).toEqual(material_wall_material_stripe.wall.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", new List<string> { "wall", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(date)).toEqual(material_wall_material_stripe.wall.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_wall_material_stripe", new List<string> { "wall", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(date)).toEqual(material_wall_material_stripe.wall.material.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2114");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2114');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", new List<string> { "conicSensor", "lateralSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_image.conicSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", new List<string> { "conicSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_image.conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_image.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", new List<string> { "conicSensor", "lateralSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_image.conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2115");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2115');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", new List<string> { "conicSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_grid.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", new List<string> { "conicSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_grid.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_grid.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_grid.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", new List<string> { "conicSensor", "lateralSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_grid.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2116");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2116');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", new List<string> { "conicSensor", "lateralSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_stripe.conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", new List<string> { "conicSensor", "lateralSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_stripe.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", new List<string> { "conicSensor", "lateralSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_stripe.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", new List<string> { "conicSensor", "lateralSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_stripe.conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", new List<string> { "conicSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_lateralSurfaceMaterial_stripe.conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2117");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2117');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_image.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_image.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_image.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_image.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2118");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2118');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_grid.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_grid.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_grid.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_grid.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_grid.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2119");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2119');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_stripe.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_stripe.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_stripe.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_stripe.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_ellipsoidSurfaceMaterial_stripe.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2120");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2120');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_image.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_image.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_image.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_image.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2121");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2121');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2122");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2122');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2123");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2123');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", new List<string> { "conicSensor", "domeSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_image.conicSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", new List<string> { "conicSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_image.conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_image.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", new List<string> { "conicSensor", "domeSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_image.conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2124");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2124');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", new List<string> { "conicSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_grid.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", new List<string> { "conicSensor", "domeSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_grid.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_grid.conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_grid.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", new List<string> { "conicSensor", "domeSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_grid.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2125");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2125');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", new List<string> { "conicSensor", "domeSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_stripe.conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", new List<string> { "conicSensor", "domeSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_stripe.conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", new List<string> { "conicSensor", "domeSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_stripe.conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", new List<string> { "conicSensor", "domeSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_stripe.conicSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", new List<string> { "conicSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_conicSensor_domeSurfaceMaterial_stripe.conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2126");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2126');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", new List<string> { "conicSensor", "environmentOcclusionMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_image.conicSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", new List<string> { "conicSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_image.conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_image.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", new List<string> { "conicSensor", "environmentOcclusionMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_image.conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2127");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2127');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", new List<string> { "conicSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_grid.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", new List<string> { "conicSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_grid.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_grid.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_grid.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", new List<string> { "conicSensor", "environmentOcclusionMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_grid.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2128");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2128');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", new List<string> { "conicSensor", "environmentOcclusionMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_stripe.conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", new List<string> { "conicSensor", "environmentOcclusionMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_stripe.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", new List<string> { "conicSensor", "environmentOcclusionMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_stripe.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", new List<string> { "conicSensor", "environmentOcclusionMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_stripe.conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", new List<string> { "conicSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_conicSensor_environmentOcclusionMaterial_stripe.conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2129");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2129');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_image.customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_image.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_image.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_image.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2130");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2130');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_grid.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_grid.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_grid.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_grid.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_grid.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2131");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2131');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_stripe.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_stripe.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_stripe.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_stripe.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_lateralSurfaceMaterial_stripe.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2132");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2132');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_image.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_image.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_image.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_image.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2133");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2133');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_grid.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_grid.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_grid.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_grid.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_grid.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2134");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2134');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_stripe.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_stripe.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_stripe.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_stripe.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_ellipsoidSurfaceMaterial_stripe.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2135");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2135');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2136");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2136');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2137");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2137');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2138");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2138');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_image.customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_image.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_image.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_image.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2139");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2139');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_grid.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_grid.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_grid.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_grid.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_grid.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2140");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2140');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_stripe.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_stripe.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_stripe.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_stripe.customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", new List<string> { "customPatternSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_domeSurfaceMaterial_stripe.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2141");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2141');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_image.customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_image.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_image.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_image.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2142");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2142');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_grid.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_grid.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_grid.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_grid.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_grid.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2143");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2143');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_stripe.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_stripe.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_stripe.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_stripe.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", new List<string> { "customPatternSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_customPatternSensor_environmentOcclusionMaterial_stripe.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2144");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2144');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_image.rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_image.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_image.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_image.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2145");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2145');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_grid.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_grid.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_grid.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_grid.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_grid.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2146");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2146');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_stripe.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_stripe.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_stripe.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_stripe.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "lateralSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_lateralSurfaceMaterial_stripe.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2147");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2147');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_image.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_image.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_image.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_image.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2148");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2148');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_grid.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_grid.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_grid.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_grid.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_grid.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2149");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2149');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_stripe.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_stripe.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_stripe.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_stripe.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_ellipsoidSurfaceMaterial_stripe.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2150");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2150');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2151");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2151');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2152");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2152');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2153");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2153');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_image.rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_image.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_image.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_image.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2154");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2154');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_grid.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_grid.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_grid.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_grid.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_grid.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2155");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2155');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_stripe.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_stripe.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_stripe.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_stripe.rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", new List<string> { "rectangularSensor", "domeSurfaceMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_domeSurfaceMaterial_stripe.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2156");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2156');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_image.rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_image.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_image.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_image.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2157");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2157');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_grid.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_grid.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_grid.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_grid.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_grid.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2158");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2158');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_stripe.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_stripe.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_stripe.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_stripe.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", new List<string> { "rectangularSensor", "environmentOcclusionMaterial", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(material_rectangularSensor_environmentOcclusionMaterial_stripe.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2159");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2159');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenImageProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", new List<string> { "fan", "material", "image" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.image.getValue(date)).toEqual(material_fan_material_image.fan.material.image.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", new List<string> { "fan", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(material_fan_material_image.fan.material.repeat.getValue(date));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", new List<string> { "fan", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(material_fan_material_image.fan.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenTransparentProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_image", new List<string> { "fan", "material", "transparent" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.transparent.getValue(date)).toEqual(material_fan_material_image.fan.material.transparent.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2160");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2160');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", new List<string> { "fan", "material", "color" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(date)).toEqual(material_fan_material_grid.fan.material.color.getValue(date));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", new List<string> { "fan", "material", "cellAlpha" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(date)).toEqual(material_fan_material_grid.fan.material.cellAlpha.getValue(date));");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", new List<string> { "fan", "material", "lineCount" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(date)).toEqual(material_fan_material_grid.fan.material.lineCount.getValue(date));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", new List<string> { "fan", "material", "lineThickness" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(date)).toEqual(material_fan_material_grid.fan.material.lineThickness.getValue(date));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_grid", new List<string> { "fan", "material", "lineOffset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(date)).toEqual(material_fan_material_grid.fan.material.lineOffset.getValue(date));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("reference2161");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('reference2161');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenOrientationProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", new List<string> { "fan", "material", "orientation" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.orientation.getValue(date)).toEqual(material_fan_material_stripe.fan.material.orientation.getValue(date));");
                    }
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", new List<string> { "fan", "material", "evenColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(date)).toEqual(material_fan_material_stripe.fan.material.evenColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", new List<string> { "fan", "material", "oddColor" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(date)).toEqual(material_fan_material_stripe.fan.material.oddColor.getValue(date));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", new List<string> { "fan", "material", "offset" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(date)).toEqual(material_fan_material_stripe.fan.material.offset.getValue(date));");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteReference(new Reference("material_fan_material_stripe", new List<string> { "fan", "material", "repeat" }));
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(date)).toEqual(material_fan_material_stripe.fan.material.repeat.getValue(date));");
                    }
                }
            }
        }
        private void WriteSampledValues(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("Sampled");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('Sampled');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2162, 2163, 2164), new Cartesian(2165, 2166, 2167) });
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(2162, 2163, 2164));");
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(2165, 2166, 2167));");
                }
                using (var w = packet.OpenOrientationProperty())
                {
                    w.WriteUnitQuaternion(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<UnitQuaternion> { new UnitQuaternion(0.499654231877029, 0.49988469969616, 0.500115167515292, 0.500345635334423), new UnitQuaternion(0.499654868333074, 0.499884912010944, 0.500114955688813, 0.500344999366683) });
                    assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.49988469969616, 0.500115167515292, 0.500345635334423, 0.499654231877029), 1e-14);");
                    assertionsStreamWriter.WriteLine("    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.499884912010944, 0.500114955688813, 0.500344999366683, 0.499654868333074), 1e-14);");
                }
                using (var w = packet.OpenViewFromProperty())
                {
                    w.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2176, 2177, 2178), new Cartesian(2179, 2180, 2181) });
                    assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(2176, 2177, 2178));");
                    assertionsStreamWriter.WriteLine("    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(2179, 2180, 2181));");
                }
                using (var w = packet.OpenBillboardProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2182.0, 2183.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(2182.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(2183.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2184, 2185), new Rectangular(2186, 2187) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2184, 2185));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2186, 2187));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2188, 2189, 2190), new Cartesian(2191, 2192, 2193) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(2188, 2189, 2190));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(2191, 2192, 2193));");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(154, 155, 156, 157), Color.FromArgb(158, 159, 160, 161) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2202.0, 2203.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(2202.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(2203.0);");
                    }
                    using (var w2 = w.OpenAlignedAxisProperty())
                    {
                        w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2204, 2205, 2206), new Cartesian(2207, 2208, 2209) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqual(new Cartesian3(2204, 2205, 2206));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqual(new Cartesian3(2207, 2208, 2209));");
                    }
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2210.0, 2211.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(documentStartDate)).toEqual(2210.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.width.getValue(documentStopDate)).toEqual(2211.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2212.0, 2213.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(documentStartDate)).toEqual(2212.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.height.getValue(documentStopDate)).toEqual(2213.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2214, 2215, 2216, 2217), new NearFarScalar(2218, 2219, 2220, 2221) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2214, 2215, 2216, 2217));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2218, 2219, 2220, 2221));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2222, 2223, 2224, 2225), new NearFarScalar(2226, 2227, 2228, 2229) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2222, 2223, 2224, 2225));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2226, 2227, 2228, 2229));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2230, 2231, 2232, 2233), new NearFarScalar(2234, 2235, 2236, 2237) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2230, 2231, 2232, 2233));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2234, 2235, 2236, 2237));");
                    }
                    using (var w2 = w.OpenImageSubRegionProperty())
                    {
                        w2.WriteBoundingRectangle(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<BoundingRectangle> { BoundingRectangle.FromWidthHeight(2238, 2239, 2240, 2241), BoundingRectangle.FromWidthHeight(2242, 2243, 2244, 2245) });
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(2238, 2239, 2240, 2241));");
                        assertionsStreamWriter.WriteLine("    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(2242, 2243, 2244, 2245));");
                    }
                }
                using (var w = packet.OpenBoxProperty())
                {
                    using (var w2 = w.OpenDimensionsProperty())
                    {
                        w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2246, 2247, 2248), new Cartesian(2249, 2250, 2251) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(2246, 2247, 2248));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(2249, 2250, 2251));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219) });
                                assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                                assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(220, 221, 222, 223), Color.FromArgb(224, 225, 226, 227) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2268.0, 2269.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(2268.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(2269.0);");
                    }
                }
                using (var w = packet.OpenCorridorProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2270.0, 2271.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(documentStartDate)).toEqual(2270.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.width.getValue(documentStopDate)).toEqual(2271.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2272.0, 2273.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(documentStartDate)).toEqual(2272.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.height.getValue(documentStopDate)).toEqual(2273.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2274.0, 2275.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(2274.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(2275.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2276.0, 2277.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(2276.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(2277.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(238, 239, 240, 241), Color.FromArgb(242, 243, 244, 245) });
                                assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                                assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(246, 247, 248, 249), Color.FromArgb(250, 251, 252, 253) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2294.0, 2295.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(2294.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(2295.0);");
                    }
                }
                using (var w = packet.OpenCylinderProperty())
                {
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2296.0, 2297.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(2296.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(2297.0);");
                    }
                    using (var w2 = w.OpenTopRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2298.0, 2299.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(2298.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(2299.0);");
                    }
                    using (var w2 = w.OpenBottomRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2300.0, 2301.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(2300.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(2301.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14) });
                                assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                                assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(15, 16, 17, 18), Color.FromArgb(19, 20, 21, 22) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2318.0, 2319.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(2318.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(2319.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2320.0, 2321.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2320.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2321.0);");
                    }
                    using (var w2 = w.OpenSlicesProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2322.0, 2323.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(2322.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(2323.0);");
                    }
                }
                using (var w = packet.OpenEllipseProperty())
                {
                    using (var w2 = w.OpenSemiMajorAxisProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2324.0, 2325.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(2324.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(2325.0);");
                    }
                    using (var w2 = w.OpenSemiMinorAxisProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2326.0, 2327.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(2326.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(2327.0);");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2328.0, 2329.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(2328.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(2329.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2330.0, 2331.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(2330.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(2331.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2332.0, 2333.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(2332.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(2333.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2334.0, 2335.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(2334.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(2335.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2336.0, 2337.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(2336.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(2337.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(43, 44, 45, 46), Color.FromArgb(47, 48, 49, 50) });
                                assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                                assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(51, 52, 53, 54), Color.FromArgb(55, 56, 57, 58) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(52, 53, 54, 51));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(56, 57, 58, 55));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2354.0, 2355.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(2354.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(2355.0);");
                    }
                    using (var w2 = w.OpenNumberOfVerticalLinesProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2356.0, 2357.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2356.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2357.0);");
                    }
                }
                using (var w = packet.OpenEllipsoidProperty())
                {
                    using (var w2 = w.OpenRadiiProperty())
                    {
                        w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2358, 2359, 2360), new Cartesian(2361, 2362, 2363) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(2358, 2359, 2360));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(2361, 2362, 2363));");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76) });
                                assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                                assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 79, 80, 77));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2380.0, 2381.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(2380.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(2381.0);");
                    }
                    using (var w2 = w.OpenStackPartitionsProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2382.0, 2383.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(2382.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(2383.0);");
                    }
                    using (var w2 = w.OpenSlicePartitionsProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2384.0, 2385.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(2384.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(2385.0);");
                    }
                    using (var w2 = w.OpenSubdivisionsProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2386.0, 2387.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(2386.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(2387.0);");
                    }
                }
                using (var w = packet.OpenLabelProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2388.0, 2389.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(documentStartDate)).toEqual(2388.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.scale.getValue(documentStopDate)).toEqual(2389.0);");
                    }
                    using (var w2 = w.OpenPixelOffsetProperty())
                    {
                        w2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2390, 2391), new Rectangular(2392, 2393) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2390, 2391));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2392, 2393));");
                    }
                    using (var w2 = w.OpenEyeOffsetProperty())
                    {
                        w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(2394, 2395, 2396), new Cartesian(2397, 2398, 2399) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(2394, 2395, 2396));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(2397, 2398, 2399));");
                    }
                    using (var w2 = w.OpenFillColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(105, 106, 107, 108), Color.FromArgb(109, 110, 111, 112) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(113, 114, 115, 116), Color.FromArgb(117, 118, 119, 120) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2416.0, 2417.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(2416.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(2417.0);");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2418, 2419, 2420, 2421), new NearFarScalar(2422, 2423, 2424, 2425) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2418, 2419, 2420, 2421));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2422, 2423, 2424, 2425));");
                    }
                    using (var w2 = w.OpenPixelOffsetScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2426, 2427, 2428, 2429), new NearFarScalar(2430, 2431, 2432, 2433) });
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2426, 2427, 2428, 2429));");
                        assertionsStreamWriter.WriteLine("    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2430, 2431, 2432, 2433));");
                    }
                }
                using (var w = packet.OpenModelProperty())
                {
                    using (var w2 = w.OpenScaleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2434.0, 2435.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(documentStartDate)).toEqual(2434.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.scale.getValue(documentStopDate)).toEqual(2435.0);");
                    }
                    using (var w2 = w.OpenMinimumPixelSizeProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2436.0, 2437.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(2436.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(2437.0);");
                    }
                    using (var w2 = w.OpenMaximumScaleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2438.0, 2439.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(2438.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(2439.0);");
                    }
                }
                using (var w = packet.OpenPathProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2440.0, 2441.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(documentStartDate)).toEqual(2440.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.width.getValue(documentStopDate)).toEqual(2441.0);");
                    }
                    using (var w2 = w.OpenResolutionProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2442.0, 2443.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(documentStartDate)).toEqual(2442.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.resolution.getValue(documentStopDate)).toEqual(2443.0);");
                    }
                    using (var w2 = w.OpenLeadTimeProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2444.0, 2445.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(2444.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(2445.0);");
                    }
                    using (var w2 = w.OpenTrailTimeProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2446.0, 2447.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(2446.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(2447.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(153, 154, 155, 156), Color.FromArgb(157, 158, 159, 160) });
                                assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(154, 155, 156, 153));");
                                assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(158, 159, 160, 157));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenPointProperty())
                {
                    using (var w2 = w.OpenPixelSizeProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2456.0, 2457.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(2456.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(2457.0);");
                    }
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(163, 164, 165, 166), Color.FromArgb(167, 168, 169, 170) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(171, 172, 173, 174), Color.FromArgb(175, 176, 177, 178) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2474.0, 2475.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(2474.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(2475.0);");
                    }
                    using (var w2 = w.OpenScaleByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2476, 2477, 2478, 2479), new NearFarScalar(2480, 2481, 2482, 2483) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2476, 2477, 2478, 2479));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2480, 2481, 2482, 2483));");
                    }
                    using (var w2 = w.OpenTranslucencyByDistanceProperty())
                    {
                        w2.WriteNearFarScalar(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<NearFarScalar> { new NearFarScalar(2484, 2485, 2486, 2487), new NearFarScalar(2488, 2489, 2490, 2491) });
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2484, 2485, 2486, 2487));");
                        assertionsStreamWriter.WriteLine("    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2488, 2489, 2490, 2491));");
                    }
                }
                using (var w = packet.OpenPolygonProperty())
                {
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2492.0, 2493.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(documentStartDate)).toEqual(2492.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.height.getValue(documentStopDate)).toEqual(2493.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2494.0, 2495.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(2494.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(2495.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2496.0, 2497.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(2496.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(2497.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2498.0, 2499.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(2498.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(2499.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(205, 206, 207, 208), Color.FromArgb(209, 210, 211, 212) });
                                assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                                assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(213, 214, 215, 216), Color.FromArgb(217, 218, 219, 220) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2516.0, 2517.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(2516.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(2517.0);");
                    }
                }
                using (var w = packet.OpenPolylineProperty())
                {
                    using (var w2 = w.OpenWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2518.0, 2519.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(documentStartDate)).toEqual(2518.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.width.getValue(documentStopDate)).toEqual(2519.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2520.0, 2521.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(2520.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(2521.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(227, 228, 229, 230), Color.FromArgb(231, 232, 233, 234) });
                                assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
                                assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
                            }
                        }
                    }
                }
                using (var w = packet.OpenRectangleProperty())
                {
                    using (var w2 = w.OpenCoordinatesProperty())
                    {
                        w2.WriteWsen(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<CartographicExtent> { new CartographicExtent(1.01791386021654, 0.447117533421645, 1.44711753342165, 0.876321206626749), new CartographicExtent(0.305524879831852, 1.30552487983185, 0.734728553036955, 0.163932226242059) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(1.01791386021654, 0.447117533421645, 1.44711753342165, 0.876321206626749));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.305524879831852, 1.30552487983185, 0.734728553036955, 0.163932226242059));");
                    }
                    using (var w2 = w.OpenHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2538.0, 2539.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(2538.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(2539.0);");
                    }
                    using (var w2 = w.OpenExtrudedHeightProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2540.0, 2541.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(2540.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(2541.0);");
                    }
                    using (var w2 = w.OpenRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2542.0, 2543.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(2542.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(2543.0);");
                    }
                    using (var w2 = w.OpenStRotationProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2544.0, 2545.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(2544.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(2545.0);");
                    }
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2546.0, 2547.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(2546.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(2547.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(253, 254, 0, 1), Color.FromArgb(2, 3, 4, 5) });
                                assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(254, 0, 1, 253));");
                                assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2564.0, 2565.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(2564.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(2565.0);");
                    }
                }
                using (var w = packet.OpenWallProperty())
                {
                    using (var w2 = w.OpenGranularityProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2566.0, 2567.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(2566.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(2567.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(18, 19, 20, 21), Color.FromArgb(22, 23, 24, 25) });
                                assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 20, 21, 18));");
                                assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(23, 24, 25, 22));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(26, 27, 28, 29), Color.FromArgb(30, 31, 32, 33) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(27, 28, 29, 26));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 32, 33, 30));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2584.0, 2585.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(2584.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(2585.0);");
                    }
                }
                using (var w = packet.OpenConicSensorProperty())
                {
                    using (var w2 = w.OpenInnerHalfAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2586.0, 2587.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(2586.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(2587.0);");
                    }
                    using (var w2 = w.OpenOuterHalfAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2588.0, 2589.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(2588.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(2589.0);");
                    }
                    using (var w2 = w.OpenMinimumClockAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2590.0, 2591.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(2590.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(2591.0);");
                    }
                    using (var w2 = w.OpenMaximumClockAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2592.0, 2593.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(2592.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(2593.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2594.0, 2595.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(2594.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(2595.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2604.0, 2605.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2604.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2605.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(64, 65, 66, 67), Color.FromArgb(68, 69, 70, 71) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(72, 73, 74, 75), Color.FromArgb(76, 77, 78, 79) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(80, 81, 82, 83), Color.FromArgb(84, 85, 86, 87) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(88, 89, 90, 91), Color.FromArgb(92, 93, 94, 95) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(96, 97, 98, 99), Color.FromArgb(100, 101, 102, 103) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2654.0, 2655.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2654.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2655.0);");
                    }
                }
                using (var w = packet.OpenCustomPatternSensorProperty())
                {
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2656.0, 2657.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(2656.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(2657.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(108, 109, 110, 111), Color.FromArgb(112, 113, 114, 115) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2666.0, 2667.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2666.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2667.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(118, 119, 120, 121), Color.FromArgb(122, 123, 124, 125) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(134, 135, 136, 137), Color.FromArgb(138, 139, 140, 141) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(139, 140, 141, 138));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(142, 143, 144, 145), Color.FromArgb(146, 147, 148, 149) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(143, 144, 145, 142));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(150, 151, 152, 153), Color.FromArgb(154, 155, 156, 157) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(158, 159, 160, 161), Color.FromArgb(162, 163, 164, 165) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2716.0, 2717.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2716.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2717.0);");
                    }
                }
                using (var w = packet.OpenRectangularSensorProperty())
                {
                    using (var w2 = w.OpenXHalfAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2718.0, 2719.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(2718.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(2719.0);");
                    }
                    using (var w2 = w.OpenYHalfAngleProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2720.0, 2721.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(2720.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(2721.0);");
                    }
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2722.0, 2723.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(2722.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(2723.0);");
                    }
                    using (var w2 = w.OpenIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(174, 175, 176, 177), Color.FromArgb(178, 179, 180, 181) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(175, 176, 177, 174));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(179, 180, 181, 178));");
                    }
                    using (var w2 = w.OpenIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2732.0, 2733.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2732.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2733.0);");
                    }
                    using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(184, 185, 186, 187), Color.FromArgb(188, 189, 190, 191) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(189, 190, 191, 188));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(192, 193, 194, 195), Color.FromArgb(196, 197, 198, 199) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(200, 201, 202, 203), Color.FromArgb(204, 205, 206, 207) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(201, 202, 203, 200));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
                            }
                        }
                    }
                    using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(208, 209, 210, 211), Color.FromArgb(212, 213, 214, 215) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(216, 217, 218, 219), Color.FromArgb(220, 221, 222, 223) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
                            }
                        }
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                    }
                    using (var w2 = w.OpenEnvironmentIntersectionWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2782.0, 2783.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2782.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2783.0);");
                    }
                }
                using (var w = packet.OpenFanProperty())
                {
                    using (var w2 = w.OpenRadiusProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2784.0, 2785.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(documentStartDate)).toEqual(2784.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.radius.getValue(documentStopDate)).toEqual(2785.0);");
                    }
                    using (var w2 = w.OpenMaterialProperty())
                    {
                        using (var m = w2.OpenSolidColorProperty())
                        {
                            using (var m2 = m.OpenColorProperty())
                            {
                                m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(236, 237, 238, 239), Color.FromArgb(240, 241, 242, 243) });
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
                                assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(241, 242, 243, 240));");
                            }
                        }
                    }
                    using (var w2 = w.OpenOutlineColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(244, 245, 246, 247), Color.FromArgb(248, 249, 250, 251) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 246, 247, 244));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(249, 250, 251, 248));");
                    }
                    using (var w2 = w.OpenOutlineWidthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2802.0, 2803.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(2802.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(2803.0);");
                    }
                    using (var w2 = w.OpenNumberOfRingsProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2804.0, 2805.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(2804.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(2805.0);");
                    }
                }
                using (var w = packet.OpenVectorProperty())
                {
                    using (var w2 = w.OpenColorProperty())
                    {
                        w2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(1, 2, 3, 4), Color.FromArgb(5, 6, 7, 8) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                    }
                    using (var w2 = w.OpenDirectionProperty())
                    {
                        w2.WriteSpherical(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Spherical> { new Spherical(2814, 2815, 2816), new Spherical(2817, 2818, 2819) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(2814, 2815, 2816)));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(2817, 2818, 2819)));");
                    }
                    using (var w2 = w.OpenLengthProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2820.0, 2821.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(documentStartDate)).toEqual(2820.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.length.getValue(documentStopDate)).toEqual(2821.0);");
                    }
                    using (var w2 = w.OpenMinimumLengthInPixelsProperty())
                    {
                        w2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2822.0, 2823.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(2822.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(2823.0);");
                    }
                }
            }
            WriteSampledValuesIndividual(writer, assertionsStreamWriter, output);
        }
        private void WriteSampledValuesIndividual(CesiumStreamWriter writer, StreamWriter assertionsStreamWriter, CesiumOutputStream output)
        {
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled2824");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2824');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicRadians(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartographic> { new Cartographic(0.708204422775989, 0.137408095981092, 2827), new Cartographic(0.566611769186196, 1.5666117691862, 2830) });
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(0.708204422775989, 0.137408095981092, 2827));");
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.566611769186196, 1.5666117691862, 2830));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled2831");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2831');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartographicDegrees(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartographic> { new Cartographic(42, 43, 2834), new Cartographic(0, 1, 2837) });
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(42, 43, 2834));");
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(0, 1, 2837));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled2838");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2838');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPositionProperty())
                {
                    w.WriteCartesianVelocity(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Motion<Cartesian>> { new Motion<Cartesian>(new Cartesian(2839, 2840, 2841), new Cartesian(2842, 2843, 2844)), new Motion<Cartesian>(new Cartesian(2845, 2846, 2847), new Cartesian(2848, 2849, 2850)) });
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(2839, 2840, 2841));");
                    assertionsStreamWriter.WriteLine("    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(2845, 2846, 2847));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled2851");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2851');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBillboardProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(47, 48, 49, 50), Color.FromArgb(51, 52, 53, 54) });
                    assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2860");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2860');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2869");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2869');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2870, 2871), new Rectangular(2872, 2873) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2870, 2871));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2872, 2873));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(69, 70, 71, 72), Color.FromArgb(73, 74, 75, 76) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2882");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2882');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(78, 79, 80, 81), Color.FromArgb(82, 83, 84, 85) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2891.0, 2892.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(2891.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(2892.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2893, 2894), new Rectangular(2895, 2896) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2893, 2894));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2895, 2896));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2897, 2898), new Rectangular(2899, 2900) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2897, 2898));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2899, 2900));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2901, 2902), new Rectangular(2903, 2904) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2901, 2902));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2903, 2904));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2905");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2905');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(109, 110, 111, 112), Color.FromArgb(113, 114, 115, 116) });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2922.0, 2923.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(2922.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(2923.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 2924.0, 2925.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(2924.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(2925.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2926");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2926');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(122, 123, 124, 125), Color.FromArgb(126, 127, 128, 129) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2935");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2935');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(131, 132, 133, 134), Color.FromArgb(135, 136, 137, 138) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2944");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2944');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(140, 141, 142, 143), Color.FromArgb(144, 145, 146, 147) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.552941176470588, 0.556862745098039, 0.56078431372549, 0.549019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.568627450980392, 0.572549019607843, 0.576470588235294, 0.564705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2953");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2953');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(149, 150, 151, 152), Color.FromArgb(153, 154, 155, 156) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled2962");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled2962');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenBoxProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(158, 159, 160, 161), Color.FromArgb(162, 163, 164, 165) });
                    assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2971");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2971');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(167, 168, 169, 170), Color.FromArgb(171, 172, 173, 174) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2980");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2980');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(2981, 2982), new Rectangular(2983, 2984) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2981, 2982));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2983, 2984));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial2993");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial2993');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(189, 190, 191, 192), Color.FromArgb(193, 194, 195, 196) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(190, 191, 192, 189));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(194, 195, 196, 193));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3002.0, 3003.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(3002.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(3003.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3004, 3005), new Rectangular(3006, 3007) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3004, 3005));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3006, 3007));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3008, 3009), new Rectangular(3010, 3011) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3008, 3009));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3010, 3011));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3012, 3013), new Rectangular(3014, 3015) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3012, 3013));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3014, 3015));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3016");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3016');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(220, 221, 222, 223), Color.FromArgb(224, 225, 226, 227) });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3033.0, 3034.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(3033.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(3034.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3035.0, 3036.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(3035.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(3036.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3037");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3037');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(233, 234, 235, 236), Color.FromArgb(237, 238, 239, 240) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3046");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3046');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(242, 243, 244, 245), Color.FromArgb(246, 247, 248, 249) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3055");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3055');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3064");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3064');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3073");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3073');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCorridorProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(14, 15, 16, 17), Color.FromArgb(18, 19, 20, 21) });
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3082");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3082');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3091");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3091');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3092, 3093), new Rectangular(3094, 3095) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3092, 3093));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3094, 3095));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(36, 37, 38, 39), Color.FromArgb(40, 41, 42, 43) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3104");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3104');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(45, 46, 47, 48), Color.FromArgb(49, 50, 51, 52) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(46, 47, 48, 45));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(50, 51, 52, 49));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3113.0, 3114.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(3113.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(3114.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3115, 3116), new Rectangular(3117, 3118) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3115, 3116));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3117, 3118));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3119, 3120), new Rectangular(3121, 3122) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3119, 3120));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3121, 3122));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3123, 3124), new Rectangular(3125, 3126) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3123, 3124));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3125, 3126));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3127");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3127');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(76, 77, 78, 79), Color.FromArgb(80, 81, 82, 83) });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3144.0, 3145.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(3144.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(3145.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3146.0, 3147.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(3146.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(3147.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3148");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3148');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(89, 90, 91, 92), Color.FromArgb(93, 94, 95, 96) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3157");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3157');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(98, 99, 100, 101), Color.FromArgb(102, 103, 104, 105) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3166");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3166');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(107, 108, 109, 110), Color.FromArgb(111, 112, 113, 114) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3175");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3175');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(116, 117, 118, 119), Color.FromArgb(120, 121, 122, 123) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3184");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3184');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCylinderProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(125, 126, 127, 128), Color.FromArgb(129, 130, 131, 132) });
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3193");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3193');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(134, 135, 136, 137), Color.FromArgb(138, 139, 140, 141) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3202");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3202');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3203, 3204), new Rectangular(3205, 3206) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3203, 3204));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3205, 3206));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(147, 148, 149, 150), Color.FromArgb(151, 152, 153, 154) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3215");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3215');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(156, 157, 158, 159), Color.FromArgb(160, 161, 162, 163) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3224.0, 3225.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(3224.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(3225.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3226, 3227), new Rectangular(3228, 3229) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3226, 3227));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3228, 3229));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3230, 3231), new Rectangular(3232, 3233) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3230, 3231));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3232, 3233));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3234, 3235), new Rectangular(3236, 3237) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3234, 3235));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3236, 3237));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3238");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3238');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3255.0, 3256.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(3255.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(3256.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3257.0, 3258.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(3257.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(3258.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3259");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3259');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(200, 201, 202, 203), Color.FromArgb(204, 205, 206, 207) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3268");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3268');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(209, 210, 211, 212), Color.FromArgb(213, 214, 215, 216) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3277");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3277');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(218, 219, 220, 221), Color.FromArgb(222, 223, 224, 225) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3286");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3286');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(227, 228, 229, 230), Color.FromArgb(231, 232, 233, 234) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3295");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3295');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipseProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(236, 237, 238, 239), Color.FromArgb(240, 241, 242, 243) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.933333333333333, 0.937254901960784, 0.925490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.945098039215686, 0.949019607843137, 0.952941176470588, 0.941176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3304");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3304');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3313");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3313');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3314, 3315), new Rectangular(3316, 3317) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3314, 3315));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3316, 3317));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(3, 4, 5, 6), Color.FromArgb(7, 8, 9, 10) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3326");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3326');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(12, 13, 14, 15), Color.FromArgb(16, 17, 18, 19) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3335.0, 3336.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(3335.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(3336.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3337, 3338), new Rectangular(3339, 3340) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3337, 3338));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3339, 3340));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3341, 3342), new Rectangular(3343, 3344) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3341, 3342));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3343, 3344));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3345, 3346), new Rectangular(3347, 3348) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3345, 3346));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3347, 3348));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3349");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3349');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(35, 36, 37, 38), Color.FromArgb(39, 40, 41, 42) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(36, 37, 38, 35));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(43, 44, 45, 46), Color.FromArgb(47, 48, 49, 50) });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3366.0, 3367.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(3366.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(3367.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3368.0, 3369.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(3368.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(3369.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3370");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3370');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3379");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3379');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(65, 66, 67, 68), Color.FromArgb(69, 70, 71, 72) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3388");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3388');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(74, 75, 76, 77), Color.FromArgb(78, 79, 80, 81) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3397");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3397');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(83, 84, 85, 86), Color.FromArgb(87, 88, 89, 90) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3406");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3406');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenEllipsoidProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3415");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3415');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenFillColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                    assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3424");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3424');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenLabelProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                    assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3433");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3433');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3442");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3442');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(136, 137, 138, 139), Color.FromArgb(140, 141, 142, 143) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3459.0, 3460.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(3459.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(3460.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3461");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3461');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(147, 148, 149, 150), Color.FromArgb(151, 152, 153, 154) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3470");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3470');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(156, 157, 158, 159), Color.FromArgb(160, 161, 162, 163) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3479.0, 3480.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(3479.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(3480.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3481");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3481');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3482, 3483), new Rectangular(3484, 3485) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3482, 3483));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3484, 3485));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(171, 172, 173, 174), Color.FromArgb(175, 176, 177, 178) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3494");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3494');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(180, 181, 182, 183), Color.FromArgb(184, 185, 186, 187) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3503.0, 3504.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(3503.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(3504.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3505, 3506), new Rectangular(3507, 3508) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3505, 3506));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3507, 3508));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3509, 3510), new Rectangular(3511, 3512) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3509, 3510));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3511, 3512));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3513, 3514), new Rectangular(3515, 3516) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3513, 3514));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3515, 3516));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3517");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3517');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(203, 204, 205, 206), Color.FromArgb(207, 208, 209, 210) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(211, 212, 213, 214), Color.FromArgb(215, 216, 217, 218) });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3534.0, 3535.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(3534.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(3535.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3536.0, 3537.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(3536.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(3537.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3538");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3538');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3547");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3547');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(233, 234, 235, 236), Color.FromArgb(237, 238, 239, 240) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3556");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3556');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(242, 243, 244, 245), Color.FromArgb(246, 247, 248, 249) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3565");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3565');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(251, 252, 253, 254), Color.FromArgb(0, 1, 2, 3) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3574");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3574');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3583");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3583');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(14, 15, 16, 17), Color.FromArgb(18, 19, 20, 21) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3592");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3592');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3601");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3601');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPathProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(32, 33, 34, 35), Color.FromArgb(36, 37, 38, 39) });
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3610");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3610');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(41, 42, 43, 44), Color.FromArgb(45, 46, 47, 48) });
                    assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3619");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3619');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPointProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(50, 51, 52, 53), Color.FromArgb(54, 55, 56, 57) });
                    assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3628");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3628');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3637");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3637');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3638, 3639), new Rectangular(3640, 3641) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3638, 3639));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3640, 3641));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(72, 73, 74, 75), Color.FromArgb(76, 77, 78, 79) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3650");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3650');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(81, 82, 83, 84), Color.FromArgb(85, 86, 87, 88) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(86, 87, 88, 85));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3659.0, 3660.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(3659.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(3660.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3661, 3662), new Rectangular(3663, 3664) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3661, 3662));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3663, 3664));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3665, 3666), new Rectangular(3667, 3668) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3665, 3666));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3667, 3668));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3669, 3670), new Rectangular(3671, 3672) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3669, 3670));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3671, 3672));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3673");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3673');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(104, 105, 106, 107), Color.FromArgb(108, 109, 110, 111) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(112, 113, 114, 115), Color.FromArgb(116, 117, 118, 119) });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3690.0, 3691.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(3690.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(3691.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3692.0, 3693.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(3692.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(3693.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3694");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3694');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(125, 126, 127, 128), Color.FromArgb(129, 130, 131, 132) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3703");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3703');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(134, 135, 136, 137), Color.FromArgb(138, 139, 140, 141) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3712");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3712');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3721");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3721');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(152, 153, 154, 155), Color.FromArgb(156, 157, 158, 159) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3730");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3730');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolygonProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(161, 162, 163, 164), Color.FromArgb(165, 166, 167, 168) });
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3739");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3739');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(170, 171, 172, 173), Color.FromArgb(174, 175, 176, 177) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3748");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3748');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
                    }
                    using (var m2 = m.OpenOutlineColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(187, 188, 189, 190), Color.FromArgb(191, 192, 193, 194) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                    }
                    using (var m2 = m.OpenOutlineWidthProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3765.0, 3766.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(3765.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(3766.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3767");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3767');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(198, 199, 200, 201), Color.FromArgb(202, 203, 204, 205) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3776");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3776');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(207, 208, 209, 210), Color.FromArgb(211, 212, 213, 214) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
                    }
                    using (var m2 = m.OpenGlowPowerProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3785.0, 3786.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(3785.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(3786.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3787");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3787');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3788, 3789), new Rectangular(3790, 3791) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3788, 3789));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3790, 3791));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(222, 223, 224, 225), Color.FromArgb(226, 227, 228, 229) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3800");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3800');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(231, 232, 233, 234), Color.FromArgb(235, 236, 237, 238) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3809.0, 3810.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(3809.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(3810.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3811, 3812), new Rectangular(3813, 3814) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3811, 3812));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3813, 3814));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3815, 3816), new Rectangular(3817, 3818) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3815, 3816));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3817, 3818));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3819, 3820), new Rectangular(3821, 3822) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3819, 3820));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3821, 3822));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3823");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3823');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(7, 8, 9, 10), Color.FromArgb(11, 12, 13, 14) });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3840.0, 3841.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(3840.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(3841.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3842.0, 3843.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(3842.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(3843.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3844");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3844');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(20, 21, 22, 23), Color.FromArgb(24, 25, 26, 27) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3853");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3853');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineOutlineProperty())
                using (var m2 = m.OpenOutlineColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(29, 30, 31, 32), Color.FromArgb(33, 34, 35, 36) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3862");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3862');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineArrowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(38, 39, 40, 41), Color.FromArgb(42, 43, 44, 45) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3871");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3871');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenPolylineGlowProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(47, 48, 49, 50), Color.FromArgb(51, 52, 53, 54) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3880");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3880');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3889");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3889');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(65, 66, 67, 68), Color.FromArgb(69, 70, 71, 72) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3898");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3898');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(74, 75, 76, 77), Color.FromArgb(78, 79, 80, 81) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3907");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3907');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenPolylineProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(83, 84, 85, 86), Color.FromArgb(87, 88, 89, 90) });
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled3916");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled3916');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenCoordinatesProperty())
                {
                    w2.WriteWsenDegrees(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<CartographicExtent> { new CartographicExtent(2, 3, 4, 5), new CartographicExtent(6, 7, 8, 9) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(2, 3, 4, 5));");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(6, 7, 8, 9));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3925");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3925');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3934");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3934');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3935, 3936), new Rectangular(3937, 3938) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3935, 3936));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3937, 3938));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(114, 115, 116, 117), Color.FromArgb(118, 119, 120, 121) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3947");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3947');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(123, 124, 125, 126), Color.FromArgb(127, 128, 129, 130) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(124, 125, 126, 123));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3956.0, 3957.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(3956.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(3957.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3958, 3959), new Rectangular(3960, 3961) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3958, 3959));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3960, 3961));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3962, 3963), new Rectangular(3964, 3965) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3962, 3963));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3964, 3965));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(3966, 3967), new Rectangular(3968, 3969) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3966, 3967));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3968, 3969));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3970");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3970');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(146, 147, 148, 149), Color.FromArgb(150, 151, 152, 153) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(154, 155, 156, 157), Color.FromArgb(158, 159, 160, 161) });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3987.0, 3988.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(3987.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(3988.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 3989.0, 3990.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(3989.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(3990.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial3991");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial3991');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(167, 168, 169, 170), Color.FromArgb(171, 172, 173, 174) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4000");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4000');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(176, 177, 178, 179), Color.FromArgb(180, 181, 182, 183) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.709803921568627, 0.713725490196078, 0.717647058823529, 0.705882352941177), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4009");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4009');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(185, 186, 187, 188), Color.FromArgb(189, 190, 191, 192) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4018");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4018');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(194, 195, 196, 197), Color.FromArgb(198, 199, 200, 201) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled4027");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4027');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangleProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(203, 204, 205, 206), Color.FromArgb(207, 208, 209, 210) });
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4036");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4036');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4045");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4045');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4046, 4047), new Rectangular(4048, 4049) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4046, 4047));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4048, 4049));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(225, 226, 227, 228), Color.FromArgb(229, 230, 231, 232) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(226, 227, 228, 225));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4058");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4058');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(234, 235, 236, 237), Color.FromArgb(238, 239, 240, 241) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(235, 236, 237, 234));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4067.0, 4068.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(4067.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(4068.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4069, 4070), new Rectangular(4071, 4072) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4069, 4070));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4071, 4072));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4073, 4074), new Rectangular(4075, 4076) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4073, 4074));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4075, 4076));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4077, 4078), new Rectangular(4079, 4080) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4077, 4078));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4079, 4080));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4081");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4081');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(2, 3, 4, 5), Color.FromArgb(6, 7, 8, 9) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(10, 11, 12, 13), Color.FromArgb(14, 15, 16, 17) });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(15, 16, 17, 14));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4098.0, 4099.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(4098.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(4099.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4100.0, 4101.0 });
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(4100.0);");
                        assertionsStreamWriter.WriteLine("    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(4101.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4102");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4102');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(23, 24, 25, 26), Color.FromArgb(27, 28, 29, 30) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4111");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4111');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(32, 33, 34, 35), Color.FromArgb(36, 37, 38, 39) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4120");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4120');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(41, 42, 43, 44), Color.FromArgb(45, 46, 47, 48) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4129");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4129');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(50, 51, 52, 53), Color.FromArgb(54, 55, 56, 57) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled4138");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4138');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenWallProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                    assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled4147");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4147');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4156");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4156');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4165");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4165');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4166, 4167), new Rectangular(4168, 4169) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4166, 4167));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4168, 4169));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(90, 91, 92, 93), Color.FromArgb(94, 95, 96, 97) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(95, 96, 97, 94));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4178");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4178');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(99, 100, 101, 102), Color.FromArgb(103, 104, 105, 106) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(100, 101, 102, 99));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4187.0, 4188.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4187.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4188.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4189, 4190), new Rectangular(4191, 4192) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4189, 4190));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4191, 4192));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4193, 4194), new Rectangular(4195, 4196) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4193, 4194));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4195, 4196));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4197, 4198), new Rectangular(4199, 4200) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4197, 4198));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4199, 4200));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4201");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4201');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(122, 123, 124, 125), Color.FromArgb(126, 127, 128, 129) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(130, 131, 132, 133), Color.FromArgb(134, 135, 136, 137) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4218.0, 4219.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4218.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4219.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4220.0, 4221.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4220.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4221.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4222");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4222');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(143, 144, 145, 146), Color.FromArgb(147, 148, 149, 150) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4231");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4231');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(152, 153, 154, 155), Color.FromArgb(156, 157, 158, 159) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4240");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4240');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(161, 162, 163, 164), Color.FromArgb(165, 166, 167, 168) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4249");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4249');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(170, 171, 172, 173), Color.FromArgb(174, 175, 176, 177) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4258");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4258');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4267");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4267');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4268, 4269), new Rectangular(4270, 4271) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4268, 4269));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4270, 4271));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(192, 193, 194, 195), Color.FromArgb(196, 197, 198, 199) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4280");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4280');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(201, 202, 203, 204), Color.FromArgb(205, 206, 207, 208) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4289.0, 4290.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4289.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4290.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4291, 4292), new Rectangular(4293, 4294) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4291, 4292));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4293, 4294));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4295, 4296), new Rectangular(4297, 4298) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4295, 4296));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4297, 4298));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4299, 4300), new Rectangular(4301, 4302) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4299, 4300));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4301, 4302));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4303");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4303');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(232, 233, 234, 235), Color.FromArgb(236, 237, 238, 239) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4320.0, 4321.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4320.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4321.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4322.0, 4323.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4322.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4323.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4324");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4324');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(245, 246, 247, 248), Color.FromArgb(249, 250, 251, 252) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4333");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4333');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(254, 0, 1, 2), Color.FromArgb(3, 4, 5, 6) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4342");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4342');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4351");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4351');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(17, 18, 19, 20), Color.FromArgb(21, 22, 23, 24) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4360");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4360');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(26, 27, 28, 29), Color.FromArgb(30, 31, 32, 33) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4369");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4369');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4370, 4371), new Rectangular(4372, 4373) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4370, 4371));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4372, 4373));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(39, 40, 41, 42), Color.FromArgb(43, 44, 45, 46) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4382");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4382');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(48, 49, 50, 51), Color.FromArgb(52, 53, 54, 55) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4391.0, 4392.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4391.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4392.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4393, 4394), new Rectangular(4395, 4396) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4393, 4394));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4395, 4396));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4397, 4398), new Rectangular(4399, 4400) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4397, 4398));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4399, 4400));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4401, 4402), new Rectangular(4403, 4404) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4401, 4402));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4403, 4404));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4405");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4405');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(71, 72, 73, 74), Color.FromArgb(75, 76, 77, 78) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(72, 73, 74, 71));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(79, 80, 81, 82), Color.FromArgb(83, 84, 85, 86) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4422.0, 4423.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4422.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4423.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4424.0, 4425.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4424.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4425.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4426");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4426');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(92, 93, 94, 95), Color.FromArgb(96, 97, 98, 99) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4435");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4435');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(101, 102, 103, 104), Color.FromArgb(105, 106, 107, 108) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4444");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4444');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4453");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4453');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4462");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4462');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4471");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4471');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4472, 4473), new Rectangular(4474, 4475) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4472, 4473));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4474, 4475));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(141, 142, 143, 144), Color.FromArgb(145, 146, 147, 148) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(142, 143, 144, 141));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(146, 147, 148, 145));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4484");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4484');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(150, 151, 152, 153), Color.FromArgb(154, 155, 156, 157) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4493.0, 4494.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4493.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4494.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4495, 4496), new Rectangular(4497, 4498) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4495, 4496));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4497, 4498));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4499, 4500), new Rectangular(4501, 4502) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4499, 4500));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4501, 4502));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4503, 4504), new Rectangular(4505, 4506) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4503, 4504));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4505, 4506));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4507");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4507');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(173, 174, 175, 176), Color.FromArgb(177, 178, 179, 180) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 175, 176, 173));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(181, 182, 183, 184), Color.FromArgb(185, 186, 187, 188) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4524.0, 4525.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4524.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4525.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4526.0, 4527.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4526.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4527.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4528");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4528');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(194, 195, 196, 197), Color.FromArgb(198, 199, 200, 201) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4537");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4537');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(203, 204, 205, 206), Color.FromArgb(207, 208, 209, 210) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4546");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4546');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4555");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4555');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(221, 222, 223, 224), Color.FromArgb(225, 226, 227, 228) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4564");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4564');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(230, 231, 232, 233), Color.FromArgb(234, 235, 236, 237) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4573");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4573');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4574, 4575), new Rectangular(4576, 4577) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4574, 4575));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4576, 4577));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(243, 244, 245, 246), Color.FromArgb(247, 248, 249, 250) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4586");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4586');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(252, 253, 254, 0), Color.FromArgb(1, 2, 3, 4) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4595.0, 4596.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4595.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4596.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4597, 4598), new Rectangular(4599, 4600) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4597, 4598));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4599, 4600));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4601, 4602), new Rectangular(4603, 4604) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4601, 4602));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4603, 4604));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4605, 4606), new Rectangular(4607, 4608) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4605, 4606));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4607, 4608));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4609");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4609');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(20, 21, 22, 23), Color.FromArgb(24, 25, 26, 27) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(28, 29, 30, 31), Color.FromArgb(32, 33, 34, 35) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4626.0, 4627.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(4626.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(4627.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4628.0, 4629.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(4628.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(4629.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4630");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4630');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(41, 42, 43, 44), Color.FromArgb(45, 46, 47, 48) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4639");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4639');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(50, 51, 52, 53), Color.FromArgb(54, 55, 56, 57) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4648");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4648');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4657");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4657');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled4666");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4666');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenConicSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled4675");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled4675');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4684");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4684');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4693");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4693');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4694, 4695), new Rectangular(4696, 4697) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4694, 4695));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4696, 4697));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(108, 109, 110, 111), Color.FromArgb(112, 113, 114, 115) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4706");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4706');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(117, 118, 119, 120), Color.FromArgb(121, 122, 123, 124) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(122, 123, 124, 121));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4715.0, 4716.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4715.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4716.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4717, 4718), new Rectangular(4719, 4720) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4717, 4718));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4719, 4720));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4721, 4722), new Rectangular(4723, 4724) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4721, 4722));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4723, 4724));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4725, 4726), new Rectangular(4727, 4728) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4725, 4726));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4727, 4728));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4729");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4729');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(140, 141, 142, 143), Color.FromArgb(144, 145, 146, 147) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(148, 149, 150, 151), Color.FromArgb(152, 153, 154, 155) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(153, 154, 155, 152));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4746.0, 4747.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4746.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4747.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4748.0, 4749.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4748.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4749.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4750");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4750');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(161, 162, 163, 164), Color.FromArgb(165, 166, 167, 168) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4759");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4759');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(170, 171, 172, 173), Color.FromArgb(174, 175, 176, 177) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4768");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4768');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4777");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4777');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4786");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4786');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4795");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4795');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4796, 4797), new Rectangular(4798, 4799) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4796, 4797));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4798, 4799));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(210, 211, 212, 213), Color.FromArgb(214, 215, 216, 217) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(215, 216, 217, 214));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4808");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4808');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(219, 220, 221, 222), Color.FromArgb(223, 224, 225, 226) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4817.0, 4818.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4817.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4818.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4819, 4820), new Rectangular(4821, 4822) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4819, 4820));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4821, 4822));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4823, 4824), new Rectangular(4825, 4826) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4823, 4824));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4825, 4826));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4827, 4828), new Rectangular(4829, 4830) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4827, 4828));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4829, 4830));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4831");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4831');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(242, 243, 244, 245), Color.FromArgb(246, 247, 248, 249) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(250, 251, 252, 253), Color.FromArgb(254, 0, 1, 2) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4848.0, 4849.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4848.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4849.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4850.0, 4851.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4850.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4851.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4852");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4852');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(8, 9, 10, 11), Color.FromArgb(12, 13, 14, 15) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4861");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4861');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(17, 18, 19, 20), Color.FromArgb(21, 22, 23, 24) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4870");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4870');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(26, 27, 28, 29), Color.FromArgb(30, 31, 32, 33) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4879");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4879');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(35, 36, 37, 38), Color.FromArgb(39, 40, 41, 42) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4888");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4888');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4897");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4897');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4898, 4899), new Rectangular(4900, 4901) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4898, 4899));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4900, 4901));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(57, 58, 59, 60), Color.FromArgb(61, 62, 63, 64) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(58, 59, 60, 57));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4910");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4910');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(66, 67, 68, 69), Color.FromArgb(70, 71, 72, 73) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4919.0, 4920.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4919.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4920.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4921, 4922), new Rectangular(4923, 4924) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4921, 4922));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4923, 4924));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4925, 4926), new Rectangular(4927, 4928) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4925, 4926));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4927, 4928));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(4929, 4930), new Rectangular(4931, 4932) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4929, 4930));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4931, 4932));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4933");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4933');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(89, 90, 91, 92), Color.FromArgb(93, 94, 95, 96) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(90, 91, 92, 89));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(94, 95, 96, 93));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(97, 98, 99, 100), Color.FromArgb(101, 102, 103, 104) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(98, 99, 100, 97));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4950.0, 4951.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4950.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4951.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 4952.0, 4953.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4952.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4953.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4954");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4954');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(110, 111, 112, 113), Color.FromArgb(114, 115, 116, 117) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4963");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4963');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(119, 120, 121, 122), Color.FromArgb(123, 124, 125, 126) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4972");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4972');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4981");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4981');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(137, 138, 139, 140), Color.FromArgb(141, 142, 143, 144) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4990");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4990');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(146, 147, 148, 149), Color.FromArgb(150, 151, 152, 153) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial4999");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial4999');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5000, 5001), new Rectangular(5002, 5003) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5000, 5001));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5002, 5003));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(159, 160, 161, 162), Color.FromArgb(163, 164, 165, 166) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5012");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5012');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(168, 169, 170, 171), Color.FromArgb(172, 173, 174, 175) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(173, 174, 175, 172));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5021.0, 5022.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5021.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5022.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5023, 5024), new Rectangular(5025, 5026) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5023, 5024));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5025, 5026));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5027, 5028), new Rectangular(5029, 5030) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5027, 5028));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5029, 5030));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5031, 5032), new Rectangular(5033, 5034) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5031, 5032));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5033, 5034));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5035");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5035');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(191, 192, 193, 194), Color.FromArgb(195, 196, 197, 198) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(199, 200, 201, 202), Color.FromArgb(203, 204, 205, 206) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5052.0, 5053.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5052.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5053.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5054.0, 5055.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5054.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5055.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5056");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5056');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(212, 213, 214, 215), Color.FromArgb(216, 217, 218, 219) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5065");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5065');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(221, 222, 223, 224), Color.FromArgb(225, 226, 227, 228) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5074");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5074');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(230, 231, 232, 233), Color.FromArgb(234, 235, 236, 237) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5083");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5083');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5092");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5092');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(248, 249, 250, 251), Color.FromArgb(252, 253, 254, 0) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5101");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5101');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5102, 5103), new Rectangular(5104, 5105) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5102, 5103));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5104, 5105));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(6, 7, 8, 9), Color.FromArgb(10, 11, 12, 13) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5114");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5114');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(15, 16, 17, 18), Color.FromArgb(19, 20, 21, 22) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5123.0, 5124.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5123.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5124.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5125, 5126), new Rectangular(5127, 5128) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5125, 5126));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5127, 5128));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5129, 5130), new Rectangular(5131, 5132) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5129, 5130));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5131, 5132));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5133, 5134), new Rectangular(5135, 5136) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5133, 5134));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5135, 5136));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5137");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5137');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(38, 39, 40, 41), Color.FromArgb(42, 43, 44, 45) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(39, 40, 41, 38));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(46, 47, 48, 49), Color.FromArgb(50, 51, 52, 53) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5154.0, 5155.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5154.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5155.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5156.0, 5157.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5156.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5157.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5158");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5158');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(59, 60, 61, 62), Color.FromArgb(63, 64, 65, 66) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5167");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5167');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(68, 69, 70, 71), Color.FromArgb(72, 73, 74, 75) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5176");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5176');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5185");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5185');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5194");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5194');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenCustomPatternSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5203");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5203');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(104, 105, 106, 107), Color.FromArgb(108, 109, 110, 111) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5212");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5212');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(113, 114, 115, 116), Color.FromArgb(117, 118, 119, 120) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5221");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5221');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5222, 5223), new Rectangular(5224, 5225) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5222, 5223));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5224, 5225));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(126, 127, 128, 129), Color.FromArgb(130, 131, 132, 133) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5234");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5234');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5243.0, 5244.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5243.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5244.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5245, 5246), new Rectangular(5247, 5248) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5245, 5246));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5247, 5248));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5249, 5250), new Rectangular(5251, 5252) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5249, 5250));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5251, 5252));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5253, 5254), new Rectangular(5255, 5256) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5253, 5254));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5255, 5256));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5257");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5257');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(158, 159, 160, 161), Color.FromArgb(162, 163, 164, 165) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(166, 167, 168, 169), Color.FromArgb(170, 171, 172, 173) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(167, 168, 169, 166));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(171, 172, 173, 170));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5274.0, 5275.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5274.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5275.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5276.0, 5277.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5276.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5277.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5278");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5278');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(179, 180, 181, 182), Color.FromArgb(183, 184, 185, 186) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5287");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5287');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5296");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5296');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5305");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5305');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenLateralSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5314");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5314');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5323");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5323');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5324, 5325), new Rectangular(5326, 5327) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5324, 5325));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5326, 5327));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(228, 229, 230, 231), Color.FromArgb(232, 233, 234, 235) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5336");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5336');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(237, 238, 239, 240), Color.FromArgb(241, 242, 243, 244) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(238, 239, 240, 237));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5345.0, 5346.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5345.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5346.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5347, 5348), new Rectangular(5349, 5350) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5347, 5348));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5349, 5350));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5351, 5352), new Rectangular(5353, 5354) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5351, 5352));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5353, 5354));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5355, 5356), new Rectangular(5357, 5358) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5355, 5356));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5357, 5358));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5359");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5359');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(5, 6, 7, 8), Color.FromArgb(9, 10, 11, 12) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(10, 11, 12, 9));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(13, 14, 15, 16), Color.FromArgb(17, 18, 19, 20) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(18, 19, 20, 17));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5376.0, 5377.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5376.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5377.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5378.0, 5379.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5378.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5379.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5380");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5380');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(26, 27, 28, 29), Color.FromArgb(30, 31, 32, 33) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5389");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5389');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(35, 36, 37, 38), Color.FromArgb(39, 40, 41, 42) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5398");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5398');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(44, 45, 46, 47), Color.FromArgb(48, 49, 50, 51) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5407");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5407');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(53, 54, 55, 56), Color.FromArgb(57, 58, 59, 60) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5416");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5416');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(62, 63, 64, 65), Color.FromArgb(66, 67, 68, 69) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5425");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5425');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5426, 5427), new Rectangular(5428, 5429) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5426, 5427));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5428, 5429));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(75, 76, 77, 78), Color.FromArgb(79, 80, 81, 82) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5438");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5438');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(84, 85, 86, 87), Color.FromArgb(88, 89, 90, 91) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5447.0, 5448.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5447.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5448.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5449, 5450), new Rectangular(5451, 5452) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5449, 5450));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5451, 5452));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5453, 5454), new Rectangular(5455, 5456) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5453, 5454));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5455, 5456));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5457, 5458), new Rectangular(5459, 5460) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5457, 5458));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5459, 5460));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5461");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5461');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(107, 108, 109, 110), Color.FromArgb(111, 112, 113, 114) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(112, 113, 114, 111));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(115, 116, 117, 118), Color.FromArgb(119, 120, 121, 122) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(116, 117, 118, 115));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(120, 121, 122, 119));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5478.0, 5479.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5478.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5479.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5480.0, 5481.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5480.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5481.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5482");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5482');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(128, 129, 130, 131), Color.FromArgb(132, 133, 134, 135) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5491");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5491');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(137, 138, 139, 140), Color.FromArgb(141, 142, 143, 144) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5500");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5500');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(146, 147, 148, 149), Color.FromArgb(150, 151, 152, 153) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5509");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5509');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEllipsoidHorizonSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(155, 156, 157, 158), Color.FromArgb(159, 160, 161, 162) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5518");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5518');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(164, 165, 166, 167), Color.FromArgb(168, 169, 170, 171) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5527");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5527');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5528, 5529), new Rectangular(5530, 5531) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5528, 5529));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5530, 5531));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(177, 178, 179, 180), Color.FromArgb(181, 182, 183, 184) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5540");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5540');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(186, 187, 188, 189), Color.FromArgb(190, 191, 192, 193) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(187, 188, 189, 186));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(191, 192, 193, 190));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5549.0, 5550.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5549.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5550.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5551, 5552), new Rectangular(5553, 5554) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5551, 5552));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5553, 5554));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5555, 5556), new Rectangular(5557, 5558) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5555, 5556));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5557, 5558));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5559, 5560), new Rectangular(5561, 5562) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5559, 5560));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5561, 5562));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5563");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5563');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(209, 210, 211, 212), Color.FromArgb(213, 214, 215, 216) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(217, 218, 219, 220), Color.FromArgb(221, 222, 223, 224) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(222, 223, 224, 221));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5580.0, 5581.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5580.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5581.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5582.0, 5583.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5582.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5583.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5584");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5584');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(230, 231, 232, 233), Color.FromArgb(234, 235, 236, 237) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5593");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5593');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(239, 240, 241, 242), Color.FromArgb(243, 244, 245, 246) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5602");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5602');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(248, 249, 250, 251), Color.FromArgb(252, 253, 254, 0) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5611");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5611');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenDomeSurfaceMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(2, 3, 4, 5), Color.FromArgb(6, 7, 8, 9) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5620");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5620');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(11, 12, 13, 14), Color.FromArgb(15, 16, 17, 18) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5629");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5629');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5630, 5631), new Rectangular(5632, 5633) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5630, 5631));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5632, 5633));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(24, 25, 26, 27), Color.FromArgb(28, 29, 30, 31) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5642");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5642');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(33, 34, 35, 36), Color.FromArgb(37, 38, 39, 40) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(34, 35, 36, 33));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(38, 39, 40, 37));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5651.0, 5652.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5651.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5652.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5653, 5654), new Rectangular(5655, 5656) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5653, 5654));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5655, 5656));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5657, 5658), new Rectangular(5659, 5660) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5657, 5658));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5659, 5660));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5661, 5662), new Rectangular(5663, 5664) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5661, 5662));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5663, 5664));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5665");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5665');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(56, 57, 58, 59), Color.FromArgb(60, 61, 62, 63) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(64, 65, 66, 67), Color.FromArgb(68, 69, 70, 71) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5682.0, 5683.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5682.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5683.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5684.0, 5685.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5684.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5685.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5686");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5686');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(77, 78, 79, 80), Color.FromArgb(81, 82, 83, 84) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5695");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5695');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(86, 87, 88, 89), Color.FromArgb(90, 91, 92, 93) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5704");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5704');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(95, 96, 97, 98), Color.FromArgb(99, 100, 101, 102) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5713");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5713');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentOcclusionMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(104, 105, 106, 107), Color.FromArgb(108, 109, 110, 111) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5722");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5722');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenRectangularSensorProperty())
                using (var w2 = w.OpenEnvironmentIntersectionColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(113, 114, 115, 116), Color.FromArgb(117, 118, 119, 120) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5731");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5731');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenSolidColorProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(122, 123, 124, 125), Color.FromArgb(126, 127, 128, 129) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5740");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5740');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                {
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5741, 5742), new Rectangular(5743, 5744) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5741, 5742));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5743, 5744));");
                    }
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(135, 136, 137, 138), Color.FromArgb(139, 140, 141, 142) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5753");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5753');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                {
                    using (var m2 = m.OpenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(144, 145, 146, 147), Color.FromArgb(148, 149, 150, 151) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
                    }
                    using (var m2 = m.OpenCellAlphaProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5762.0, 5763.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(5762.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(5763.0);");
                    }
                    using (var m2 = m.OpenLineCountProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5764, 5765), new Rectangular(5766, 5767) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5764, 5765));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5766, 5767));");
                    }
                    using (var m2 = m.OpenLineThicknessProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5768, 5769), new Rectangular(5770, 5771) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5768, 5769));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5770, 5771));");
                    }
                    using (var m2 = m.OpenLineOffsetProperty())
                    {
                        m2.WriteCartesian2(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Rectangular> { new Rectangular(5772, 5773), new Rectangular(5774, 5775) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5772, 5773));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5774, 5775));");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5776");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5776');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                {
                    using (var m2 = m.OpenEvenColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(167, 168, 169, 170), Color.FromArgb(171, 172, 173, 174) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
                    }
                    using (var m2 = m.OpenOddColorProperty())
                    {
                        m2.WriteRgba(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(175, 176, 177, 178), Color.FromArgb(179, 180, 181, 182) });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
                    }
                    using (var m2 = m.OpenOffsetProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5793.0, 5794.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(5793.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(5794.0);");
                    }
                    using (var m2 = m.OpenRepeatProperty())
                    {
                        m2.WriteNumber(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<double> { 5795.0, 5796.0 });
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(5795.0);");
                        assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(5796.0);");
                    }
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5797");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5797');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenImageProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(188, 189, 190, 191), Color.FromArgb(192, 193, 194, 195) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5806");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5806');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenGridProperty())
                using (var m2 = m.OpenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(197, 198, 199, 200), Color.FromArgb(201, 202, 203, 204) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5815");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5815');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenEvenColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(206, 207, 208, 209), Color.FromArgb(210, 211, 212, 213) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampledmaterial5824");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampledmaterial5824');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenMaterialProperty())
                using (var m = w2.OpenStripeProperty())
                using (var m2 = m.OpenOddColorProperty())
                {
                    m2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(215, 216, 217, 218), Color.FromArgb(219, 220, 221, 222) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5833");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5833');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenFanProperty())
                using (var w2 = w.OpenOutlineColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(224, 225, 226, 227), Color.FromArgb(228, 229, 230, 231) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5842");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5842');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenColorProperty())
                {
                    w2.WriteRgbaf(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Color> { Color.FromArgb(233, 234, 235, 236), Color.FromArgb(237, 238, 239, 240) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-6);");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-6);");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5851");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5851');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitSpherical(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<UnitSpherical> { new UnitSpherical(5852, 5853), new UnitSpherical(5854, 5855) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5852, 5853)));");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5854, 5855)));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5856");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5856');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<Cartesian> { new Cartesian(5857, 5858, 5859), new Cartesian(5860, 5861, 5862) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(5857, 5858, 5859));");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(5860, 5861, 5862));");
                }
            }
            using (var packet = writer.OpenPacket(output))
            {
                packet.WriteId("sampled5863");
                assertionsStreamWriter.WriteLine("    e = dataSource.entities.getById('sampled5863');");
                assertionsStreamWriter.WriteLine("    expect(e).toBeDefined();");
                using (var w = packet.OpenVectorProperty())
                using (var w2 = w.OpenDirectionProperty())
                {
                    w2.WriteUnitCartesian(new List<JulianDate> { m_documentStartDate, m_documentStopDate }, new List<UnitCartesian> { new UnitCartesian(0.577251823652216, 0.577350263594858, 0.5774487035375), new UnitCartesian(0.577251873985103, 0.577350263600577, 0.577448653216051) });
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(0.577251823652216, 0.577350263594858, 0.5774487035375));");
                    assertionsStreamWriter.WriteLine("    checkExtensions && expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(0.577251873985103, 0.577350263600577, 0.577448653216051));");
                }
            }
        }
    }
}

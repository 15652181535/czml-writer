package cesiumlanguagewritertests;


import agi.foundation.compatibility.*;
import agi.foundation.compatibility.annotations.CS2JWarning;
import agi.foundation.compatibility.ColorHelper;
import agi.foundation.compatibility.DisposeHelper;
import agi.foundation.compatibility.StreamWriterHelper;
import agi.foundation.compatibility.TestContextRule;
import agi.foundation.compatibility.TextWriterHelper;
import cesiumlanguagewriter.*;
import java.awt.Color;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.runners.MethodSorters;
import org.junit.Test;

@CS2JWarning("Unhandled attribute removed: SuppressMessage")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestGenerateValidationDocument {
	private JulianDate m_documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0D).toJulianDate();
	private JulianDate m_documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0D).toJulianDate();
	private Writer m_streamWriter;
	private Writer m_assertionsWriter;
	private Writer m_extensionsAssertionsWriter;
	private CesiumOutputStream m_output;
	private CesiumStreamWriter m_writer;

	final private void writeAssertionBoth(String s) {
		TextWriterHelper.writeLine(m_assertionsWriter, s);
		TextWriterHelper.writeLine(m_extensionsAssertionsWriter, s);
	}

	static private <T> List<T> createList(T t1, T t2) {
		ArrayList<T> tempCollection_0 = new ArrayList<T>();
		tempCollection_0.add(t1);
		tempCollection_0.add(t2);
		return tempCollection_0;
	}

	static private <T> List<T> createList(T... ts) {
		return agi.foundation.compatibility.ArrayHelper.arrayAsList(ts);
	}

	@Test
	public final void generateValidationDocument() {
		{
			Writer disposable_0 = (m_streamWriter = StreamWriterHelper.create("ValidationDocument.czml"));
			try {
				{
					Writer disposable_1 = (m_assertionsWriter = StreamWriterHelper.create("ValidationDocumentAssertions.js"));
					try {
						{
							Writer disposable_2 = (m_extensionsAssertionsWriter = StreamWriterHelper.create("ValidationDocumentExtensionAssertions.js"));
							try {
								writeAssertionBoth("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
								writeAssertionBoth("    /*jshint -W120 */");
								writeAssertionBoth("    var e;");
								writeAssertionBoth("    var date;");
								writeAssertionBoth("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
								writeAssertionBoth("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
								CesiumOutputStream temp_0 = new CesiumOutputStream(m_streamWriter);
								temp_0.setPrettyFormatting(true);
								m_output = temp_0;
								m_writer = new CesiumStreamWriter();
								m_output.writeStartSequence();
								writeClock();
								writeConstantValues();
								writeReferenceValues();
								writeSampledValues();
								m_output.writeEndSequence();
								writeAssertionBoth("});");
							} finally {
								DisposeHelper.dispose(disposable_2);
							}
						}
					} finally {
						DisposeHelper.dispose(disposable_1);
					}
				}
			} finally {
				DisposeHelper.dispose(disposable_0);
			}
		}
	}

	final private void writeClock() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("document");
				packet.writeName("ValidationDocument");
				packet.writeVersion("1.0");
				{
					cesiumlanguagewriter.ClockCesiumWriter clock = packet.openClockProperty();
					try {
						clock.writeInterval(m_documentStartDate, m_documentStopDate);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
						clock.writeCurrentTime(m_documentStartDate);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
						clock.writeMultiplier(1.0);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.multiplier).toEqual(1.0);");
						clock.writeRange(ClockRange.UNBOUNDED);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
						clock.writeStep(ClockStep.SYSTEM_CLOCK_MULTIPLIER);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
					} finally {
						DisposeHelper.dispose(clock);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Constant");
				writeAssertionBoth("    var constant = e = dataSource.entities.getById('Constant');");
				writeAssertionBoth("    expect(e).toBeDefined();");
				writeAssertionBoth("    date = JulianDate.now();");
				{
					cesiumlanguagewriter.StringCesiumWriter w = packet.openDescriptionProperty();
					try {
						w.writeString("string1");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual('string1');");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(1D, 2D, 3D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeUnitQuaternion(new UnitQuaternion(0.182574185835055, 0.365148371670111, 0.547722557505166, 0.730296743340221));
						TextWriterHelper.writeLine(m_assertionsWriter,
								"    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.365148371670111, 0.547722557505166, 0.730296743340221, 0.182574185835055), 1e-14);");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeCartesian(new Cartesian(4D, 5D, 6D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(4, 5, 6));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openImageProperty();
							try {
								w2.writeUri("http://example.com/1", CesiumResourceBehavior.LINK_TO);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date)).toEqual('http://example.com/1');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(1.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(1.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(new Rectangular(1D, 2D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(1, 2));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(new Cartesian(7D, 8D, 9D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(7, 8, 9));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(1, 2, 3, 4));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(2, 3, 4, 1));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(2.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(2.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeUnitCartesian(new UnitCartesian(0.267261241912424, 0.534522483824849, 0.801783725737273));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.alignedAxis.getValue(date)).toEqualEpsilon(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openSizeInMetersProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(3.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(3.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(4.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(4.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(1D, 2D, 3D, 4D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(1, 2, 3, 4));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(5D, 6D, 7D, 8D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(5, 6, 7, 8));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(9D, 10D, 11D, 12D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(9, 10, 11, 12));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeBoundingRectangle(BoundingRectangle.fromWidthHeight(1D, 2D, 3D, 4D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(1, 2, 3, 4));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeCartesian(new Cartesian(10D, 11D, 12D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(10, 11, 12));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(5, 6, 7, 8));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(6, 7, 8, 5));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(9, 10, 11, 12));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(10, 11, 12, 9));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(5.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(5.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(1D, 2D, 3D), new Cartesian(4D, 5D, 6D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(1, 2, 3), new Cartesian3(4, 5, 6) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(6.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(6.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(7.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(7.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(8.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(8.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.CornerTypeCesiumWriter w2 = w.openCornerTypeProperty();
							try {
								w2.writeCornerType(CesiumCornerType.BEVELED);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(9.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(9.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(13, 14, 15, 16));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(14, 15, 16, 13));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(17, 18, 19, 20));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(18, 19, 20, 17));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(10.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(10.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(11.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(11.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeNumber(12.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(12.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeNumber(13.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(13.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(21, 22, 23, 24));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(22, 23, 24, 21));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(25, 26, 27, 28));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(26, 27, 28, 25));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(14.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(14.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(15.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(15.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeNumber(16.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(16.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeNumber(17.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(17.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeNumber(18.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(18.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(19.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(19.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(20.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(20.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(21.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(21.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(22.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(22.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(23.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(23.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(29, 30, 31, 32));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(30, 31, 32, 29));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(33, 34, 35, 36));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(34, 35, 36, 33));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(24.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(24.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(25.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(25.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeCartesian(new Cartesian(13D, 14D, 15D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(13, 14, 15));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(37, 38, 39, 40));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(38, 39, 40, 37));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(41, 42, 43, 44));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(42, 43, 44, 41));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(26.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(26.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeNumber(27.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(27.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeNumber(28.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(28.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeNumber(29.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(29.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.StringCesiumWriter w2 = w.openTextProperty();
							try {
								w2.writeString("string2");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual('string2');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.FontCesiumWriter w2 = w.openFontProperty();
							try {
								w2.writeFont("6px sans-serif");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual('6px sans-serif');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.LabelStyleCesiumWriter w2 = w.openStyleProperty();
							try {
								w2.writeLabelStyle(CesiumLabelStyle.FILL_AND_OUTLINE);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(30.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(30.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(new Rectangular(3D, 4D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(3, 4));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(new Cartesian(16D, 17D, 18D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(16, 17, 18));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(45, 46, 47, 48));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(46, 47, 48, 45));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(49, 50, 51, 52));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(31.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(31.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(13D, 14D, 15D, 16D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(13, 14, 15, 16));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(17D, 18D, 19D, 20D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(17, 18, 19, 20));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openGltfProperty();
							try {
								w2.writeUri("http://example.com/2", CesiumResourceBehavior.LINK_TO);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date)).toEqual('http://example.com/2');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(32.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(32.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeNumber(33.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(33.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeNumber(34.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(34.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openIncrementallyLoadTexturesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openRunAnimationsProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NodeTransformationsCesiumWriter w2 = w.openNodeTransformationsProperty();
							try {
								{
									cesiumlanguagewriter.NodeTransformationCesiumWriter a = w2.openNodeTransformationProperty("prop");
									try {
										{
											cesiumlanguagewriter.TranslationCesiumWriter w3 = a.openTranslationProperty();
											try {
												w3.writeCartesian(new Cartesian(19D, 20D, 21D));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.model.nodeTransformations.prop.translation.getValue(date)).toEqual(new Cartesian3(19, 20, 21));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.RotationCesiumWriter w3 = a.openRotationProperty();
											try {
												w3.writeUnitQuaternion(new UnitQuaternion(0.379049021789452, 0.454858826147342, 0.530668630505232, 0.606478434863123));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.prop.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.454858826147342, 0.530668630505232, 0.606478434863123, 0.379049021789452), 1e-14);");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.ScaleCesiumWriter w3 = a.openScaleProperty();
											try {
												w3.writeCartesian(new Cartesian(22D, 23D, 24D));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.model.nodeTransformations.prop.scale.getValue(date)).toEqual(new Cartesian3(22, 23, 24));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
									} finally {
										DisposeHelper.dispose(a);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(35.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(35.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeNumber(36.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(36.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeNumber(37.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(37.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeNumber(38.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(38.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(53, 54, 55, 56));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(54, 55, 56, 53));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeNumber(39.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(39.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(57, 58, 59, 60));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(58, 59, 60, 57));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(61, 62, 63, 64));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(62, 63, 64, 61));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(40.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(40.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(21D, 22D, 23D, 24D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(21, 22, 23, 24));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(25D, 26D, 27D, 28D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(25, 26, 27, 28));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(7D, 8D, 9D), new Cartesian(10D, 11D, 12D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.hierarchy.getValue(date)).toEqual([ new Cartesian3(7, 8, 9), new Cartesian3(10, 11, 12) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(41.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(41.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(42.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(42.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(43.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(43.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(44.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(44.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(65, 66, 67, 68));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(66, 67, 68, 65));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(69, 70, 71, 72));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(70, 71, 72, 69));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(45.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(45.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerPositionHeightProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(13D, 14D, 15D), new Cartesian(16D, 17D, 18D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(13, 14, 15), new Cartesian3(16, 17, 18) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(46.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(46.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(47.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(47.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(73, 74, 75, 76));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(74, 75, 76, 73));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFollowSurfaceProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.followSurface.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsen(new CartographicExtent(1D, 0.429203673205103, 1.4292036732051, 0.858407346410207));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(1, 0.429203673205103, 1.4292036732051, 0.858407346410207));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(48.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(48.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(49.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(49.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(50.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(50.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(51.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(51.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(52.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(52.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(77, 78, 79, 80));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(78, 79, 80, 77));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(81, 82, 83, 84));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(82, 83, 84, 81));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(53.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(53.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeTop.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeBottom.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(19D, 20D, 21D), new Cartesian(22D, 23D, 24D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(19, 20, 21), new Cartesian3(22, 23, 24) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMinimumHeightsProperty();
							try {
								w2.writeArray(TestGenerateValidationDocument.<Double> createList(1D, 2D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 1, 2 ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMaximumHeightsProperty();
							try {
								w2.writeArray(TestGenerateValidationDocument.<Double> createList(3D, 4D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 3, 4 ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(54.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(54.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(85, 86, 87, 88));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(86, 87, 88, 85));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(89, 90, 91, 92));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(90, 91, 92, 89));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(55.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(55.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeNumber(56.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(56.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeNumber(57.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(57.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeNumber(58.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(58.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeNumber(59.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(59.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(60.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(60.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(93, 94, 95, 96));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(61.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(61.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(97, 98, 99, 100));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(101, 102, 103, 104));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(102, 103, 104, 101));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(105, 106, 107, 108));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(106, 107, 108, 105));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(109, 110, 111, 112));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(110, 111, 112, 109));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(113, 114, 115, 116));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(117, 118, 119, 120));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(118, 119, 120, 117));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(62.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(62.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(1D, 2D, 3D), new Spherical(4D, 5D, 6D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1, 2, 3), new Spherical(4, 5, 6) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(63.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(date)).toEqual(63.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(121, 122, 123, 124));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(122, 123, 124, 121));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(64.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(64.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(125, 126, 127, 128));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(126, 127, 128, 125));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(129, 130, 131, 132));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(130, 131, 132, 129));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(133, 134, 135, 136));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(134, 135, 136, 133));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(137, 138, 139, 140));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(138, 139, 140, 137));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(141, 142, 143, 144));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(145, 146, 147, 148));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(146, 147, 148, 145));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(65.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(65.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeNumber(66.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(66.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeNumber(67.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(67.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(68.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(date)).toEqual(68.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(149, 150, 151, 152));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(150, 151, 152, 149));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(69.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(69.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(153, 154, 155, 156));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(154, 155, 156, 153));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(157, 158, 159, 160));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(158, 159, 160, 157));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(161, 162, 163, 164));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(162, 163, 164, 161));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(165, 166, 167, 168));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(169, 170, 171, 172));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(173, 174, 175, 176));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(174, 175, 176, 173));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(70.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(70.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(7D, 8D, 9D), new Spherical(10D, 11D, 12D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(7, 8, 9), new Spherical(10, 11, 12) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(71.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(71.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerDirectionRadiusProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(177, 178, 179, 180));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(178, 179, 180, 177));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(181, 182, 183, 184));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(182, 183, 184, 181));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(72.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(72.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeNumber(73.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(73.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(185, 186, 187, 188));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(186, 187, 188, 185));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeSpherical(new Spherical(1D, 2D, 3D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(1, 2, 3)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(74.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(74.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeNumber(75.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(75.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeConstantValuesIndividual();
	}

	final private void writeConstantValuesIndividual() {
		writeConstantValuesIndividualDescription();
		writeConstantValuesIndividualPosition();
		writeConstantValuesIndividualOrientation();
		writeConstantValuesIndividualViewFrom();
		writeConstantValuesIndividualBillboard();
		writeConstantValuesIndividualBox();
		writeConstantValuesIndividualCorridor();
		writeConstantValuesIndividualCylinder();
		writeConstantValuesIndividualEllipse();
		writeConstantValuesIndividualEllipsoid();
		writeConstantValuesIndividualLabel();
		writeConstantValuesIndividualModel();
		writeConstantValuesIndividualPath();
		writeConstantValuesIndividualPoint();
		writeConstantValuesIndividualPolygon();
		writeConstantValuesIndividualPolyline();
		writeConstantValuesIndividualRectangle();
		writeConstantValuesIndividualWall();
		writeConstantValuesIndividualConicSensor();
		writeConstantValuesIndividualCustomPatternSensor();
		writeConstantValuesIndividualRectangularSensor();
		writeConstantValuesIndividualFan();
		writeConstantValuesIndividualVector();
	}

	final private void writeConstantValuesIndividualDescription() {}

	final private void writeConstantValuesIndividualPosition() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicRadians(new Cartographic(1D, 0.429203673205103, 3D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromRadians(1, 0.429203673205103, 3));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicDegrees(new Cartographic(4D, 5D, 6D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromDegrees(4, 5, 6));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant3");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant3')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesianVelocity(new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(1D, 2D, 3D), new Cartesian(4D, 5D, 6D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualOrientation() {}

	final private void writeConstantValuesIndividualViewFrom() {}

	final private void writeConstantValuesIndividualBillboard() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant4");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant4')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(1, 2, 3, 4));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.color.getValue(date)).toEqualEpsilon(new Color(0.00784313725490196, 0.0117647058823529, 0.0156862745098039, 0.00392156862745098), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant5");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant5')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeUnitSpherical(new UnitSpherical(1D, 2D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(1, 2)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant6");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant6')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(5, 6, 7, 8));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/3", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.image.getValue(date)).toEqual('http://example.com/3');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(5D, 6D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(5, 6));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(189, 190, 191, 192));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(190, 191, 192, 189));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(193, 194, 195, 196));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(194, 195, 196, 193));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(76.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(date)).toEqual(76.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(7D, 8D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(7, 8));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(9D, 10D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(9, 10));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(11D, 12D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(11, 12));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(197, 198, 199, 200));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(198, 199, 200, 197));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(201, 202, 203, 204));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(202, 203, 204, 201));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(77.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(date)).toEqual(77.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(78.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(78.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material1')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(9, 10, 11, 12));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material2')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(13, 14, 15, 16));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material3");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material3')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(17, 18, 19, 20));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material4");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material4')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(21, 22, 23, 24));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant7");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant7')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(25, 26, 27, 28));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.box.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.101960784313725, 0.105882352941176, 0.109803921568627, 0.0980392156862745), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant8");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant8')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(1D, 0.429203673205103, 3D), new Cartographic(0.858407346410207,
										0.28761101961531, 6D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(1, 0.429203673205103, 3), Cartesian3.fromRadians(0.858407346410207, 0.28761101961531, 6) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant9");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant9')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(7D, 8D, 9D), new Cartographic(10D, 11D, 12D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(7, 8, 9), Cartesian3.fromDegrees(10, 11, 12) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant10");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant10')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(29, 30, 31, 32));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/4", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/4');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(13D, 14D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(13, 14));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(205, 206, 207, 208));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(206, 207, 208, 205));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(209, 210, 211, 212));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(210, 211, 212, 209));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(79.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(79.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(15D, 16D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(15, 16));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(17D, 18D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(17, 18));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(19D, 20D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(19, 20));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(213, 214, 215, 216));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(214, 215, 216, 213));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(217, 218, 219, 220));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(218, 219, 220, 217));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(80.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(date)).toEqual(80.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(81.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(81.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material5");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material5')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(33, 34, 35, 36));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material6");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material6')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(37, 38, 39, 40));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material7");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material7')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(41, 42, 43, 44));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material8");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material8')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(45, 46, 47, 48));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant11");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant11')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(49, 50, 51, 52));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.corridor.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.196078431372549, 0.2, 0.203921568627451, 0.192156862745098), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant12");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant12')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(53, 54, 55, 56));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/5", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/5');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(21D, 22D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(21, 22));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(221, 222, 223, 224));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(222, 223, 224, 221));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(225, 226, 227, 228));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(226, 227, 228, 225));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(82.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(82.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(23D, 24D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(23, 24));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(25D, 26D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(25, 26));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(27D, 28D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(27, 28));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(229, 230, 231, 232));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(230, 231, 232, 229));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(233, 234, 235, 236));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(83.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(date)).toEqual(83.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(84.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(84.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material9");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material9')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(57, 58, 59, 60));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material10");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material10')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(61, 62, 63, 64));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material11");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material11')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(65, 66, 67, 68));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material12");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material12')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(69, 70, 71, 72));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant13");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant13')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(73, 74, 75, 76));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant14");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant14')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(77, 78, 79, 80));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/6", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.image.getValue(date)).toEqual('http://example.com/6');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(29D, 30D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(29, 30));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(237, 238, 239, 240));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(238, 239, 240, 237));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(241, 242, 243, 244));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(242, 243, 244, 241));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(85.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(85.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(31D, 32D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(31, 32));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(33D, 34D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(33, 34));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(35D, 36D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(35, 36));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(245, 246, 247, 248));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(246, 247, 248, 245));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(249, 250, 251, 252));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(250, 251, 252, 249));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(86.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(date)).toEqual(86.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(87.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(87.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material13");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material13')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(81, 82, 83, 84));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material14");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material14')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(85, 86, 87, 88));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material15");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material15')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(89, 90, 91, 92));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material16");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material16')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(93, 94, 95, 96));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant15");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant15')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(97, 98, 99, 100));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.384313725490196, 0.388235294117647, 0.392156862745098, 0.380392156862745), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant16");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant16')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(101, 102, 103, 104));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/7", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.image.getValue(date)).toEqual('http://example.com/7');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(37D, 38D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(37, 38));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(253, 254, 0, 1));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(254, 0, 1, 253));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(2, 3, 4, 5));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(3, 4, 5, 2));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(88.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(88.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(39D, 40D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(39, 40));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(41D, 42D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(41, 42));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(43D, 44D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(43, 44));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(6, 7, 8, 9));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(7, 8, 9, 6));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(10, 11, 12, 13));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(89.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(89.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(90.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(90.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material17");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material17')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(105, 106, 107, 108));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material18");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material18')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(109, 110, 111, 112));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material19");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material19')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(113, 114, 115, 116));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material20");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material20')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(117, 118, 119, 120));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant17");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant17')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(121, 122, 123, 124));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.47843137254902, 0.482352941176471, 0.486274509803922, 0.474509803921569), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualLabel() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant18");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant18')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(125, 126, 127, 128));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.fillColor.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant19");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant19')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(129, 130, 131, 132));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualModel() {}

	final private void writeConstantValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant20");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant20')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(133, 134, 135, 136));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineOutline");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(14, 15, 16, 17));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(15, 16, 17, 14));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(18, 19, 20, 21));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(91.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(date)).toEqual(91.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineArrow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineArrow')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(22, 23, 24, 25));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(23, 24, 25, 22));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineGlow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineGlow')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(26, 27, 28, 29));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(92.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(date)).toEqual(92.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/8", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.image.getValue(date)).toEqual('http://example.com/8');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(45D, 46D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(45, 46));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(30, 31, 32, 33));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(34, 35, 36, 37));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(93.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(date)).toEqual(93.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(47D, 48D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(47, 48));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(49D, 50D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(49, 50));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(51D, 52D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(51, 52));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(38, 39, 40, 41));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(39, 40, 41, 38));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(42, 43, 44, 45));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(43, 44, 45, 42));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(94.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(date)).toEqual(94.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(95.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(95.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material21");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material21')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(137, 138, 139, 140));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material22");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material22')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(141, 142, 143, 144));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material23");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material23')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(145, 146, 147, 148));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material24");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material24')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(149, 150, 151, 152));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material25");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material25')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(153, 154, 155, 156));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material26");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material26')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(157, 158, 159, 160));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material27");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material27')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(161, 162, 163, 164));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material28");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material28')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(165, 166, 167, 168));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPoint() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant21");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant21')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(169, 170, 171, 172));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.color.getValue(date)).toEqualEpsilon(new Color(0.666666666666667, 0.670588235294118, 0.674509803921569, 0.662745098039216), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant22");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant22')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(173, 174, 175, 176));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant23");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant23')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.433629385640828, 1.43362938564083, 15D), new Cartographic(
										0.292036732051034, 1.29203673205103, 18D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromRadians(0.433629385640828, 1.43362938564083, 15), Cartesian3.fromRadians(0.292036732051034, 1.29203673205103, 18) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant24");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant24')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(19D, 20D, 21D), new Cartographic(22D, 23D, 24D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromDegrees(19, 20, 21), Cartesian3.fromDegrees(22, 23, 24) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant25");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant25')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(177, 178, 179, 180));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/9", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.image.getValue(date)).toEqual('http://example.com/9');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(53D, 54D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(53, 54));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(46, 47, 48, 49));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(47, 48, 49, 46));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(50, 51, 52, 53));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(51, 52, 53, 50));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(96.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(96.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(55D, 56D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(55, 56));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(57D, 58D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(57, 58));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(59D, 60D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(59, 60));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(54, 55, 56, 57));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(55, 56, 57, 54));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(58, 59, 60, 61));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(59, 60, 61, 58));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(97.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(date)).toEqual(97.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(98.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(98.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material29");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material29')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(181, 182, 183, 184));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material30");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material30')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(185, 186, 187, 188));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material31");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material31')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(189, 190, 191, 192));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material32");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material32')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(193, 194, 195, 196));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant26");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant26')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(197, 198, 199, 200));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant27");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant27')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(1.43805509807655, 0.867258771281655, 27D), new Cartographic(
										1.29646244448676, 0.725666117691862, 30D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(1.43805509807655, 0.867258771281655, 27), Cartesian3.fromRadians(1.29646244448676, 0.725666117691862, 30) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant28");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant28')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(31D, 32D, 33D), new Cartographic(34D, 35D, 36D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(31, 32, 33), Cartesian3.fromDegrees(34, 35, 36) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant29");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant29')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(201, 202, 203, 204));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineOutline");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(62, 63, 64, 65));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(63, 64, 65, 62));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(66, 67, 68, 69));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(99.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(99.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineArrow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineArrow')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(70, 71, 72, 73));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(71, 72, 73, 70));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineGlow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineGlow')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(74, 75, 76, 77));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(75, 76, 77, 74));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(100.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(date)).toEqual(100.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/10", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.image.getValue(date)).toEqual('http://example.com/10');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(61D, 62D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(61, 62));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(78, 79, 80, 81));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(82, 83, 84, 85));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(101.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(101.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(63D, 64D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(63, 64));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(65D, 66D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(65, 66));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(67D, 68D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(67, 68));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(86, 87, 88, 89));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(87, 88, 89, 86));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(90, 91, 92, 93));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(91, 92, 93, 90));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(102.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(date)).toEqual(102.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(103.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(103.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material33");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material33')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(205, 206, 207, 208));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material34");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material34')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(209, 210, 211, 212));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material35");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material35')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(213, 214, 215, 216));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material36");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material36')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(217, 218, 219, 220));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material37");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material37')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(221, 222, 223, 224));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material38");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material38')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(225, 226, 227, 228));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material39");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material39')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(229, 230, 231, 232));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material40");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material40')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(233, 234, 235, 236));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant30");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant30')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsenDegrees(new CartographicExtent(5D, 6D, 7D, 8D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(Rectangle.fromDegrees(5, 6, 7, 8));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant31");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant31')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(237, 238, 239, 240));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/11", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/11');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(69D, 70D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(69, 70));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(94, 95, 96, 97));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(95, 96, 97, 94));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(98, 99, 100, 101));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(104.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(104.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(71D, 72D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(71, 72));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(73D, 74D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(73, 74));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(75D, 76D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(75, 76));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(102, 103, 104, 105));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(103, 104, 105, 102));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(106, 107, 108, 109));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(107, 108, 109, 106));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(105.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(date)).toEqual(105.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(106.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(106.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material41");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material41')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(241, 242, 243, 244));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.949019607843137, 0.952941176470588, 0.956862745098039, 0.945098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material42");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material42')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(245, 246, 247, 248));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material43");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material43')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(249, 250, 251, 252));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material44");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material44')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(253, 254, 0, 1));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.996078431372549, 0, 0.00392156862745098, 0.992156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant32");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant32')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(2, 3, 4, 5));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant33");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant33')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.871684483717379, 0.300888156922483, 39D), new Cartographic(
										0.730091830127586, 0.159295503332689, 42D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.871684483717379, 0.300888156922483, 39), Cartesian3.fromRadians(0.730091830127586, 0.159295503332689, 42) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant34");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant34')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(43D, 44D, 45D), new Cartographic(1D, 2D, 48D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(43, 44, 45), Cartesian3.fromDegrees(1, 2, 48) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant35");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant35')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(6, 7, 8, 9));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/12", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/12');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(77D, 78D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(77, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(110, 111, 112, 113));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(111, 112, 113, 110));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(114, 115, 116, 117));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(115, 116, 117, 114));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(107.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(107.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(79D, 80D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(79, 80));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(81D, 82D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(81, 82));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(83D, 84D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(83, 84));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(118, 119, 120, 121));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(119, 120, 121, 118));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(122, 123, 124, 125));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(108.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(date)).toEqual(108.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(109.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(109.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material45");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material45')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(10, 11, 12, 13));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material46");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material46')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(14, 15, 16, 17));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material47");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material47')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(18, 19, 20, 21));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material48");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material48')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(22, 23, 24, 25));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant36");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant36')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(26, 27, 28, 29));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.wall.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant37");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant37')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(30, 31, 32, 33));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant38");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant38')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(34, 35, 36, 37));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/13", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/13');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(85D, 86D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(85, 86));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(126, 127, 128, 129));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(130, 131, 132, 133));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(131, 132, 133, 130));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(110.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(110.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(87D, 88D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(87, 88));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(89D, 90D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(89, 90));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(91D, 92D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(91, 92));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(134, 135, 136, 137));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(135, 136, 137, 134));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(138, 139, 140, 141));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(139, 140, 141, 138));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(111.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(111.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(112.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(112.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material49");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material49')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(38, 39, 40, 41));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material50");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material50')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(42, 43, 44, 45));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material51");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material51')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(46, 47, 48, 49));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.184313725490196, 0.188235294117647, 0.192156862745098, 0.180392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material52");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material52')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(50, 51, 52, 53));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant39");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant39')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(54, 55, 56, 57));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/14", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/14');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(93D, 94D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(93, 94));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(142, 143, 144, 145));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(146, 147, 148, 149));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(147, 148, 149, 146));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(113.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(113.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(95D, 96D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(95, 96));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(97D, 98D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(97, 98));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(99D, 100D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(99, 100));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(150, 151, 152, 153));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(151, 152, 153, 150));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(154, 155, 156, 157));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(155, 156, 157, 154));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(114.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(114.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(115.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(115.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material53");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material53')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(58, 59, 60, 61));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.231372549019608, 0.235294117647059, 0.23921568627451, 0.227450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material54");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material54')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(62, 63, 64, 65));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material55");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material55')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(66, 67, 68, 69));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material56");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material56')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(70, 71, 72, 73));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant40");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant40')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(74, 75, 76, 77));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/15", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/15');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(101D, 102D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(101, 102));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(158, 159, 160, 161));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(159, 160, 161, 158));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(162, 163, 164, 165));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(163, 164, 165, 162));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(116.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(116.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(103D, 104D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(103, 104));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(105D, 106D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(105, 106));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(107D, 108D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(107, 108));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(166, 167, 168, 169));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(167, 168, 169, 166));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(170, 171, 172, 173));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(171, 172, 173, 170));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(117.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(117.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(118.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(118.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material57");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material57')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(78, 79, 80, 81));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material58");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material58')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(82, 83, 84, 85));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material59");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material59')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(86, 87, 88, 89));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material60");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material60')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(90, 91, 92, 93));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant41");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant41')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(94, 95, 96, 97));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/16", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/16');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(109D, 110D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(109, 110));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(174, 175, 176, 177));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(175, 176, 177, 174));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(178, 179, 180, 181));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(179, 180, 181, 178));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(119.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(119.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(111D, 112D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(111, 112));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(113D, 114D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(113, 114));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(115D, 116D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(115, 116));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(182, 183, 184, 185));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(183, 184, 185, 182));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(186, 187, 188, 189));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(187, 188, 189, 186));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(120.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(120.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(121.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(121.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material61");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material61')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(98, 99, 100, 101));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material62");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material62')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(102, 103, 104, 105));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material63");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material63')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(106, 107, 108, 109));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.419607843137255, 0.423529411764706, 0.427450980392157, 0.415686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material64");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material64')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(110, 111, 112, 113));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant42");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant42')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(114, 115, 116, 117));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/17", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/17');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(117D, 118D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(117, 118));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(190, 191, 192, 193));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(191, 192, 193, 190));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(194, 195, 196, 197));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(195, 196, 197, 194));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(122.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(122.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(119D, 120D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(119, 120));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(121D, 122D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(121, 122));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(123D, 124D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(123, 124));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(198, 199, 200, 201));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(199, 200, 201, 198));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(202, 203, 204, 205));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(203, 204, 205, 202));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(123.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(123.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(124.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(124.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material65");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material65')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(118, 119, 120, 121));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material66");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material66')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(122, 123, 124, 125));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material67");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material67')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(126, 127, 128, 129));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material68");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material68')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(130, 131, 132, 133));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant43");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant43')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(134, 135, 136, 137));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant44");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant44')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(1D, 2D), new UnitSpherical(3D, 4D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1, 2), new Spherical(3, 4) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant45");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant45')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(25D, 26D, 27D), new Cartesian(28D, 29D, 30D)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(25, 26, 27)), Spherical.fromCartesian3(new Cartesian3(28, 29, 30)) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant46");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant46')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.267261241912424, 0.534522483824849, 0.801783725737273),
										new UnitCartesian(0.455842305838552, 0.56980288229819, 0.683763458757828)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273)), Spherical.fromCartesian3(new Cartesian3(0.455842305838552, 0.56980288229819, 0.683763458757828)) ], 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant47");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant47')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(138, 139, 140, 141));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant48");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant48')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(142, 143, 144, 145));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/18", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/18');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(125D, 126D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(125, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(206, 207, 208, 209));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(207, 208, 209, 206));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(210, 211, 212, 213));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(211, 212, 213, 210));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(125.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(125.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(127D, 128D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(127, 128));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(129D, 130D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(129, 130));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(131D, 132D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(131, 132));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(214, 215, 216, 217));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(215, 216, 217, 214));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(218, 219, 220, 221));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(219, 220, 221, 218));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(126.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(126.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(127.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(127.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material69");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material69')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(146, 147, 148, 149));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material70");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material70')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(150, 151, 152, 153));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material71");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material71')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(154, 155, 156, 157));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.607843137254902, 0.611764705882353, 0.615686274509804, 0.603921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material72");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material72')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(158, 159, 160, 161));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant49");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant49')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(162, 163, 164, 165));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/19", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/19');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(133D, 134D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(133, 134));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(222, 223, 224, 225));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(223, 224, 225, 222));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(226, 227, 228, 229));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(128.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(128.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(135D, 136D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(135, 136));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(137D, 138D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(137, 138));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(139D, 140D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(139, 140));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(230, 231, 232, 233));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(231, 232, 233, 230));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(234, 235, 236, 237));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(235, 236, 237, 234));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(129.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(129.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(130.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(130.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material73");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material73')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(166, 167, 168, 169));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.654901960784314, 0.658823529411765, 0.662745098039216, 0.650980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material74");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material74')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(170, 171, 172, 173));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material75");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material75')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(174, 175, 176, 177));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material76");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material76')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(178, 179, 180, 181));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant50");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant50')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(182, 183, 184, 185));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.717647058823529, 0.72156862745098, 0.725490196078431, 0.713725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/20", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/20');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(141D, 142D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(141, 142));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(238, 239, 240, 241));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(242, 243, 244, 245));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(243, 244, 245, 242));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(131.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(131.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(143D, 144D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(143, 144));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(145D, 146D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(145, 146));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(147D, 148D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(147, 148));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(246, 247, 248, 249));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(250, 251, 252, 253));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(132.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(132.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(133.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(133.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material77");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material77')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(186, 187, 188, 189));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material78");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material78')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(190, 191, 192, 193));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material79");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material79')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(194, 195, 196, 197));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material80");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material80')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(198, 199, 200, 201));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant51");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant51')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(202, 203, 204, 205));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.796078431372549, 0.8, 0.803921568627451, 0.792156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/21", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/21');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(149D, 150D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(149, 150));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(254, 0, 1, 2));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(0, 1, 2, 254));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(3, 4, 5, 6));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(4, 5, 6, 3));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(134.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(134.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(151D, 152D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(151, 152));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(153D, 154D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(153, 154));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(155D, 156D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(155, 156));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(7, 8, 9, 10));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(8, 9, 10, 7));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(11, 12, 13, 14));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(12, 13, 14, 11));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(135.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(135.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(136.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(136.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material81");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material81')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(206, 207, 208, 209));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material82");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material82')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(210, 211, 212, 213));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material83");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material83')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(214, 215, 216, 217));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material84");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material84')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(218, 219, 220, 221));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant52");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant52')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(222, 223, 224, 225));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/22", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/22');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(157D, 158D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(157, 158));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(15, 16, 17, 18));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(16, 17, 18, 15));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(19, 20, 21, 22));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(20, 21, 22, 19));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(137.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(137.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(159D, 160D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(159, 160));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(161D, 162D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(161, 162));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(163D, 164D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(163, 164));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(23, 24, 25, 26));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(24, 25, 26, 23));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(27, 28, 29, 30));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(28, 29, 30, 27));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(138.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(138.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(139.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(139.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material85");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material85')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(226, 227, 228, 229));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material86");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material86')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(230, 231, 232, 233));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material87");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material87')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(234, 235, 236, 237));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material88");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material88')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(238, 239, 240, 241));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant53");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant53')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(242, 243, 244, 245));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant54");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant54')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(246, 247, 248, 249));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant55");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant55')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(250, 251, 252, 253));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/23", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/23');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(165D, 166D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(165, 166));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(31, 32, 33, 34));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(32, 33, 34, 31));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(35, 36, 37, 38));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(36, 37, 38, 35));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(140.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(140.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(167D, 168D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(167, 168));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(169D, 170D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(169, 170));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(171D, 172D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(171, 172));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(39, 40, 41, 42));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(40, 41, 42, 39));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(43, 44, 45, 46));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(44, 45, 46, 43));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(141.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(141.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(142.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(142.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material89");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material89')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(254, 0, 1, 2));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material90");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material90')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(3, 4, 5, 6));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material91");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material91')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(7, 8, 9, 10));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material92");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material92')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(11, 12, 13, 14));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant56");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant56')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(15, 16, 17, 18));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/24", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/24');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(173D, 174D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(173, 174));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(47, 48, 49, 50));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(51, 52, 53, 54));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(143.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(143.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(175D, 176D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(175, 176));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(177D, 178D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(177, 178));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(179D, 180D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(179, 180));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(55, 56, 57, 58));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(59, 60, 61, 62));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(60, 61, 62, 59));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(144.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(144.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(145.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(145.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material93");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material93')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(19, 20, 21, 22));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material94");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material94')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(23, 24, 25, 26));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material95");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material95')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(27, 28, 29, 30));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material96");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material96')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(31, 32, 33, 34));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.125490196078431, 0.129411764705882, 0.133333333333333, 0.12156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant57");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant57')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(35, 36, 37, 38));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/25", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/25');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(181D, 182D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(181, 182));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(63, 64, 65, 66));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(67, 68, 69, 70));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(146.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(146.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(183D, 184D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(183, 184));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(185D, 186D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(185, 186));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(187D, 188D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(187, 188));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(71, 72, 73, 74));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(72, 73, 74, 71));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(75, 76, 77, 78));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(76, 77, 78, 75));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(147.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(147.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(148.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(148.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material97");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material97')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(39, 40, 41, 42));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material98");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material98')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(43, 44, 45, 46));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.172549019607843, 0.176470588235294, 0.180392156862745, 0.168627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material99");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material99')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(47, 48, 49, 50));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material100");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material100')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(51, 52, 53, 54));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant58");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant58')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(55, 56, 57, 58));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/26", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/26');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(189D, 190D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(189, 190));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(79, 80, 81, 82));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(80, 81, 82, 79));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(83, 84, 85, 86));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(84, 85, 86, 83));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(149.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(149.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(191D, 192D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(191, 192));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(193D, 194D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(193, 194));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(195D, 196D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(195, 196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(87, 88, 89, 90));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(88, 89, 90, 87));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(91, 92, 93, 94));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(92, 93, 94, 91));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(150.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(150.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(151.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(151.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material101");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material101')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(59, 60, 61, 62));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material102");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material102')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(63, 64, 65, 66));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material103");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material103')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(67, 68, 69, 70));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material104");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material104')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(71, 72, 73, 74));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant59");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant59')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(75, 76, 77, 78));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/27", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/27');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(197D, 198D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(197, 198));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(95, 96, 97, 98));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(96, 97, 98, 95));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(99, 100, 101, 102));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(100, 101, 102, 99));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(152.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(152.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(199D, 200D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(199, 200));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(201D, 202D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(201, 202));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(203D, 204D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(203, 204));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(103, 104, 105, 106));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(104, 105, 106, 103));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(107, 108, 109, 110));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(153.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(153.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(154.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(154.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material105");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material105')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(79, 80, 81, 82));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material106");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material106')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(83, 84, 85, 86));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material107");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material107')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(87, 88, 89, 90));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material108");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material108')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(91, 92, 93, 94));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant60");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant60')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(95, 96, 97, 98));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant61");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant61')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(5D, 6D), new UnitSpherical(7D, 8D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(5, 6), new Spherical(7, 8) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant62");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant62')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(31D, 32D, 33D), new Cartesian(34D, 35D, 36D)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(31, 32, 33)), Spherical.fromCartesian3(new Cartesian3(34, 35, 36)) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant63");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant63')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.502570711032417, 0.574366526894191, 0.646162342755964),
										new UnitCartesian(0.523423922590214, 0.575766314849235, 0.628108707108257)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.fan.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.502570711032417, 0.574366526894191, 0.646162342755964)), Spherical.fromCartesian3(new Cartesian3(0.523423922590214, 0.575766314849235, 0.628108707108257)) ], 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant64");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant64')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(99, 100, 101, 102));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_image')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/28", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.image.getValue(date)).toEqual('http://example.com/28');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(205D, 206D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(205, 206));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(111, 112, 113, 114));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(112, 113, 114, 111));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_grid')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(115, 116, 117, 118));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(116, 117, 118, 115));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(155.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(155.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(207D, 208D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(207, 208));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(209D, 210D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(209, 210));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(211D, 212D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(211, 212));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(119, 120, 121, 122));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(120, 121, 122, 119));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(123, 124, 125, 126));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(124, 125, 126, 123));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(156.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(date)).toEqual(156.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(157.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(157.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material109");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material109')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(103, 104, 105, 106));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.407843137254902, 0.411764705882353, 0.415686274509804, 0.403921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material110");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material110')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(107, 108, 109, 110));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material111");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material111')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(111, 112, 113, 114));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material112");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material112')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(115, 116, 117, 118));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant65");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant65')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(119, 120, 121, 122));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.fan.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualVector() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant66");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant66')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(123, 124, 125, 126));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.color.getValue(date)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant67");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant67')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitSpherical(new UnitSpherical(3D, 4D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(3, 4)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant68");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant68')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeCartesian(new Cartesian(25D, 26D, 27D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(25, 26, 27));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant69");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant69')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitCartesian(new UnitCartesian(0.455842305838552, 0.56980288229819, 0.683763458757828));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(date)).toEqualEpsilon(new Cartesian3(0.455842305838552, 0.56980288229819, 0.683763458757828), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantPosition1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition1')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(28D, 29D, 30D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(28, 29, 30));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantDouble1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble1')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(158.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(158.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantPosition2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition2')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(31D, 32D, 33D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(31, 32, 33));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantDouble2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble2')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(159.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(159.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Reference");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('Reference')).toBeDefined();");
				{
					cesiumlanguagewriter.StringCesiumWriter w = packet.openDescriptionProperty();
					try {
						w.writeReference(new Reference("Constant", "description"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeReference(new Reference("Constant", "position"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeReference(new Reference("Constant", "orientation"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeReference(new Reference("Constant", "viewFrom"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openImageProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "image")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "eyeOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "horizontalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "verticalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "heightReference")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.heightReference.getValue(date)).toEqual(constant.billboard.heightReference.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "color")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "alignedAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openSizeInMetersProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "sizeInMeters")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffsetScaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "imageSubRegion")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "dimensions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("box", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(constant.box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.corridor.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.CornerTypeCesiumWriter w2 = w.openCornerTypeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "cornerType")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("corridor", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(date)).toEqual(constant.corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "length")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "topRadius")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "bottomRadius")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("cylinder", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(date)).toEqual(constant.cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "numberOfVerticalLines")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "slices")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMajorAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMinorAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("ellipse", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(date)).toEqual(constant.ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "numberOfVerticalLines")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "radii")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("ellipsoid", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(constant.ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "stackPartitions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "slicePartitions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "subdivisions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.StringCesiumWriter w2 = w.openTextProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "text")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.FontCesiumWriter w2 = w.openFontProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "font")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.LabelStyleCesiumWriter w2 = w.openStyleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "style")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "eyeOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "horizontalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "verticalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "heightReference")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.heightReference.getValue(date)).toEqual(constant.label.heightReference.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "fillColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffsetScaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openGltfProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "uri")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "minimumPixelSize")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "maximumScale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openIncrementallyLoadTexturesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "incrementallyLoadTextures")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openRunAnimationsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "runAnimations")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "heightReference")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.heightReference.getValue(date)).toEqual(constant.model.heightReference.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NodeTransformationsCesiumWriter w2 = w.openNodeTransformationsProperty();
							try {
								{
									cesiumlanguagewriter.NodeTransformationCesiumWriter a = w2.openNodeTransformationProperty("referenceProp");
									try {
										{
											cesiumlanguagewriter.TranslationCesiumWriter w3 = a.openTranslationProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "translation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.translation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.translation.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.RotationCesiumWriter w3 = a.openRotationProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "rotation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.rotation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.rotation.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.ScaleCesiumWriter w3 = a.openScaleProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "scale")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.scale.getValue(date)).toEqual(constant.model.nodeTransformations.prop.scale.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
									} finally {
										DisposeHelper.dispose(a);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "resolution")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "leadTime")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "trailTime")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(constant.path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "pixelSize")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HeightReferenceCesiumWriter w2 = w.openHeightReferenceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "heightReference")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.heightReference.getValue(date)).toEqual(constant.point.heightReference.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "color")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "scaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.polygon.hierarchy.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("polygon", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(date)).toEqual(constant.polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerPositionHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "perPositionHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeTop")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeBottom")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.polyline.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("polyline", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(date)).toEqual(constant.polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFollowSurfaceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "followSurface")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.followSurface.getValue(date)).toEqual(constant.polyline.followSurface.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "coordinates")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangle", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(date)).toEqual(constant.rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "closeTop")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeTop.getValue(date)).toEqual(constant.rectangle.closeTop.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "closeBottom")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeBottom.getValue(date)).toEqual(constant.rectangle.closeBottom.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMinimumHeightsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList(
										"billboard", "scale")), new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.minimumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMaximumHeightsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList(
										"billboard", "scale")), new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.maximumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(constant.wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "innerHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "outerHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "minimumClockAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "maximumClockAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentIntersection")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionColor")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionWidth")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "show")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "xHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "yHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerDirectionRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "perDirectionRadius")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("fan", "material", "color")));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(constant.fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "fill")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outline")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "numberOfRings")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "color")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "direction")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "length")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "minimumLengthInPixels")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeReferenceValuesIndividual();
	}

	final private void writeReferenceValuesIndividual() {
		writeReferenceValuesIndividualDescription();
		writeReferenceValuesIndividualPosition();
		writeReferenceValuesIndividualOrientation();
		writeReferenceValuesIndividualViewFrom();
		writeReferenceValuesIndividualBillboard();
		writeReferenceValuesIndividualBox();
		writeReferenceValuesIndividualCorridor();
		writeReferenceValuesIndividualCylinder();
		writeReferenceValuesIndividualEllipse();
		writeReferenceValuesIndividualEllipsoid();
		writeReferenceValuesIndividualLabel();
		writeReferenceValuesIndividualModel();
		writeReferenceValuesIndividualPath();
		writeReferenceValuesIndividualPoint();
		writeReferenceValuesIndividualPolygon();
		writeReferenceValuesIndividualPolyline();
		writeReferenceValuesIndividualRectangle();
		writeReferenceValuesIndividualWall();
		writeReferenceValuesIndividualConicSensor();
		writeReferenceValuesIndividualCustomPatternSensor();
		writeReferenceValuesIndividualRectangularSensor();
		writeReferenceValuesIndividualFan();
		writeReferenceValuesIndividualVector();
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("VelocityPosition");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('VelocityPosition')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStartDate.addSeconds(60D)), TestGenerateValidationDocument
								.<Cartesian> createList(new Cartesian(1D, 2D, 3D), new Cartesian(61D, 122D, 183D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(1, 2, 3));");
						TextWriterHelper.writeLine(m_assertionsWriter,
								"    expect(e.position.getValue(JulianDate.addSeconds(documentStartDate, 60, new JulianDate()))).toEqual(new Cartesian3(61, 122, 183));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("velocityReference1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('velocityReference1')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeVelocityReference(new Reference("VelocityPosition", "position"));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.billboard.alignedAxis.getValue(JulianDate.addSeconds(documentStartDate, 50, new JulianDate()))).toEqualEpsilon(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273), 1e-13);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualDescription() {}

	final private void writeReferenceValuesIndividualPosition() {}

	final private void writeReferenceValuesIndividualOrientation() {}

	final private void writeReferenceValuesIndividualViewFrom() {}

	final private void writeReferenceValuesIndividualBillboard() {}

	final private void writeReferenceValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference1')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference3");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference3')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference4");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference4')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference5");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference5')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference6");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference6')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference7");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference7')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference8");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference8')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference9");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference9')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference10");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference10')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference11");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference11')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference12");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference12')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference13");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference13')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference14");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference14')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference15");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference15')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualLabel() {}

	final private void writeReferenceValuesIndividualModel() {}

	final private void writeReferenceValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference16");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference16')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineWidth")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineWidth.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference17");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference17')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineArrow", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineArrow').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference18");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference18')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "glowPower")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.glowPower.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference19");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference19')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference20");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference20')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference21");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference21')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualPoint() {}

	final private void writeReferenceValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference22");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference22')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference23");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference23')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference24");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference24')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference25");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference25')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineWidth")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineWidth.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference26");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference26')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineArrow", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineArrow').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference27");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference27')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "glowPower")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.glowPower.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference28");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference28')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference29");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference29')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference30");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference30')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference31");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference31')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference32");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference32')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference33");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference33')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference34");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference34')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference35");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference35')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference36");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference36')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference37");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference37')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial",
																"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference38");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference38')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid",
														createList("conicSensor", "lateralSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference39");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference39')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe",
														createList("conicSensor", "lateralSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial",
																"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference40");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference40')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference41");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference41')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid",
														createList("conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid",
														createList("conicSensor", "ellipsoidSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference42");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference42')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference43");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference43')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference44");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference44')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference45");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference45')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference46");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference46')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference47");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference47')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference48");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference48')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference49");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference49')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference50");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference50')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference51");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference51')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference52");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference52')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference53");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference53')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference54");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference54')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference55");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference55')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference56");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference56')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference57");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference57')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference58");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference58')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference59");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference59')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference60");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference60')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference61");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference61')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference62");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference62')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference63");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference63')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference64");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference64')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference65");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference65')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference66");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference66')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference67");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference67')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference68");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference68')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference69");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference69')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference70");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference70')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference71");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference71')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference72");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference72')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference73");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference73')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference74");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference74')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference75");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference75')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference76");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference76')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
																"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image",
														createList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
																"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference77");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference77')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
																"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference78");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference78')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference79");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference79')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference80");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference80')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference81");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference81')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference82");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference82')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "image")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference83");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference83')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference84");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference84')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "offset")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualVector() {}

	final private void writeSampledValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Sampled");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('Sampled')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Cartesian> createList(
								new Cartesian(34D, 35D, 36D), new Cartesian(37D, 38D, 39D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(34, 35, 36));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(37, 38, 39));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeUnitQuaternion(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<UnitQuaternion> createList(new UnitQuaternion(0.426162351429341, 0.473513723810378, 0.520865096191416, 0.568216468572454), new UnitQuaternion(0.446949206712144,
										0.48132991492077, 0.515710623129397, 0.550091331338023)));
						TextWriterHelper
								.writeLine(m_assertionsWriter,
										"    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.473513723810378, 0.520865096191416, 0.568216468572454, 0.426162351429341), 1e-14);");
						TextWriterHelper
								.writeLine(m_assertionsWriter,
										"    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.48132991492077, 0.515710623129397, 0.550091331338023, 0.446949206712144), 1e-14);");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Cartesian> createList(
								new Cartesian(40D, 41D, 42D), new Cartesian(43D, 44D, 45D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(40, 41, 42));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(43, 44, 45));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										160.0, 161.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(160.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(161.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Rectangular> createList(new Rectangular(213D, 214D), new Rectangular(215D, 216D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(213, 214));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(215, 216));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(46D, 47D, 48D), new Cartesian(49D, 50D, 51D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(46, 47, 48));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(49, 50, 51));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(127, 128, 129, 130), ColorHelper.fromArgb(131, 132, 133, 134)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(132, 133, 134, 131));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										162.0, 163.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(162.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(163.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitCartesian> createList(new UnitCartesian(0.502570711032417, 0.574366526894191, 0.646162342755964), new UnitCartesian(0.523423922590214, 0.575766314849235,
												0.628108707108257)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.502570711032417, 0.574366526894191, 0.646162342755964), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.523423922590214, 0.575766314849235, 0.628108707108257), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										164.0, 165.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStartDate)).toEqual(164.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStopDate)).toEqual(165.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										166.0, 167.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStartDate)).toEqual(166.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStopDate)).toEqual(167.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(29D, 30D, 31D, 32D), new NearFarScalar(33D, 34D, 35D, 36D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(29, 30, 31, 32));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(33, 34, 35, 36));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(37D, 38D, 39D, 40D), new NearFarScalar(41D, 42D, 43D, 44D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(37, 38, 39, 40));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(41, 42, 43, 44));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(45D, 46D, 47D, 48D), new NearFarScalar(49D, 50D, 51D, 52D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(45, 46, 47, 48));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(49, 50, 51, 52));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeBoundingRectangle(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<BoundingRectangle> createList(BoundingRectangle.fromWidthHeight(5D, 6D, 7D, 8D), BoundingRectangle.fromWidthHeight(9D, 10D, 11D, 12D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(5, 6, 7, 8));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(9, 10, 11, 12));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(52D, 53D, 54D), new Cartesian(55D, 56D, 57D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(52, 53, 54));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(55, 56, 57));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(135, 136, 137, 138), ColorHelper.fromArgb(139, 140, 141, 142)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(143, 144, 145, 146), ColorHelper.fromArgb(147, 148, 149, 150)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										168.0, 169.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(168.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(169.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										170.0, 171.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStartDate)).toEqual(170.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStopDate)).toEqual(171.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										172.0, 173.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStartDate)).toEqual(172.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStopDate)).toEqual(173.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										174.0, 175.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(174.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(175.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										176.0, 177.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(176.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(177.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(151, 152, 153, 154), ColorHelper.fromArgb(155, 156, 157, 158)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(159, 160, 161, 162), ColorHelper.fromArgb(163, 164, 165, 166)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										178.0, 179.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(178.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(179.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										180.0, 181.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(180.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(181.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										182.0, 183.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(182.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(183.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										184.0, 185.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(184.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(185.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(167, 168, 169, 170), ColorHelper.fromArgb(171, 172, 173, 174)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(175, 176, 177, 178), ColorHelper.fromArgb(179, 180, 181, 182)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										186.0, 187.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(186.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(187.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										188.0, 189.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(188.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(189.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										190.0, 191.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(190.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(191.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										192.0, 193.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(192.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(193.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										194.0, 195.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(194.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(195.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										196.0, 197.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(196.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(197.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										198.0, 199.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(198.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(199.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										200.0, 201.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(200.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(201.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										202.0, 203.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(202.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(203.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										204.0, 205.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(204.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(205.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(183, 184, 185, 186), ColorHelper.fromArgb(187, 188, 189, 190)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(191, 192, 193, 194), ColorHelper.fromArgb(195, 196, 197, 198)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										206.0, 207.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(206.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(207.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										208.0, 209.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(208.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(209.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(58D, 59D, 60D), new Cartesian(61D, 62D, 63D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(58, 59, 60));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(61, 62, 63));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(199, 200, 201, 202), ColorHelper.fromArgb(203, 204, 205, 206)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(207, 208, 209, 210), ColorHelper.fromArgb(211, 212, 213, 214)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										210.0, 211.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(210.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(211.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										212.0, 213.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(212.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(213.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										214.0, 215.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(214.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(215.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										216.0, 217.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(216.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(217.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										218.0, 219.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStartDate)).toEqual(218.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStopDate)).toEqual(219.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Rectangular> createList(new Rectangular(217D, 218D), new Rectangular(219D, 220D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(217, 218));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(219, 220));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(64D, 65D, 66D), new Cartesian(67D, 68D, 69D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(64, 65, 66));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(67, 68, 69));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(215, 216, 217, 218), ColorHelper.fromArgb(219, 220, 221, 222)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(223, 224, 225, 226), ColorHelper.fromArgb(227, 228, 229, 230)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										220.0, 221.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(220.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(221.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(53D, 54D, 55D, 56D), new NearFarScalar(57D, 58D, 59D, 60D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(53, 54, 55, 56));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(57, 58, 59, 60));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(61D, 62D, 63D, 64D), new NearFarScalar(65D, 66D, 67D, 68D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(61, 62, 63, 64));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(65, 66, 67, 68));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										222.0, 223.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStartDate)).toEqual(222.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStopDate)).toEqual(223.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										224.0, 225.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(224.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(225.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										226.0, 227.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(226.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(227.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										228.0, 229.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStartDate)).toEqual(228.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStopDate)).toEqual(229.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										230.0, 231.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStartDate)).toEqual(230.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStopDate)).toEqual(231.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										232.0, 233.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(232.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(233.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										234.0, 235.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(234.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(235.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(231, 232, 233, 234), ColorHelper.fromArgb(235, 236, 237, 238)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										236.0, 237.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(236.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(237.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(239, 240, 241, 242), ColorHelper.fromArgb(243, 244, 245, 246)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(247, 248, 249, 250), ColorHelper.fromArgb(251, 252, 253, 254)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										238.0, 239.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(238.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(239.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(69D, 70D, 71D, 72D), new NearFarScalar(73D, 74D, 75D, 76D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(69, 70, 71, 72));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(73, 74, 75, 76));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(77D, 78D, 79D, 80D), new NearFarScalar(81D, 82D, 83D, 84D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(77, 78, 79, 80));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(81, 82, 83, 84));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										240.0, 241.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStartDate)).toEqual(240.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStopDate)).toEqual(241.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										242.0, 243.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(242.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(243.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										244.0, 245.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(244.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(245.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										246.0, 247.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(246.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(247.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(0, 1, 2, 3), ColorHelper.fromArgb(4, 5, 6, 7)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(1, 2, 3, 0));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(5, 6, 7, 4));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(8, 9, 10, 11), ColorHelper.fromArgb(12, 13, 14, 15)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										248.0, 249.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(248.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(249.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										250.0, 251.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStartDate)).toEqual(250.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStopDate)).toEqual(251.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										252.0, 253.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(252.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(253.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(16, 17, 18, 19), ColorHelper.fromArgb(20, 21, 22, 23)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsen(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<CartographicExtent> createList(new CartographicExtent(1.14601836602552, 0.575222039230621, 0.00442571243572409, 1.00442571243572), new CartographicExtent(
												0.433629385640828, 1.43362938564083, 0.862833058845931, 0.292036732051034)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(1.14601836602552, 0.575222039230621, 0.00442571243572409, 1.00442571243572));");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.433629385640828, 1.43362938564083, 0.862833058845931, 0.292036732051034));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										254.0, 255.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(254.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(255.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										256.0, 257.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(256.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(257.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										258.0, 259.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(258.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(259.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										260.0, 261.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(260.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(261.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										262.0, 263.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(262.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(263.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(24, 25, 26, 27), ColorHelper.fromArgb(28, 29, 30, 31)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(32, 33, 34, 35), ColorHelper.fromArgb(36, 37, 38, 39)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										264.0, 265.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(264.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(265.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										266.0, 267.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(266.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(267.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(40, 41, 42, 43), ColorHelper.fromArgb(44, 45, 46, 47)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(48, 49, 50, 51), ColorHelper.fromArgb(52, 53, 54, 55)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										268.0, 269.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(268.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(269.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										270.0, 271.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(270.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(271.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										272.0, 273.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(272.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(273.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										274.0, 275.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(274.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(275.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										276.0, 277.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(276.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(277.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										278.0, 279.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(278.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(279.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										280.0, 281.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(280.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(281.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(64, 65, 66, 67), ColorHelper.fromArgb(68, 69, 70, 71)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(72, 73, 74, 75), ColorHelper.fromArgb(76, 77, 78, 79)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(80, 81, 82, 83), ColorHelper.fromArgb(84, 85, 86, 87)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(88, 89, 90, 91), ColorHelper.fromArgb(92, 93, 94, 95)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(96, 97, 98, 99), ColorHelper.fromArgb(100, 101, 102, 103)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(104, 105, 106, 107), ColorHelper.fromArgb(108, 109, 110, 111)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										282.0, 283.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(282.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(283.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										284.0, 285.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(284.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(285.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(112, 113, 114, 115), ColorHelper.fromArgb(116, 117, 118, 119)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										286.0, 287.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(286.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(287.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(120, 121, 122, 123), ColorHelper.fromArgb(124, 125, 126, 127)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(125, 126, 127, 124));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(136, 137, 138, 139), ColorHelper.fromArgb(140, 141, 142, 143)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(144, 145, 146, 147), ColorHelper.fromArgb(148, 149, 150, 151)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(152, 153, 154, 155), ColorHelper.fromArgb(156, 157, 158, 159)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(153, 154, 155, 152));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(160, 161, 162, 163), ColorHelper.fromArgb(164, 165, 166, 167)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(165, 166, 167, 164));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										288.0, 289.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(288.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(289.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										290.0, 291.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(290.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(291.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										292.0, 293.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(292.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(293.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										294.0, 295.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(294.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(295.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(168, 169, 170, 171), ColorHelper.fromArgb(172, 173, 174, 175)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(173, 174, 175, 172));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										296.0, 297.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(296.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(297.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(176, 177, 178, 179), ColorHelper.fromArgb(180, 181, 182, 183)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(177, 178, 179, 176));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(184, 185, 186, 187), ColorHelper.fromArgb(188, 189, 190, 191)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(189, 190, 191, 188));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(192, 193, 194, 195), ColorHelper.fromArgb(196, 197, 198, 199)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(200, 201, 202, 203), ColorHelper.fromArgb(204, 205, 206, 207)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(201, 202, 203, 200));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(208, 209, 210, 211), ColorHelper.fromArgb(212, 213, 214, 215)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(216, 217, 218, 219), ColorHelper.fromArgb(220, 221, 222, 223)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										298.0, 299.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(298.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(299.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										300.0, 301.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStartDate)).toEqual(300.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStopDate)).toEqual(301.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(232, 233, 234, 235), ColorHelper.fromArgb(236, 237, 238, 239)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										302.0, 303.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(302.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(303.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										304.0, 305.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(304.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(305.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(240, 241, 242, 243), ColorHelper.fromArgb(244, 245, 246, 247)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(241, 242, 243, 240));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(245, 246, 247, 244));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Spherical> createList(new Spherical(4D, 5D, 6D), new Spherical(7D, 8D, 9D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(4, 5, 6)));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(7, 8, 9)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										306.0, 307.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStartDate)).toEqual(306.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStopDate)).toEqual(307.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										308.0, 309.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(308.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(309.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeSampledValuesIndividual();
	}

	final private void writeSampledValuesIndividual() {
		writeSampledValuesIndividualDescription();
		writeSampledValuesIndividualPosition();
		writeSampledValuesIndividualOrientation();
		writeSampledValuesIndividualViewFrom();
		writeSampledValuesIndividualBillboard();
		writeSampledValuesIndividualBox();
		writeSampledValuesIndividualCorridor();
		writeSampledValuesIndividualCylinder();
		writeSampledValuesIndividualEllipse();
		writeSampledValuesIndividualEllipsoid();
		writeSampledValuesIndividualLabel();
		writeSampledValuesIndividualModel();
		writeSampledValuesIndividualPath();
		writeSampledValuesIndividualPoint();
		writeSampledValuesIndividualPolygon();
		writeSampledValuesIndividualPolyline();
		writeSampledValuesIndividualRectangle();
		writeSampledValuesIndividualWall();
		writeSampledValuesIndividualConicSensor();
		writeSampledValuesIndividualCustomPatternSensor();
		writeSampledValuesIndividualRectangularSensor();
		writeSampledValuesIndividualFan();
		writeSampledValuesIndividualVector();
	}

	final private void writeSampledValuesIndividualDescription() {}

	final private void writeSampledValuesIndividualPosition() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled1')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicRadians(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Cartographic> createList(new Cartographic(0.716814692820414, 0.146018366025517, 9D), new Cartographic(0.575222039230621, 0.00442571243572409, 12D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(0.716814692820414, 0.146018366025517, 9));");
						TextWriterHelper
								.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.575222039230621, 0.00442571243572409, 12));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Cartographic> createList(new Cartographic(13D, 14D, 15D), new Cartographic(16D, 17D, 18D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(13, 14, 15));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(16, 17, 18));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesianVelocity(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Motion1<Cartesian>> createList(new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(7D, 8D, 9D), new Cartesian(10D, 11D, 12D)),
										new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(13D, 14D, 15D), new Cartesian(16D, 17D, 18D))));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(7, 8, 9));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(13, 14, 15));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualOrientation() {}

	final private void writeSampledValuesIndividualViewFrom() {}

	final private void writeSampledValuesIndividualBillboard() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(127, 128, 129, 130), ColorHelper.fromArgb(131, 132, 133, 134)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.501960784313725, 0.505882352941176, 0.509803921568627, 0.498039215686275), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitSpherical> createList(new UnitSpherical(5D, 6D), new UnitSpherical(7D, 8D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5, 6)));");
								TextWriterHelper
										.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(7, 8)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled6");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled6')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(135, 136, 137, 138), ColorHelper.fromArgb(139, 140, 141, 142)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled7");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled7')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(221D, 222D), new Rectangular(223D, 224D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(221, 222));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(223, 224));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(248, 249, 250, 251), ColorHelper.fromArgb(252, 253, 254, 0)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(249, 250, 251, 248));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled8");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled8')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(1, 2, 3, 4), ColorHelper.fromArgb(5, 6, 7, 8)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(310.0, 311.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(310.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(311.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(225D, 226D), new Rectangular(227D, 228D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(225, 226));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(227, 228));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(229D, 230D), new Rectangular(231D, 232D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(229, 230));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(231, 232));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(233D, 234D), new Rectangular(235D, 236D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(233, 234));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(235, 236));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled9");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled9')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(9, 10, 11, 12), ColorHelper.fromArgb(13, 14, 15, 16)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(10, 11, 12, 9));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(17, 18, 19, 20), ColorHelper.fromArgb(21, 22, 23, 24)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(18, 19, 20, 17));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(22, 23, 24, 21));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(312.0, 313.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(312.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(313.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(314.0, 315.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(314.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(315.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled10");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled10')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(143, 144, 145, 146), ColorHelper.fromArgb(147, 148, 149, 150)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled11");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled11')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(151, 152, 153, 154), ColorHelper.fromArgb(155, 156, 157, 158)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.596078431372549, 0.6, 0.603921568627451, 0.592156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled12");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled12')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(159, 160, 161, 162), ColorHelper.fromArgb(163, 164, 165, 166)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled13");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled13')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(167, 168, 169, 170), ColorHelper.fromArgb(171, 172, 173, 174)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled14");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled14')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(175, 176, 177, 178), ColorHelper.fromArgb(179, 180, 181, 182)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.690196078431373, 0.694117647058824, 0.698039215686274, 0.686274509803922), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled15");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled15')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(183, 184, 185, 186), ColorHelper.fromArgb(187, 188, 189, 190)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.737254901960784, 0.741176470588235, 0.745098039215686, 0.733333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled16");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled16')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(237D, 238D), new Rectangular(239D, 240D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(237, 238));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(239, 240));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(25, 26, 27, 28), ColorHelper.fromArgb(29, 30, 31, 32)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 27, 28, 25));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(30, 31, 32, 29));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled17");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled17')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(33, 34, 35, 36), ColorHelper.fromArgb(37, 38, 39, 40)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(34, 35, 36, 33));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(38, 39, 40, 37));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(316.0, 317.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(316.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(317.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(241D, 242D), new Rectangular(243D, 244D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(241, 242));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(243, 244));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(245D, 246D), new Rectangular(247D, 248D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(245, 246));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(247, 248));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(249D, 250D), new Rectangular(251D, 252D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(249, 250));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(251, 252));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled18");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled18')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(41, 42, 43, 44), ColorHelper.fromArgb(45, 46, 47, 48)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(42, 43, 44, 41));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(46, 47, 48, 45));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(49, 50, 51, 52), ColorHelper.fromArgb(53, 54, 55, 56)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(50, 51, 52, 49));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(54, 55, 56, 53));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(318.0, 319.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(318.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(319.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(320.0, 321.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(320.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(321.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled19");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled19')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(191, 192, 193, 194), ColorHelper.fromArgb(195, 196, 197, 198)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled20");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled20')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(199, 200, 201, 202), ColorHelper.fromArgb(203, 204, 205, 206)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled21");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled21')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(207, 208, 209, 210), ColorHelper.fromArgb(211, 212, 213, 214)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled22");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled22')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(215, 216, 217, 218), ColorHelper.fromArgb(219, 220, 221, 222)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled23");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled23')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(223, 224, 225, 226), ColorHelper.fromArgb(227, 228, 229, 230)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.87843137254902, 0.882352941176471, 0.886274509803922, 0.874509803921569), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled24");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled24')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(231, 232, 233, 234), ColorHelper.fromArgb(235, 236, 237, 238)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled25");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled25')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(253D, 254D), new Rectangular(255D, 256D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(253, 254));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(255, 256));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(57, 58, 59, 60), ColorHelper.fromArgb(61, 62, 63, 64)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(58, 59, 60, 57));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled26");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled26')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(65, 66, 67, 68), ColorHelper.fromArgb(69, 70, 71, 72)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(66, 67, 68, 65));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(322.0, 323.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(322.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(323.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(257D, 258D), new Rectangular(259D, 260D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(257, 258));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(259, 260));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(261D, 262D), new Rectangular(263D, 264D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(261, 262));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(263, 264));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(265D, 266D), new Rectangular(267D, 268D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(265, 266));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(267, 268));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled27");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled27')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(73, 74, 75, 76), ColorHelper.fromArgb(77, 78, 79, 80)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(78, 79, 80, 77));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(81, 82, 83, 84), ColorHelper.fromArgb(85, 86, 87, 88)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(86, 87, 88, 85));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(324.0, 325.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(324.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(325.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(326.0, 327.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(326.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(327.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled28");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled28')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(239, 240, 241, 242), ColorHelper.fromArgb(243, 244, 245, 246)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled29");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled29')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(247, 248, 249, 250), ColorHelper.fromArgb(251, 252, 253, 254)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.972549019607843, 0.976470588235294, 0.980392156862745, 0.968627450980392), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled30");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled30')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(0, 1, 2, 3), ColorHelper.fromArgb(4, 5, 6, 7)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled31");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled31')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(8, 9, 10, 11), ColorHelper.fromArgb(12, 13, 14, 15)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled32");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled32')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(16, 17, 18, 19), ColorHelper.fromArgb(20, 21, 22, 23)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled33");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled33')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(24, 25, 26, 27), ColorHelper.fromArgb(28, 29, 30, 31)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.113725490196078, 0.117647058823529, 0.12156862745098, 0.109803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled34");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled34')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(269D, 270D), new Rectangular(271D, 272D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(269, 270));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(271, 272));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(89, 90, 91, 92), ColorHelper.fromArgb(93, 94, 95, 96)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(90, 91, 92, 89));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(94, 95, 96, 93));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled35");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled35')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(97, 98, 99, 100), ColorHelper.fromArgb(101, 102, 103, 104)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(98, 99, 100, 97));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(328.0, 329.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(328.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(329.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(273D, 274D), new Rectangular(275D, 276D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(273, 274));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(275, 276));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(277D, 278D), new Rectangular(279D, 280D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(277, 278));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(279, 280));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(281D, 282D), new Rectangular(283D, 284D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(281, 282));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(283, 284));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled36");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled36')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(105, 106, 107, 108), ColorHelper.fromArgb(109, 110, 111, 112)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(113, 114, 115, 116), ColorHelper.fromArgb(117, 118, 119, 120)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(330.0, 331.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(330.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(331.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(332.0, 333.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(332.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(333.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled37");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled37')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(32, 33, 34, 35), ColorHelper.fromArgb(36, 37, 38, 39)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled38");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled38')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(40, 41, 42, 43), ColorHelper.fromArgb(44, 45, 46, 47)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.16078431372549, 0.164705882352941, 0.168627450980392, 0.156862745098039), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled39");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled39')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(48, 49, 50, 51), ColorHelper.fromArgb(52, 53, 54, 55)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled40");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled40')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled41");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled41')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(64, 65, 66, 67), ColorHelper.fromArgb(68, 69, 70, 71)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.254901960784314, 0.258823529411765, 0.262745098039216, 0.250980392156863), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled42");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled42')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(72, 73, 74, 75), ColorHelper.fromArgb(76, 77, 78, 79)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled43");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled43')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(285D, 286D), new Rectangular(287D, 288D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(285, 286));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(287, 288));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(121, 122, 123, 124), ColorHelper.fromArgb(125, 126, 127, 128)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(122, 123, 124, 121));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(126, 127, 128, 125));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled44");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled44')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(129, 130, 131, 132), ColorHelper.fromArgb(133, 134, 135, 136)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(130, 131, 132, 129));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(134, 135, 136, 133));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(334.0, 335.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(334.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(335.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(289D, 290D), new Rectangular(291D, 292D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(289, 290));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(291, 292));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(293D, 294D), new Rectangular(295D, 296D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(293, 294));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(295, 296));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(297D, 298D), new Rectangular(299D, 300D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(297, 298));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(299, 300));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled45");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled45')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(137, 138, 139, 140), ColorHelper.fromArgb(141, 142, 143, 144)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(138, 139, 140, 137));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(142, 143, 144, 141));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(145, 146, 147, 148), ColorHelper.fromArgb(149, 150, 151, 152)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(146, 147, 148, 145));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(150, 151, 152, 149));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(336.0, 337.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(336.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(337.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(338.0, 339.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(338.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(339.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled46");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled46')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(80, 81, 82, 83), ColorHelper.fromArgb(84, 85, 86, 87)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.333333333333333, 0.337254901960784, 0.341176470588235, 0.329411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled47");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled47')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(88, 89, 90, 91), ColorHelper.fromArgb(92, 93, 94, 95)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled48");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled48')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(96, 97, 98, 99), ColorHelper.fromArgb(100, 101, 102, 103)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled49");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled49')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(104, 105, 106, 107), ColorHelper.fromArgb(108, 109, 110, 111)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled50");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled50')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(112, 113, 114, 115), ColorHelper.fromArgb(116, 117, 118, 119)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualLabel() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled51");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled51')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(120, 121, 122, 123), ColorHelper.fromArgb(124, 125, 126, 127)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled52");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled52')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualModel() {}

	final private void writeSampledValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled53");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled53')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(136, 137, 138, 139), ColorHelper.fromArgb(140, 141, 142, 143)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.537254901960784, 0.541176470588235, 0.545098039215686, 0.533333333333333), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.552941176470588, 0.556862745098039, 0.56078431372549, 0.549019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled54");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled54')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(153, 154, 155, 156), ColorHelper.fromArgb(157, 158, 159, 160)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(154, 155, 156, 153));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(158, 159, 160, 157));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(161, 162, 163, 164), ColorHelper.fromArgb(165, 166, 167, 168)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(162, 163, 164, 161));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(166, 167, 168, 165));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(340.0, 341.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(340.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(341.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled55");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled55')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(169, 170, 171, 172), ColorHelper.fromArgb(173, 174, 175, 176)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(170, 171, 172, 169));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(174, 175, 176, 173));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled56");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled56')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(177, 178, 179, 180), ColorHelper.fromArgb(181, 182, 183, 184)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(342.0, 343.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(342.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(343.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled57");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled57')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(301D, 302D), new Rectangular(303D, 304D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(301, 302));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(303, 304));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(185, 186, 187, 188), ColorHelper.fromArgb(189, 190, 191, 192)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(190, 191, 192, 189));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled58");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled58')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(193, 194, 195, 196), ColorHelper.fromArgb(197, 198, 199, 200)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(194, 195, 196, 193));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(198, 199, 200, 197));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(344.0, 345.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(344.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(345.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(305D, 306D), new Rectangular(307D, 308D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(305, 306));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(307, 308));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(309D, 310D), new Rectangular(311D, 312D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(309, 310));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(311, 312));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(313D, 314D), new Rectangular(315D, 316D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(313, 314));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(315, 316));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled59");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled59')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(201, 202, 203, 204), ColorHelper.fromArgb(205, 206, 207, 208)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(209, 210, 211, 212), ColorHelper.fromArgb(213, 214, 215, 216)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(346.0, 347.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(346.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(347.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(348.0, 349.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(348.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(349.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled60");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled60')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(144, 145, 146, 147), ColorHelper.fromArgb(148, 149, 150, 151)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.568627450980392, 0.572549019607843, 0.576470588235294, 0.564705882352941), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.584313725490196, 0.588235294117647, 0.592156862745098, 0.580392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled61");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled61')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(152, 153, 154, 155), ColorHelper.fromArgb(156, 157, 158, 159)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled62");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled62')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(160, 161, 162, 163), ColorHelper.fromArgb(164, 165, 166, 167)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.631372549019608, 0.635294117647059, 0.63921568627451, 0.627450980392157), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled63");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled63')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(168, 169, 170, 171), ColorHelper.fromArgb(172, 173, 174, 175)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.67843137254902, 0.682352941176471, 0.686274509803922, 0.674509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled64");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled64')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(176, 177, 178, 179), ColorHelper.fromArgb(180, 181, 182, 183)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.709803921568627, 0.713725490196078, 0.717647058823529, 0.705882352941177), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled65");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled65')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(184, 185, 186, 187), ColorHelper.fromArgb(188, 189, 190, 191)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.725490196078431, 0.729411764705882, 0.733333333333333, 0.72156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled66");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled66')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(192, 193, 194, 195), ColorHelper.fromArgb(196, 197, 198, 199)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled67");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled67')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(200, 201, 202, 203), ColorHelper.fromArgb(204, 205, 206, 207)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPoint() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled68");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled68')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(208, 209, 210, 211), ColorHelper.fromArgb(212, 213, 214, 215)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.819607843137255, 0.823529411764706, 0.827450980392157, 0.815686274509804), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled69");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled69')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(216, 217, 218, 219), ColorHelper.fromArgb(220, 221, 222, 223)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.866666666666667, 0.870588235294118, 0.874509803921569, 0.862745098039216), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled70");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled70')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled71");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled71')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(317D, 318D), new Rectangular(319D, 320D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(317, 318));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(319, 320));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(217, 218, 219, 220), ColorHelper.fromArgb(221, 222, 223, 224)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(222, 223, 224, 221));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled72");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled72')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(225, 226, 227, 228), ColorHelper.fromArgb(229, 230, 231, 232)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(226, 227, 228, 225));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(350.0, 351.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(350.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(351.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(321D, 322D), new Rectangular(323D, 324D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(321, 322));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(323, 324));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(325D, 326D), new Rectangular(327D, 328D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(325, 326));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(327, 328));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(329D, 330D), new Rectangular(331D, 332D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(329, 330));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(331, 332));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled73");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled73')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(233, 234, 235, 236), ColorHelper.fromArgb(237, 238, 239, 240)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(234, 235, 236, 233));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(238, 239, 240, 237));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(241, 242, 243, 244), ColorHelper.fromArgb(245, 246, 247, 248)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(246, 247, 248, 245));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(352.0, 353.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(352.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(353.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(354.0, 355.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(354.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(355.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled74");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled74')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(232, 233, 234, 235), ColorHelper.fromArgb(236, 237, 238, 239)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.913725490196078, 0.917647058823529, 0.92156862745098, 0.909803921568627), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.929411764705882, 0.933333333333333, 0.937254901960784, 0.925490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled75");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled75')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(240, 241, 242, 243), ColorHelper.fromArgb(244, 245, 246, 247)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.945098039215686, 0.949019607843137, 0.952941176470588, 0.941176470588235), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.96078431372549, 0.964705882352941, 0.968627450980392, 0.956862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled76");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled76')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(248, 249, 250, 251), ColorHelper.fromArgb(252, 253, 254, 0)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled77");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled77')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(1, 2, 3, 4), ColorHelper.fromArgb(5, 6, 7, 8)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00784313725490196, 0.0117647058823529, 0.0156862745098039, 0.00392156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled78");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled78')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(9, 10, 11, 12), ColorHelper.fromArgb(13, 14, 15, 16)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled79");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled79')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(17, 18, 19, 20), ColorHelper.fromArgb(21, 22, 23, 24)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled80");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled80')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(249, 250, 251, 252), ColorHelper.fromArgb(253, 254, 0, 1)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(250, 251, 252, 249));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(254, 0, 1, 253));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(2, 3, 4, 5), ColorHelper.fromArgb(6, 7, 8, 9)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(356.0, 357.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(356.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(357.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled81");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled81')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(10, 11, 12, 13), ColorHelper.fromArgb(14, 15, 16, 17)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(15, 16, 17, 14));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled82");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled82')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(18, 19, 20, 21), ColorHelper.fromArgb(22, 23, 24, 25)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 20, 21, 18));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(23, 24, 25, 22));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(358.0, 359.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(358.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(359.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled83");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled83')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(333D, 334D), new Rectangular(335D, 336D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(333, 334));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(335, 336));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(27, 28, 29, 26));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 32, 33, 30));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled84");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled84')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(34, 35, 36, 37), ColorHelper.fromArgb(38, 39, 40, 41)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(35, 36, 37, 34));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(39, 40, 41, 38));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(360.0, 361.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(360.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(361.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(337D, 338D), new Rectangular(339D, 340D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(337, 338));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(339, 340));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(341D, 342D), new Rectangular(343D, 344D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(341, 342));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(343, 344));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(345D, 346D), new Rectangular(347D, 348D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(345, 346));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(347, 348));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled85");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled85')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(42, 43, 44, 45), ColorHelper.fromArgb(46, 47, 48, 49)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(50, 51, 52, 53), ColorHelper.fromArgb(54, 55, 56, 57)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(55, 56, 57, 54));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(362.0, 363.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(362.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(363.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(364.0, 365.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(364.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(365.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled86");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled86')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(25, 26, 27, 28), ColorHelper.fromArgb(29, 30, 31, 32)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.101960784313725, 0.105882352941176, 0.109803921568627, 0.0980392156862745), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled87");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled87')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(33, 34, 35, 36), ColorHelper.fromArgb(37, 38, 39, 40)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled88");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled88')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(41, 42, 43, 44), ColorHelper.fromArgb(45, 46, 47, 48)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled89");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled89')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(49, 50, 51, 52), ColorHelper.fromArgb(53, 54, 55, 56)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.196078431372549, 0.2, 0.203921568627451, 0.192156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled90");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled90')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(57, 58, 59, 60), ColorHelper.fromArgb(61, 62, 63, 64)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled91");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled91')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(65, 66, 67, 68), ColorHelper.fromArgb(69, 70, 71, 72)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled92");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled92')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(73, 74, 75, 76), ColorHelper.fromArgb(77, 78, 79, 80)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.290196078431373, 0.294117647058824, 0.298039215686275, 0.286274509803922), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled93");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled93')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(81, 82, 83, 84), ColorHelper.fromArgb(85, 86, 87, 88)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled94");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled94')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsenDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<CartographicExtent> createList(new CartographicExtent(17D, 18D, 19D, 20D), new CartographicExtent(21D, 22D, 23D, 24D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(17, 18, 19, 20));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(21, 22, 23, 24));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled95");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled95')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(89, 90, 91, 92), ColorHelper.fromArgb(93, 94, 95, 96)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled96");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled96')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(349D, 350D), new Rectangular(351D, 352D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(349, 350));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(351, 352));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(58, 59, 60, 61), ColorHelper.fromArgb(62, 63, 64, 65)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(59, 60, 61, 58));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(63, 64, 65, 62));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled97");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled97')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(66, 67, 68, 69), ColorHelper.fromArgb(70, 71, 72, 73)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(366.0, 367.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(366.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(367.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(353D, 354D), new Rectangular(355D, 356D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(353, 354));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(355, 356));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(357D, 358D), new Rectangular(359D, 360D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(357, 358));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(359, 360));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(361D, 362D), new Rectangular(363D, 364D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(361, 362));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(363, 364));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled98");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled98')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(74, 75, 76, 77), ColorHelper.fromArgb(78, 79, 80, 81)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(75, 76, 77, 74));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(82, 83, 84, 85), ColorHelper.fromArgb(86, 87, 88, 89)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(87, 88, 89, 86));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(368.0, 369.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(368.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(369.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(370.0, 371.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(370.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(371.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled99");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled99')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(97, 98, 99, 100), ColorHelper.fromArgb(101, 102, 103, 104)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.384313725490196, 0.388235294117647, 0.392156862745098, 0.380392156862745), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled100");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled100')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(105, 106, 107, 108), ColorHelper.fromArgb(109, 110, 111, 112)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled101");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled101')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(113, 114, 115, 116), ColorHelper.fromArgb(117, 118, 119, 120)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled102");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled102')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(121, 122, 123, 124), ColorHelper.fromArgb(125, 126, 127, 128)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.47843137254902, 0.482352941176471, 0.486274509803922, 0.474509803921569), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled103");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled103')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(129, 130, 131, 132), ColorHelper.fromArgb(133, 134, 135, 136)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled104");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled104')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(137, 138, 139, 140), ColorHelper.fromArgb(141, 142, 143, 144)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled105");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled105')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(365D, 366D), new Rectangular(367D, 368D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(365, 366));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(367, 368));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(90, 91, 92, 93), ColorHelper.fromArgb(94, 95, 96, 97)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(95, 96, 97, 94));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled106");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled106')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(98, 99, 100, 101), ColorHelper.fromArgb(102, 103, 104, 105)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(99, 100, 101, 98));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(103, 104, 105, 102));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(372.0, 373.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(372.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(373.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(369D, 370D), new Rectangular(371D, 372D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(369, 370));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(371, 372));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(373D, 374D), new Rectangular(375D, 376D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(373, 374));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(375, 376));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(377D, 378D), new Rectangular(379D, 380D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(377, 378));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(379, 380));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled107");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled107')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(106, 107, 108, 109), ColorHelper.fromArgb(110, 111, 112, 113)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(107, 108, 109, 106));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(111, 112, 113, 110));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(114, 115, 116, 117), ColorHelper.fromArgb(118, 119, 120, 121)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(374.0, 375.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(374.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(375.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(376.0, 377.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(376.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(377.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled108");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled108')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(145, 146, 147, 148), ColorHelper.fromArgb(149, 150, 151, 152)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.572549019607843, 0.576470588235294, 0.580392156862745, 0.568627450980392), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled109");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled109')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(153, 154, 155, 156), ColorHelper.fromArgb(157, 158, 159, 160)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled110");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled110')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(161, 162, 163, 164), ColorHelper.fromArgb(165, 166, 167, 168)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled111");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled111')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(169, 170, 171, 172), ColorHelper.fromArgb(173, 174, 175, 176)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.666666666666667, 0.670588235294118, 0.674509803921569, 0.662745098039216), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled112");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled112')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(177, 178, 179, 180), ColorHelper.fromArgb(181, 182, 183, 184)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.698039215686274, 0.701960784313725, 0.705882352941177, 0.694117647058824), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled113");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled113')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(185, 186, 187, 188), ColorHelper.fromArgb(189, 190, 191, 192)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled114");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled114')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(193, 194, 195, 196), ColorHelper.fromArgb(197, 198, 199, 200)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.76078431372549, 0.764705882352941, 0.768627450980392, 0.756862745098039), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled115");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled115')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(381D, 382D), new Rectangular(383D, 384D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(381, 382));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(383, 384));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(122, 123, 124, 125), ColorHelper.fromArgb(126, 127, 128, 129)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled116");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled116')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(130, 131, 132, 133), ColorHelper.fromArgb(134, 135, 136, 137)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(378.0, 379.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(378.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(379.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(385D, 386D), new Rectangular(387D, 388D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(385, 386));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(387, 388));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(389D, 390D), new Rectangular(391D, 392D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(389, 390));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(391, 392));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(393D, 394D), new Rectangular(395D, 396D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(393, 394));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(395, 396));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled117");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled117')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(138, 139, 140, 141), ColorHelper.fromArgb(142, 143, 144, 145)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(139, 140, 141, 138));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(143, 144, 145, 142));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(146, 147, 148, 149), ColorHelper.fromArgb(150, 151, 152, 153)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(380.0, 381.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(380.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(381.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(382.0, 383.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(382.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(383.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled118");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled118')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(201, 202, 203, 204), ColorHelper.fromArgb(205, 206, 207, 208)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled119");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled119')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(209, 210, 211, 212), ColorHelper.fromArgb(213, 214, 215, 216)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled120");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled120')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(217, 218, 219, 220), ColorHelper.fromArgb(221, 222, 223, 224)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.854901960784314, 0.858823529411765, 0.862745098039216, 0.850980392156863), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled121");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled121')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(225, 226, 227, 228), ColorHelper.fromArgb(229, 230, 231, 232)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled122");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled122')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(233, 234, 235, 236), ColorHelper.fromArgb(237, 238, 239, 240)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled123");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled123')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(397D, 398D), new Rectangular(399D, 400D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(397, 398));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(399, 400));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(154, 155, 156, 157), ColorHelper.fromArgb(158, 159, 160, 161)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled124");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled124')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(162, 163, 164, 165), ColorHelper.fromArgb(166, 167, 168, 169)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(167, 168, 169, 166));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(384.0, 385.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(384.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(385.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(401D, 402D), new Rectangular(403D, 404D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(401, 402));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(403, 404));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(405D, 406D), new Rectangular(407D, 408D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(405, 406));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(407, 408));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(409D, 410D), new Rectangular(411D, 412D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(409, 410));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(411, 412));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled125");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled125')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(170, 171, 172, 173), ColorHelper.fromArgb(174, 175, 176, 177)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(171, 172, 173, 170));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(175, 176, 177, 174));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(178, 179, 180, 181), ColorHelper.fromArgb(182, 183, 184, 185)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(179, 180, 181, 178));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(183, 184, 185, 182));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(386.0, 387.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(386.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(387.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(388.0, 389.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(388.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(389.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled126");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled126')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(241, 242, 243, 244), ColorHelper.fromArgb(245, 246, 247, 248)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.949019607843137, 0.952941176470588, 0.956862745098039, 0.945098039215686), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled127");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled127')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(249, 250, 251, 252), ColorHelper.fromArgb(253, 254, 0, 1)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.996078431372549, 0, 0.00392156862745098, 0.992156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled128");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled128')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(2, 3, 4, 5), ColorHelper.fromArgb(6, 7, 8, 9)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled129");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled129')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(10, 11, 12, 13), ColorHelper.fromArgb(14, 15, 16, 17)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled130");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled130')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(18, 19, 20, 21), ColorHelper.fromArgb(22, 23, 24, 25)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled131");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled131')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(413D, 414D), new Rectangular(415D, 416D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(413, 414));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(415, 416));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(186, 187, 188, 189), ColorHelper.fromArgb(190, 191, 192, 193)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(187, 188, 189, 186));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(191, 192, 193, 190));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled132");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled132')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(194, 195, 196, 197), ColorHelper.fromArgb(198, 199, 200, 201)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(195, 196, 197, 194));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(390.0, 391.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(390.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(391.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(417D, 418D), new Rectangular(419D, 420D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(417, 418));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(419, 420));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(421D, 422D), new Rectangular(423D, 424D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(421, 422));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(423, 424));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(425D, 426D), new Rectangular(427D, 428D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(425, 426));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(427, 428));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled133");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled133')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(202, 203, 204, 205), ColorHelper.fromArgb(206, 207, 208, 209)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(207, 208, 209, 206));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(210, 211, 212, 213), ColorHelper.fromArgb(214, 215, 216, 217)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(215, 216, 217, 214));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(392.0, 393.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(392.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(393.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(394.0, 395.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(394.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(395.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled134");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled134')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled135");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled135')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(34, 35, 36, 37), ColorHelper.fromArgb(38, 39, 40, 41)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.137254901960784, 0.141176470588235, 0.145098039215686, 0.133333333333333), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled136");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled136')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(42, 43, 44, 45), ColorHelper.fromArgb(46, 47, 48, 49)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.184313725490196, 0.188235294117647, 0.192156862745098, 0.180392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled137");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled137')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(50, 51, 52, 53), ColorHelper.fromArgb(54, 55, 56, 57)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled138");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled138')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(58, 59, 60, 61), ColorHelper.fromArgb(62, 63, 64, 65)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.231372549019608, 0.235294117647059, 0.23921568627451, 0.227450980392157), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled139");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled139')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(429D, 430D), new Rectangular(431D, 432D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(429, 430));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(431, 432));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(218, 219, 220, 221), ColorHelper.fromArgb(222, 223, 224, 225)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(219, 220, 221, 218));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled140");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled140')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(226, 227, 228, 229), ColorHelper.fromArgb(230, 231, 232, 233)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(231, 232, 233, 230));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(396.0, 397.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(396.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(397.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(433D, 434D), new Rectangular(435D, 436D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(433, 434));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(435, 436));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(437D, 438D), new Rectangular(439D, 440D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(437, 438));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(439, 440));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(441D, 442D), new Rectangular(443D, 444D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(441, 442));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(443, 444));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled141");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled141')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(234, 235, 236, 237), ColorHelper.fromArgb(238, 239, 240, 241)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(235, 236, 237, 234));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(242, 243, 244, 245), ColorHelper.fromArgb(246, 247, 248, 249)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(398.0, 399.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(398.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(399.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(400.0, 401.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(400.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(401.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled142");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled142')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(66, 67, 68, 69), ColorHelper.fromArgb(70, 71, 72, 73)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled143");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled143')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(74, 75, 76, 77), ColorHelper.fromArgb(78, 79, 80, 81)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled144");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled144')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(82, 83, 84, 85), ColorHelper.fromArgb(86, 87, 88, 89)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled145");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled145')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(90, 91, 92, 93), ColorHelper.fromArgb(94, 95, 96, 97)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled146");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled146')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(98, 99, 100, 101), ColorHelper.fromArgb(102, 103, 104, 105)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled147");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled147')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(445D, 446D), new Rectangular(447D, 448D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(445, 446));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(447, 448));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(250, 251, 252, 253), ColorHelper.fromArgb(254, 0, 1, 2)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled148");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled148')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(3, 4, 5, 6), ColorHelper.fromArgb(7, 8, 9, 10)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(402.0, 403.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(402.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(403.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(449D, 450D), new Rectangular(451D, 452D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(449, 450));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(451, 452));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(453D, 454D), new Rectangular(455D, 456D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(453, 454));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(455, 456));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(457D, 458D), new Rectangular(459D, 460D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(457, 458));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(459, 460));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled149");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled149')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(11, 12, 13, 14), ColorHelper.fromArgb(15, 16, 17, 18)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(19, 20, 21, 22), ColorHelper.fromArgb(23, 24, 25, 26)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(24, 25, 26, 23));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(404.0, 405.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(404.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(405.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(406.0, 407.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(406.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(407.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled150");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled150')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(106, 107, 108, 109), ColorHelper.fromArgb(110, 111, 112, 113)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.419607843137255, 0.423529411764706, 0.427450980392157, 0.415686274509804), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled151");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled151')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(114, 115, 116, 117), ColorHelper.fromArgb(118, 119, 120, 121)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled152");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled152')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(122, 123, 124, 125), ColorHelper.fromArgb(126, 127, 128, 129)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled153");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled153')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(130, 131, 132, 133), ColorHelper.fromArgb(134, 135, 136, 137)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled154");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled154')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(138, 139, 140, 141), ColorHelper.fromArgb(142, 143, 144, 145)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.56078431372549, 0.564705882352941, 0.568627450980392, 0.556862745098039), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled155");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled155')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(146, 147, 148, 149), ColorHelper.fromArgb(150, 151, 152, 153)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled156");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled156')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(154, 155, 156, 157), ColorHelper.fromArgb(158, 159, 160, 161)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.607843137254902, 0.611764705882353, 0.615686274509804, 0.603921568627451), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled157");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled157')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(461D, 462D), new Rectangular(463D, 464D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(461, 462));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(463, 464));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(27, 28, 29, 30), ColorHelper.fromArgb(31, 32, 33, 34)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(28, 29, 30, 27));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(32, 33, 34, 31));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled158");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled158')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(35, 36, 37, 38), ColorHelper.fromArgb(39, 40, 41, 42)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(36, 37, 38, 35));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(408.0, 409.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(408.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(409.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(465D, 466D), new Rectangular(467D, 468D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(465, 466));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(467, 468));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(469D, 470D), new Rectangular(471D, 472D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(469, 470));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(471, 472));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(473D, 474D), new Rectangular(475D, 476D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(473, 474));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(475, 476));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled159");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled159')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(43, 44, 45, 46), ColorHelper.fromArgb(47, 48, 49, 50)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(51, 52, 53, 54), ColorHelper.fromArgb(55, 56, 57, 58)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(52, 53, 54, 51));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(56, 57, 58, 55));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(410.0, 411.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(410.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(411.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(412.0, 413.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(412.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(413.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled160");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled160')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(162, 163, 164, 165), ColorHelper.fromArgb(166, 167, 168, 169)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.654901960784314, 0.658823529411765, 0.662745098039216, 0.650980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled161");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled161')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(170, 171, 172, 173), ColorHelper.fromArgb(174, 175, 176, 177)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled162");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled162')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(178, 179, 180, 181), ColorHelper.fromArgb(182, 183, 184, 185)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.717647058823529, 0.72156862745098, 0.725490196078431, 0.713725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled163");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled163')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(186, 187, 188, 189), ColorHelper.fromArgb(190, 191, 192, 193)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled164");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled164')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(194, 195, 196, 197), ColorHelper.fromArgb(198, 199, 200, 201)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled165");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled165')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(477D, 478D), new Rectangular(479D, 480D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(477, 478));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(479, 480));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(60, 61, 62, 59));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(64, 65, 66, 63));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled166");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled166')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(67, 68, 69, 70), ColorHelper.fromArgb(71, 72, 73, 74)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(68, 69, 70, 67));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(72, 73, 74, 71));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(414.0, 415.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(414.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(415.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(481D, 482D), new Rectangular(483D, 484D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(481, 482));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(483, 484));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(485D, 486D), new Rectangular(487D, 488D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(485, 486));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(487, 488));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(489D, 490D), new Rectangular(491D, 492D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(489, 490));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(491, 492));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled167");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled167')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(75, 76, 77, 78), ColorHelper.fromArgb(79, 80, 81, 82)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(83, 84, 85, 86), ColorHelper.fromArgb(87, 88, 89, 90)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(88, 89, 90, 87));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(416.0, 417.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(416.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(417.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(418.0, 419.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(418.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(419.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled168");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled168')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(202, 203, 204, 205), ColorHelper.fromArgb(206, 207, 208, 209)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.796078431372549, 0.8, 0.803921568627451, 0.792156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled169");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled169')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(210, 211, 212, 213), ColorHelper.fromArgb(214, 215, 216, 217)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled170");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled170')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(218, 219, 220, 221), ColorHelper.fromArgb(222, 223, 224, 225)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled171");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled171')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(226, 227, 228, 229), ColorHelper.fromArgb(230, 231, 232, 233)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled172");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled172')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(234, 235, 236, 237), ColorHelper.fromArgb(238, 239, 240, 241)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.937254901960784, 0.941176470588235, 0.945098039215686, 0.933333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled173");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled173')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(493D, 494D), new Rectangular(495D, 496D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(493, 494));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(495, 496));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(91, 92, 93, 94), ColorHelper.fromArgb(95, 96, 97, 98)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(92, 93, 94, 91));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(96, 97, 98, 95));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled174");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled174')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(99, 100, 101, 102), ColorHelper.fromArgb(103, 104, 105, 106)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(100, 101, 102, 99));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(420.0, 421.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(420.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(421.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(497D, 498D), new Rectangular(499D, 500D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(497, 498));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(499, 500));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(501D, 502D), new Rectangular(503D, 504D)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(501, 502));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(503, 504));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(505D, 506D), new Rectangular(507D, 508D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(505, 506));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(507, 508));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled175");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled175')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(107, 108, 109, 110), ColorHelper.fromArgb(111, 112, 113, 114)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(112, 113, 114, 111));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(115, 116, 117, 118), ColorHelper.fromArgb(119, 120, 121, 122)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(116, 117, 118, 115));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(120, 121, 122, 119));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(422.0, 423.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(422.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(423.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(424.0, 425.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(424.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(425.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled176");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled176')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(242, 243, 244, 245), ColorHelper.fromArgb(246, 247, 248, 249)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled177");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled177')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(250, 251, 252, 253), ColorHelper.fromArgb(254, 0, 1, 2)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled178");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled178')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(3, 4, 5, 6), ColorHelper.fromArgb(7, 8, 9, 10)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled179");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled179')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(11, 12, 13, 14), ColorHelper.fromArgb(15, 16, 17, 18)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled180");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled180')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(19, 20, 21, 22), ColorHelper.fromArgb(23, 24, 25, 26)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled181");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled181')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(509D, 510D), new Rectangular(511D, 512D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(509, 510));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(511, 512));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(123, 124, 125, 126), ColorHelper.fromArgb(127, 128, 129, 130)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(124, 125, 126, 123));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled182");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled182')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(131, 132, 133, 134), ColorHelper.fromArgb(135, 136, 137, 138)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(132, 133, 134, 131));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(426.0, 427.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(426.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(427.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(513D, 514D), new Rectangular(515D, 516D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(513, 514));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(515, 516));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(517D, 518D), new Rectangular(519D, 520D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(517, 518));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(519, 520));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(521D, 522D), new Rectangular(523D, 524D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(521, 522));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(523, 524));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled183");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled183')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(139, 140, 141, 142), ColorHelper.fromArgb(143, 144, 145, 146)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(144, 145, 146, 143));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(147, 148, 149, 150), ColorHelper.fromArgb(151, 152, 153, 154)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(428.0, 429.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(428.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(429.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(430.0, 431.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(430.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(431.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled184");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled184')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(27, 28, 29, 30), ColorHelper.fromArgb(31, 32, 33, 34)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.125490196078431, 0.129411764705882, 0.133333333333333, 0.12156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled185");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled185')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(35, 36, 37, 38), ColorHelper.fromArgb(39, 40, 41, 42)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled186");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled186')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(43, 44, 45, 46), ColorHelper.fromArgb(47, 48, 49, 50)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.172549019607843, 0.176470588235294, 0.180392156862745, 0.168627450980392), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled187");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled187')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(51, 52, 53, 54), ColorHelper.fromArgb(55, 56, 57, 58)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.219607843137255, 0.223529411764706, 0.227450980392157, 0.215686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled188");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled188')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled189");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled189')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(525D, 526D), new Rectangular(527D, 528D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(525, 526));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(527, 528));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(155, 156, 157, 158), ColorHelper.fromArgb(159, 160, 161, 162)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(156, 157, 158, 155));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled190");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled190')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(163, 164, 165, 166), ColorHelper.fromArgb(167, 168, 169, 170)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(432.0, 433.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(432.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(433.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(529D, 530D), new Rectangular(531D, 532D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(529, 530));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(531, 532));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(533D, 534D), new Rectangular(535D, 536D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(533, 534));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(535, 536));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(537D, 538D), new Rectangular(539D, 540D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(537, 538));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(539, 540));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled191");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled191')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(171, 172, 173, 174), ColorHelper.fromArgb(175, 176, 177, 178)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(434.0, 435.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(434.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(435.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(436.0, 437.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(436.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(437.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled192");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled192')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(67, 68, 69, 70), ColorHelper.fromArgb(71, 72, 73, 74)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled193");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled193')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(75, 76, 77, 78), ColorHelper.fromArgb(79, 80, 81, 82)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.313725490196078, 0.317647058823529, 0.32156862745098, 0.309803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled194");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled194')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(83, 84, 85, 86), ColorHelper.fromArgb(87, 88, 89, 90)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled195");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled195')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(91, 92, 93, 94), ColorHelper.fromArgb(95, 96, 97, 98)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.36078431372549, 0.364705882352941, 0.368627450980392, 0.356862745098039), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled196");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled196')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(99, 100, 101, 102), ColorHelper.fromArgb(103, 104, 105, 106)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.407843137254902, 0.411764705882353, 0.415686274509804, 0.403921568627451), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled197");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled197')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(107, 108, 109, 110), ColorHelper.fromArgb(111, 112, 113, 114)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled198");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled198')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(115, 116, 117, 118), ColorHelper.fromArgb(119, 120, 121, 122)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled199");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled199')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(541D, 542D), new Rectangular(543D, 544D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(541, 542));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(543, 544));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(187, 188, 189, 190), ColorHelper.fromArgb(191, 192, 193, 194)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled200");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled200')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(195, 196, 197, 198), ColorHelper.fromArgb(199, 200, 201, 202)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(438.0, 439.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(438.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(439.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(545D, 546D), new Rectangular(547D, 548D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(545, 546));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(547, 548));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(549D, 550D), new Rectangular(551D, 552D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(549, 550));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(551, 552));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(553D, 554D), new Rectangular(555D, 556D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(553, 554));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(555, 556));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled201");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled201')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(203, 204, 205, 206), ColorHelper.fromArgb(207, 208, 209, 210)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(211, 212, 213, 214), ColorHelper.fromArgb(215, 216, 217, 218)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(440.0, 441.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(440.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(441.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(442.0, 443.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(442.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(443.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled202");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled202')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(123, 124, 125, 126), ColorHelper.fromArgb(127, 128, 129, 130)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.501960784313725, 0.505882352941176, 0.509803921568627, 0.498039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled203");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled203')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(131, 132, 133, 134), ColorHelper.fromArgb(135, 136, 137, 138)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled204");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled204')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(139, 140, 141, 142), ColorHelper.fromArgb(143, 144, 145, 146)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.549019607843137, 0.552941176470588, 0.556862745098039, 0.545098039215686), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled205");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled205')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(147, 148, 149, 150), ColorHelper.fromArgb(151, 152, 153, 154)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.596078431372549, 0.6, 0.603921568627451, 0.592156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled206");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled206')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(155, 156, 157, 158), ColorHelper.fromArgb(159, 160, 161, 162)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled207");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled207')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(557D, 558D), new Rectangular(559D, 560D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(557, 558));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(559, 560));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(219, 220, 221, 222), ColorHelper.fromArgb(223, 224, 225, 226)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled208");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled208')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(227, 228, 229, 230), ColorHelper.fromArgb(231, 232, 233, 234)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(444.0, 445.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(444.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(445.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(561D, 562D), new Rectangular(563D, 564D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(561, 562));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(563, 564));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(565D, 566D), new Rectangular(567D, 568D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(565, 566));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(567, 568));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(569D, 570D), new Rectangular(571D, 572D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(569, 570));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(571, 572));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled209");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled209')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(235, 236, 237, 238), ColorHelper.fromArgb(239, 240, 241, 242)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(240, 241, 242, 239));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(243, 244, 245, 246), ColorHelper.fromArgb(247, 248, 249, 250)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(446.0, 447.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(446.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(447.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(448.0, 449.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(448.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(449.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled210");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled210')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(163, 164, 165, 166), ColorHelper.fromArgb(167, 168, 169, 170)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled211");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled211')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(171, 172, 173, 174), ColorHelper.fromArgb(175, 176, 177, 178)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.690196078431373, 0.694117647058824, 0.698039215686274, 0.686274509803922), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled212");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled212')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled213");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled213')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(187, 188, 189, 190), ColorHelper.fromArgb(191, 192, 193, 194)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.737254901960784, 0.741176470588235, 0.745098039215686, 0.733333333333333), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled214");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled214')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(195, 196, 197, 198), ColorHelper.fromArgb(199, 200, 201, 202)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled215");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled215')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(573D, 574D), new Rectangular(575D, 576D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(573, 574));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(575, 576));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(251, 252, 253, 254), ColorHelper.fromArgb(0, 1, 2, 3)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(252, 253, 254, 251));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(1, 2, 3, 0));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled216");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled216')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(4, 5, 6, 7), ColorHelper.fromArgb(8, 9, 10, 11)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(5, 6, 7, 4));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(9, 10, 11, 8));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(450.0, 451.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(450.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(451.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(577D, 578D), new Rectangular(579D, 580D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(577, 578));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(579, 580));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(581D, 582D), new Rectangular(583D, 584D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(581, 582));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(583, 584));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(585D, 586D), new Rectangular(587D, 588D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(585, 586));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(587, 588));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled217");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled217')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(12, 13, 14, 15), ColorHelper.fromArgb(16, 17, 18, 19)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(20, 21, 22, 23), ColorHelper.fromArgb(24, 25, 26, 27)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(452.0, 453.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(452.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(453.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(454.0, 455.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(454.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(455.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled218");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled218')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(203, 204, 205, 206), ColorHelper.fromArgb(207, 208, 209, 210)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled219");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled219')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(211, 212, 213, 214), ColorHelper.fromArgb(215, 216, 217, 218)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled220");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled220')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(219, 220, 221, 222), ColorHelper.fromArgb(223, 224, 225, 226)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.87843137254902, 0.882352941176471, 0.886274509803922, 0.874509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled221");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled221')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(227, 228, 229, 230), ColorHelper.fromArgb(231, 232, 233, 234)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled222");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled222')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(235, 236, 237, 238), ColorHelper.fromArgb(239, 240, 241, 242)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.925490196078431, 0.929411764705882, 0.933333333333333, 0.92156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled223");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled223')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(589D, 590D), new Rectangular(591D, 592D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(589, 590));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(591, 592));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(28, 29, 30, 31), ColorHelper.fromArgb(32, 33, 34, 35)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled224");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled224')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(36, 37, 38, 39), ColorHelper.fromArgb(40, 41, 42, 43)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(456.0, 457.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(456.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(457.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(593D, 594D), new Rectangular(595D, 596D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(593, 594));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(595, 596));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(597D, 598D), new Rectangular(599D, 600D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(597, 598));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(599, 600));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(601D, 602D), new Rectangular(603D, 604D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(601, 602));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(603, 604));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled225");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled225')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(44, 45, 46, 47), ColorHelper.fromArgb(48, 49, 50, 51)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(45, 46, 47, 44));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(52, 53, 54, 55), ColorHelper.fromArgb(56, 57, 58, 59)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(458.0, 459.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(458.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(459.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(460.0, 461.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(460.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(461.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled226");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled226')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(243, 244, 245, 246), ColorHelper.fromArgb(247, 248, 249, 250)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.972549019607843, 0.976470588235294, 0.980392156862745, 0.968627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled227");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled227')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(251, 252, 253, 254), ColorHelper.fromArgb(0, 1, 2, 3)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled228");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled228')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(4, 5, 6, 7), ColorHelper.fromArgb(8, 9, 10, 11)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled229");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled229')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(12, 13, 14, 15), ColorHelper.fromArgb(16, 17, 18, 19)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.0705882352941176, 0.0745098039215686, 0.0627450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled230");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled230')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(20, 21, 22, 23), ColorHelper.fromArgb(24, 25, 26, 27)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled231");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled231')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(605D, 606D), new Rectangular(607D, 608D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(605, 606));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(607, 608));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(60, 61, 62, 63), ColorHelper.fromArgb(64, 65, 66, 67)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled232");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled232')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(462.0, 463.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(462.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(463.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(609D, 610D), new Rectangular(611D, 612D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(609, 610));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(611, 612));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(613D, 614D), new Rectangular(615D, 616D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(613, 614));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(615, 616));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(617D, 618D), new Rectangular(619D, 620D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(617, 618));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(619, 620));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled233");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled233')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(76, 77, 78, 79), ColorHelper.fromArgb(80, 81, 82, 83)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(84, 85, 86, 87), ColorHelper.fromArgb(88, 89, 90, 91)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(464.0, 465.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(464.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(465.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(466.0, 467.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(466.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(467.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled234");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled234')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(28, 29, 30, 31), ColorHelper.fromArgb(32, 33, 34, 35)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.113725490196078, 0.117647058823529, 0.12156862745098, 0.109803921568627), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled235");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled235')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(36, 37, 38, 39), ColorHelper.fromArgb(40, 41, 42, 43)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.16078431372549, 0.164705882352941, 0.168627450980392, 0.156862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled236");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled236')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(44, 45, 46, 47), ColorHelper.fromArgb(48, 49, 50, 51)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled237");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled237')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(52, 53, 54, 55), ColorHelper.fromArgb(56, 57, 58, 59)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled238");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled238')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(60, 61, 62, 63), ColorHelper.fromArgb(64, 65, 66, 67)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.254901960784314, 0.258823529411765, 0.262745098039216, 0.250980392156863), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled239");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled239')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled240");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled240')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(621D, 622D), new Rectangular(623D, 624D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(621, 622));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(623, 624));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(92, 93, 94, 95), ColorHelper.fromArgb(96, 97, 98, 99)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled241");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled241')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(100, 101, 102, 103), ColorHelper.fromArgb(104, 105, 106, 107)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(468.0, 469.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(468.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(469.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(625D, 626D), new Rectangular(627D, 628D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(625, 626));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(627, 628));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(629D, 630D), new Rectangular(631D, 632D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(629, 630));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(631, 632));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(633D, 634D), new Rectangular(635D, 636D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(633, 634));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(635, 636));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled242");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled242')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(108, 109, 110, 111), ColorHelper.fromArgb(112, 113, 114, 115)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(116, 117, 118, 119), ColorHelper.fromArgb(120, 121, 122, 123)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(121, 122, 123, 120));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(470.0, 471.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(470.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(471.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(472.0, 473.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(472.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(473.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled243");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled243')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(76, 77, 78, 79), ColorHelper.fromArgb(80, 81, 82, 83)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled244");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled244')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(84, 85, 86, 87), ColorHelper.fromArgb(88, 89, 90, 91)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.333333333333333, 0.337254901960784, 0.341176470588235, 0.329411764705882), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.349019607843137, 0.352941176470588, 0.356862745098039, 0.345098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled245");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled245')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(92, 93, 94, 95), ColorHelper.fromArgb(96, 97, 98, 99)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled246");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled246')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(100, 101, 102, 103), ColorHelper.fromArgb(104, 105, 106, 107)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled247");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled247')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(108, 109, 110, 111), ColorHelper.fromArgb(112, 113, 114, 115)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.443137254901961, 0.447058823529412, 0.450980392156863, 0.43921568627451), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualVector() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled248");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled248')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(116, 117, 118, 119), ColorHelper.fromArgb(120, 121, 122, 123)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled249");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled249')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitSpherical> createList(new UnitSpherical(9D, 10D), new UnitSpherical(11D, 12D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(9, 10)));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(11, 12)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled250");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled250')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(70D, 71D, 72D), new Cartesian(73D, 74D, 75D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(70, 71, 72));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(73, 74, 75));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled251");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled251')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitCartesian> createList(new UnitCartesian(0.535201530235202, 0.576370878714833, 0.617540227194464), new UnitCartesian(0.542762825242207, 0.576685501819845,
												0.610608178397482)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.535201530235202, 0.576370878714833, 0.617540227194464), 1e-14);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.542762825242207, 0.576685501819845, 0.610608178397482), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	private TestContextRule rule$testContext = new TestContextRule();

	@Rule
	public TestContextRule getRule$testContext() {
		return rule$testContext;
	}
}
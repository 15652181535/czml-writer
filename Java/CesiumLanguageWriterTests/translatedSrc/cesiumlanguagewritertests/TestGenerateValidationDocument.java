package cesiumlanguagewritertests;


import agi.foundation.compatibility.*;
import agi.foundation.compatibility.annotations.CS2JWarning;
import agi.foundation.compatibility.ColorHelper;
import agi.foundation.compatibility.DisposeHelper;
import agi.foundation.compatibility.StreamWriterHelper;
import agi.foundation.compatibility.TestContextRule;
import agi.foundation.compatibility.TextWriterHelper;
import cesiumlanguagewriter.*;
import java.awt.Color;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.runners.MethodSorters;
import org.junit.Test;

@CS2JWarning("Unhandled attribute removed: SuppressMessage")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestGenerateValidationDocument {
	private JulianDate m_documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0D).toJulianDate();
	private JulianDate m_documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0D).toJulianDate();
	private Writer m_streamWriter;
	private Writer m_assertionsWriter;
	private Writer m_extensionsAssertionsWriter;
	private CesiumOutputStream m_output;
	private CesiumStreamWriter m_writer;

	final private void writeAssertionBoth(String s) {
		TextWriterHelper.writeLine(m_assertionsWriter, s);
		TextWriterHelper.writeLine(m_extensionsAssertionsWriter, s);
	}

	static private <T> List<T> createList(T t1, T t2) {
		ArrayList<T> tempCollection_0 = new ArrayList<T>();
		tempCollection_0.add(t1);
		tempCollection_0.add(t2);
		return tempCollection_0;
	}

	static private <T> List<T> createList(T... ts) {
		return agi.foundation.compatibility.ArrayHelper.arrayAsList(ts);
	}

	@Test
	public final void generateValidationDocument() {
		{
			Writer disposable_0 = (m_streamWriter = StreamWriterHelper.create("ValidationDocument.czml"));
			try {
				{
					Writer disposable_1 = (m_assertionsWriter = StreamWriterHelper.create("ValidationDocumentAssertions.js"));
					try {
						{
							Writer disposable_2 = (m_extensionsAssertionsWriter = StreamWriterHelper.create("ValidationDocumentExtensionAssertions.js"));
							try {
								writeAssertionBoth("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
								writeAssertionBoth("    /*jshint -W120 */");
								writeAssertionBoth("    var e;");
								writeAssertionBoth("    var date;");
								writeAssertionBoth("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
								writeAssertionBoth("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
								CesiumOutputStream temp_0 = new CesiumOutputStream(m_streamWriter);
								temp_0.setPrettyFormatting(true);
								m_output = temp_0;
								m_writer = new CesiumStreamWriter();
								m_output.writeStartSequence();
								writeClock();
								writeConstantValues();
								writeReferenceValues();
								writeSampledValues();
								m_output.writeEndSequence();
								writeAssertionBoth("});");
							} finally {
								DisposeHelper.dispose(disposable_2);
							}
						}
					} finally {
						DisposeHelper.dispose(disposable_1);
					}
				}
			} finally {
				DisposeHelper.dispose(disposable_0);
			}
		}
	}

	final private void writeClock() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("document");
				packet.writeName("ValidationDocument");
				packet.writeVersion("1.0");
				{
					cesiumlanguagewriter.ClockCesiumWriter clock = packet.openClockProperty();
					try {
						clock.writeInterval(m_documentStartDate, m_documentStopDate);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
						clock.writeCurrentTime(m_documentStartDate);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
						clock.writeMultiplier(1.0);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.multiplier).toEqual(1.0);");
						clock.writeRange(ClockRange.UNBOUNDED);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
						clock.writeStep(ClockStep.SYSTEM_CLOCK_MULTIPLIER);
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
					} finally {
						DisposeHelper.dispose(clock);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Constant");
				writeAssertionBoth("    var constant = e = dataSource.entities.getById('Constant');");
				writeAssertionBoth("    expect(e).toBeDefined();");
				writeAssertionBoth("    date = JulianDate.now();");
				{
					cesiumlanguagewriter.StringCesiumWriter w = packet.openDescriptionProperty();
					try {
						w.writeString("string0");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual('string0');");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(1D, 2D, 3D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(1, 2, 3));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeUnitQuaternion(new UnitQuaternion(0.356348322549899, 0.445435403187374, 0.534522483824849, 0.623609564462324));
						TextWriterHelper.writeLine(m_assertionsWriter,
								"    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.445435403187374, 0.534522483824849, 0.623609564462324, 0.356348322549899), 1e-14);");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeCartesian(new Cartesian(8D, 9D, 10D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(8, 9, 10));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openImageProperty();
							try {
								w2.writeUri("http://example.com/11", CesiumResourceBehavior.LINK_TO);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date)).toEqual('http://example.com/11');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(12.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(12.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(new Rectangular(13D, 14D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(13, 14));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(new Cartesian(15D, 16D, 17D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(15, 16, 17));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(18, 19, 20, 21));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(22.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(22.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeCartesian(new Cartesian(23D, 24D, 25D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqual(new Cartesian3(23, 24, 25));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openSizeInMetersProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(26.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(26.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(27.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(27.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(28D, 29D, 30D, 31D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(28, 29, 30, 31));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(32D, 33D, 34D, 35D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(32, 33, 34, 35));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(36D, 37D, 38D, 39D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(36, 37, 38, 39));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeBoundingRectangle(BoundingRectangle.fromWidthHeight(40D, 41D, 42D, 43D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(40, 41, 42, 43));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeCartesian(new Cartesian(44D, 45D, 46D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(44, 45, 46));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(47, 48, 49, 50));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(51, 52, 53, 54));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(55.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(55.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(56D, 57D, 58D), new Cartesian(59D, 60D, 61D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(56, 57, 58), new Cartesian3(59, 60, 61) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(62.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(62.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(63.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(63.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(64.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(64.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.CornerTypeCesiumWriter w2 = w.openCornerTypeProperty();
							try {
								w2.writeCornerType(CesiumCornerType.BEVELED);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(65.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(65.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(66, 67, 68, 69));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(67, 68, 69, 66));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(70, 71, 72, 73));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(71, 72, 73, 70));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(74.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(74.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(75.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(75.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeNumber(76.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(76.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeNumber(77.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(77.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(78, 79, 80, 81));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(82, 83, 84, 85));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(86.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(86.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(87.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(87.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeNumber(88.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(88.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeNumber(89.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(89.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeNumber(90.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(90.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(91.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(91.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(92.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(92.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(93.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(93.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(94.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(94.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(95.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(95.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(96, 97, 98, 99));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(100, 101, 102, 103));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(101, 102, 103, 100));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(104.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(104.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(105.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(105.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeCartesian(new Cartesian(106D, 107D, 108D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(106, 107, 108));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(109, 110, 111, 112));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(110, 111, 112, 109));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(113, 114, 115, 116));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(114, 115, 116, 113));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(117.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(117.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeNumber(118.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(118.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeNumber(119.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(119.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeNumber(120.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(120.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.StringCesiumWriter w2 = w.openTextProperty();
							try {
								w2.writeString("string121");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual('string121');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.FontCesiumWriter w2 = w.openFontProperty();
							try {
								w2.writeFont("22px sans-serif");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual('22px sans-serif');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.LabelStyleCesiumWriter w2 = w.openStyleProperty();
							try {
								w2.writeLabelStyle(CesiumLabelStyle.FILL_AND_OUTLINE);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(123.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(123.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(new Rectangular(124D, 125D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(124, 125));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(new Cartesian(126D, 127D, 128D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(126, 127, 128));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(129, 130, 131, 132));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(130, 131, 132, 129));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(133, 134, 135, 136));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(134, 135, 136, 133));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(137.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(137.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(138D, 139D, 140D, 141D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(138, 139, 140, 141));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(142D, 143D, 144D, 145D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(142, 143, 144, 145));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openGltfProperty();
							try {
								w2.writeUri("http://example.com/146", CesiumResourceBehavior.LINK_TO);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date)).toEqual('http://example.com/146');");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(147.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(147.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeNumber(148.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(148.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeNumber(149.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(149.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openIncrementallyLoadTexturesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openRunAnimationsProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NodeTransformationsCesiumWriter w2 = w.openNodeTransformationsProperty();
							try {
								{
									cesiumlanguagewriter.NodeTransformationCesiumWriter a = w2.openNodeTransformationProperty("prop");
									try {
										{
											cesiumlanguagewriter.TranslationCesiumWriter w3 = a.openTranslationProperty();
											try {
												w3.writeCartesian(new Cartesian(150D, 151D, 152D));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.model.nodeTransformations.prop.translation.getValue(date)).toEqual(new Cartesian3(150, 151, 152));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.RotationCesiumWriter w3 = a.openRotationProperty();
											try {
												w3.writeUnitQuaternion(new UnitQuaternion(0.495132667070277, 0.498368828292958, 0.50160498951564, 0.504841150738322));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.prop.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.498368828292958, 0.50160498951564, 0.504841150738322, 0.495132667070277), 1e-14);");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.ScaleCesiumWriter w3 = a.openScaleProperty();
											try {
												w3.writeCartesian(new Cartesian(157D, 158D, 159D));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.model.nodeTransformations.prop.scale.getValue(date)).toEqual(new Cartesian3(157, 158, 159));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
									} finally {
										DisposeHelper.dispose(a);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(160.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(160.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeNumber(161.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(161.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeNumber(162.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(162.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeNumber(163.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(163.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(164, 165, 166, 167));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(165, 166, 167, 164));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeNumber(168.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(168.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(169, 170, 171, 172));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(173, 174, 175, 176));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(174, 175, 176, 173));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(177.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(177.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(178D, 179D, 180D, 181D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(178, 179, 180, 181));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(new NearFarScalar(182D, 183D, 184D, 185D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(182, 183, 184, 185));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(186D, 187D, 188D), new Cartesian(189D, 190D, 191D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polygon.hierarchy.getValue(date)).toEqual([ new Cartesian3(186, 187, 188), new Cartesian3(189, 190, 191) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(192.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(192.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(193.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(193.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(194.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(194.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(195.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(195.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(196, 197, 198, 199));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(197, 198, 199, 196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(200, 201, 202, 203));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(201, 202, 203, 200));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(204.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(204.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerPositionHeightProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(205D, 206D, 207D), new Cartesian(208D, 209D, 210D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(205, 206, 207), new Cartesian3(208, 209, 210) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(211.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(211.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(212.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(212.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(213, 214, 215, 216));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(214, 215, 216, 213));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFollowSurfaceProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.followSurface.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsen(new CartographicExtent(0.230106902304275, 1.23010690230428, 0.659310575509378, 0.0885142487144819));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(0.230106902304275, 1.23010690230428, 0.659310575509378, 0.0885142487144819));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(221.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(221.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(222.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(222.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(223.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(223.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(224.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(224.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(225.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(225.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(226, 227, 228, 229));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(227, 228, 229, 226));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(230, 231, 232, 233));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(231, 232, 233, 230));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(234.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(234.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeTop.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeBottom.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(235D, 236D, 237D), new Cartesian(238D, 239D, 240D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter, "    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(235, 236, 237), new Cartesian3(238, 239, 240) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMinimumHeightsProperty();
							try {
								w2.writeArray(TestGenerateValidationDocument.<Double> createList(241D, 242D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 241, 242 ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMaximumHeightsProperty();
							try {
								w2.writeArray(TestGenerateValidationDocument.<Double> createList(243D, 244D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 243, 244 ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(245.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(245.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(246, 247, 248, 249));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(250, 251, 252, 253));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(254.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(254.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeNumber(255.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(255.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeNumber(256.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(256.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeNumber(257.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(257.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeNumber(258.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(258.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(259.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(259.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(5, 6, 7, 8));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(6, 7, 8, 5));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(264.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(264.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(10, 11, 12, 13));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(14, 15, 16, 17));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(15, 16, 17, 14));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(18, 19, 20, 21));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(19, 20, 21, 18));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(22, 23, 24, 25));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(23, 24, 25, 22));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(26, 27, 28, 29));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(27, 28, 29, 26));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(30, 31, 32, 33));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(289.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(289.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(290D, 291D, 292D), new Spherical(293D, 294D, 295D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(290, 291, 292), new Spherical(293, 294, 295) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(296.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(date)).toEqual(296.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(42, 43, 44, 45));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(43, 44, 45, 42));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(301.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(301.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(47, 48, 49, 50));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(51, 52, 53, 54));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(55, 56, 57, 58));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(59, 60, 61, 62));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(60, 61, 62, 59));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(63, 64, 65, 66));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(67, 68, 69, 70));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(326.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(326.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeNumber(327.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(327.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeNumber(328.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(328.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(329.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(date)).toEqual(329.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(75, 76, 77, 78));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(76, 77, 78, 75));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(334.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(334.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(80, 81, 82, 83));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(81, 82, 83, 80));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(84, 85, 86, 87));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(85, 86, 87, 84));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(88, 89, 90, 91));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(89, 90, 91, 88));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(92, 93, 94, 95));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(93, 94, 95, 92));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(96, 97, 98, 99));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(100, 101, 102, 103));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(101, 102, 103, 100));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(359.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(359.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(360D, 361D, 362D), new Spherical(363D, 364D, 365D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(360, 361, 362), new Spherical(363, 364, 365) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(366.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(366.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerDirectionRadiusProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(112, 113, 114, 115));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(113, 114, 115, 112));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(116, 117, 118, 119));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(117, 118, 119, 116));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(375.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(375.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeNumber(376.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(376.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeBoolean(true);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(true);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(ColorHelper.fromArgb(122, 123, 124, 125));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeSpherical(new Spherical(381D, 382D, 383D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(381, 382, 383)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(384.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(384.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeNumber(385.0);
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(385.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeConstantValuesIndividual();
	}

	final private void writeConstantValuesIndividual() {
		writeConstantValuesIndividualDescription();
		writeConstantValuesIndividualPosition();
		writeConstantValuesIndividualOrientation();
		writeConstantValuesIndividualViewFrom();
		writeConstantValuesIndividualBillboard();
		writeConstantValuesIndividualBox();
		writeConstantValuesIndividualCorridor();
		writeConstantValuesIndividualCylinder();
		writeConstantValuesIndividualEllipse();
		writeConstantValuesIndividualEllipsoid();
		writeConstantValuesIndividualLabel();
		writeConstantValuesIndividualModel();
		writeConstantValuesIndividualPath();
		writeConstantValuesIndividualPoint();
		writeConstantValuesIndividualPolygon();
		writeConstantValuesIndividualPolyline();
		writeConstantValuesIndividualRectangle();
		writeConstantValuesIndividualWall();
		writeConstantValuesIndividualConicSensor();
		writeConstantValuesIndividualCustomPatternSensor();
		writeConstantValuesIndividualRectangularSensor();
		writeConstantValuesIndividualFan();
		writeConstantValuesIndividualVector();
	}

	final private void writeConstantValuesIndividualDescription() {}

	final private void writeConstantValuesIndividualPosition() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant386");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant386')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicRadians(new Cartographic(0.584103608455447, 0.0133072816605502, 389D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromRadians(0.584103608455447, 0.0133072816605502, 389));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant390");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant390')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicDegrees(new Cartographic(31D, 32D, 393D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromDegrees(31, 32, 393));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant394");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant394')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesianVelocity(new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(395D, 396D, 397D), new Cartesian(398D, 399D, 400D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(395, 396, 397));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualOrientation() {}

	final private void writeConstantValuesIndividualViewFrom() {}

	final private void writeConstantValuesIndividualBillboard() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant401");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant401')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(147, 148, 149, 150));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.color.getValue(date)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant406");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant406')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(152, 153, 154, 155));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_image'));");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/411", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.image.getValue(date)).toEqual('http://example.com/411');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(412D, 413D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(412, 413));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(159, 160, 161, 162));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(160, 161, 162, 159));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_grid'));");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(163, 164, 165, 166));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(164, 165, 166, 163));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(422.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(date)).toEqual(422.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(423D, 424D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(423, 424));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(425D, 426D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(425, 426));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(427D, 428D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(427, 428));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe'));");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(174, 175, 176, 177));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(175, 176, 177, 174));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(178, 179, 180, 181));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(179, 180, 181, 178));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(437.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(date)).toEqual(437.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(438.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(438.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_image_439");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_image_439')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(185, 186, 187, 188));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_grid_444");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_grid_444')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(190, 191, 192, 193));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.749019607843137, 0.752941176470588, 0.756862745098039, 0.745098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_stripe_449");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe_449')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(195, 196, 197, 198));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.768627450980392, 0.772549019607843, 0.776470588235294, 0.764705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_box_material_stripe_454");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe_454')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(200, 201, 202, 203));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant459");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant459')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(205, 206, 207, 208));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.box.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant464");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant464')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.0442872687106188, 1.04428726871062, 467D), new Cartographic(
										1.47349094191572, 0.902694615120826, 470D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.0442872687106188, 1.04428726871062, 467), Cartesian3.fromRadians(1.47349094191572, 0.902694615120826, 470) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant471");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant471')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(22D, 23D, 474D), new Cartographic(25D, 26D, 477D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(22, 23, 474), Cartesian3.fromDegrees(25, 26, 477) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant478");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant478')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(224, 225, 226, 227));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_image'));");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/483", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.image.getValue(date)).toEqual('http://example.com/483');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(484D, 485D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(484, 485));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(231, 232, 233, 234));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(232, 233, 234, 231));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_grid'));");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(235, 236, 237, 238));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(236, 237, 238, 235));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(494.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(494.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(495D, 496D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(495, 496));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(497D, 498D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(497, 498));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(499D, 500D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(499, 500));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe'));");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(246, 247, 248, 249));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(250, 251, 252, 253));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(509.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(date)).toEqual(509.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(510.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(510.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_image_511");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_image_511')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(2, 3, 4, 5));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_grid_516");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_grid_516')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(7, 8, 9, 10));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_stripe_521");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe_521')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(12, 13, 14, 15));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_corridor_material_stripe_526");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe_526')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(17, 18, 19, 20));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant531");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant531')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(22, 23, 24, 25));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant536");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant536')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(27, 28, 29, 30));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_image'));");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/541", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.image.getValue(date)).toEqual('http://example.com/541');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(542D, 543D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(542, 543));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(34, 35, 36, 37));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_grid'));");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(38, 39, 40, 41));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(39, 40, 41, 38));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(552.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(552.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(553D, 554D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(553, 554));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(555D, 556D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(555, 556));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(557D, 558D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(557, 558));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe'));");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(49, 50, 51, 52));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(53, 54, 55, 56));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(54, 55, 56, 53));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(567.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(date)).toEqual(567.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(568.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(568.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_image_569");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_image_569')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(60, 61, 62, 63));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_grid_574");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_grid_574')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(65, 66, 67, 68));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_stripe_579");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe_579')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(70, 71, 72, 73));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.282352941176471, 0.286274509803922, 0.274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_cylinder_material_stripe_584");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe_584')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(75, 76, 77, 78));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.298039215686275, 0.301960784313725, 0.305882352941176, 0.294117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant589");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant589')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(80, 81, 82, 83));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.317647058823529, 0.32156862745098, 0.325490196078431, 0.313725490196078), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant594");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant594')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(85, 86, 87, 88));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.337254901960784, 0.341176470588235, 0.345098039215686, 0.333333333333333), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_image'));");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/599", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.image.getValue(date)).toEqual('http://example.com/599');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(600D, 601D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(600, 601));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(92, 93, 94, 95));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(93, 94, 95, 92));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_grid'));");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(96, 97, 98, 99));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(97, 98, 99, 96));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(610.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(610.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(611D, 612D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(611, 612));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(613D, 614D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(613, 614));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(615D, 616D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(615, 616));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe'));");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(107, 108, 109, 110));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(108, 109, 110, 107));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(111, 112, 113, 114));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(112, 113, 114, 111));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(625.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(date)).toEqual(625.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(626.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(626.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_image_627");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_image_627')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(118, 119, 120, 121));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.466666666666667, 0.470588235294118, 0.474509803921569, 0.462745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_grid_632");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_grid_632')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(123, 124, 125, 126));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_stripe_637");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe_637')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(128, 129, 130, 131));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipse_material_stripe_642");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe_642')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(133, 134, 135, 136));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.525490196078431, 0.529411764705882, 0.533333333333333, 0.52156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant647");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant647')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(138, 139, 140, 141));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant652");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant652')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(143, 144, 145, 146));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_image'));");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/657", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.image.getValue(date)).toEqual('http://example.com/657');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(658D, 659D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(658, 659));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(150, 151, 152, 153));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(151, 152, 153, 150));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_grid'));");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(154, 155, 156, 157));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(155, 156, 157, 154));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(668.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(668.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(669D, 670D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(669, 670));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(671D, 672D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(671, 672));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(673D, 674D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(673, 674));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe'));");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(165, 166, 167, 168));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(169, 170, 171, 172));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(683.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(683.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(684.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(684.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_image_685");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_image_685')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(176, 177, 178, 179));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_grid_690");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_grid_690')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(181, 182, 183, 184));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.713725490196078, 0.717647058823529, 0.72156862745098, 0.709803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_stripe_695");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe_695')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(186, 187, 188, 189));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.737254901960784, 0.741176470588235, 0.729411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_ellipsoid_material_stripe_700");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe_700')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(191, 192, 193, 194));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant705");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant705')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(196, 197, 198, 199));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualLabel() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant710");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant710')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(201, 202, 203, 204));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.fillColor.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant715");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant715')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(206, 207, 208, 209));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualModel() {}

	final private void writeConstantValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant720");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant720')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(211, 212, 213, 214));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineOutline");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(215, 216, 217, 218));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(216, 217, 218, 215));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(219, 220, 221, 222));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(220, 221, 222, 219));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(733.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(date)).toEqual(733.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineArrow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineArrow'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(224, 225, 226, 227));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(225, 226, 227, 224));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineGlow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineGlow'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(228, 229, 230, 231));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(229, 230, 231, 228));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(742.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(date)).toEqual(742.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_image'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/743", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.image.getValue(date)).toEqual('http://example.com/743');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(744D, 745D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(744, 745));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(236, 237, 238, 239));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(237, 238, 239, 236));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_grid'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(240, 241, 242, 243));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(241, 242, 243, 240));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(754.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(date)).toEqual(754.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(755D, 756D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(755, 756));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(757D, 758D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(757, 758));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(759D, 760D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(759, 760));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe'));");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(251, 252, 253, 254));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(0, 1, 2, 3));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(1, 2, 3, 0));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(769.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(date)).toEqual(769.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(770.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(770.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineOutline_771");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline_771')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(7, 8, 9, 10));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0352941176470588, 0.0392156862745098, 0.0274509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineOutline_776");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline_776')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(12, 13, 14, 15));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineArrow_781");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineArrow_781')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(17, 18, 19, 20));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_polylineGlow_786");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineGlow_786')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(22, 23, 24, 25));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_image_791");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_image_791')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(27, 28, 29, 30));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_grid_796");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_grid_796')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(32, 33, 34, 35));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_stripe_801");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe_801')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(37, 38, 39, 40));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_path_material_stripe_806");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe_806')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(42, 43, 44, 45));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPoint() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant811");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant811')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(47, 48, 49, 50));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.color.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant816");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant816')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(52, 53, 54, 55));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant821");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant821')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.4735210862691, 1.4735210862691, 824D), new Cartographic(
										0.331928432679307, 1.33192843267931, 827D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromRadians(0.4735210862691, 1.4735210862691, 824), Cartesian3.fromRadians(0.331928432679307, 1.33192843267931, 827) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant828");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant828')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(19D, 20D, 831D), new Cartographic(22D, 23D, 834D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polygon.hierarchy.getValue(date)).toEqual([ Cartesian3.fromDegrees(19, 20, 831), Cartesian3.fromDegrees(22, 23, 834) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant835");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant835')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(71, 72, 73, 74));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_image'));");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/840", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.image.getValue(date)).toEqual('http://example.com/840');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(841D, 842D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(841, 842));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(78, 79, 80, 81));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_grid'));");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(82, 83, 84, 85));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(851.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(851.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(852D, 853D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(852, 853));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(854D, 855D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(854, 855));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(856D, 857D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(856, 857));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe'));");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(93, 94, 95, 96));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(97, 98, 99, 100));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(98, 99, 100, 97));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(866.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(date)).toEqual(866.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(867.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(867.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_image_868");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_image_868')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(104, 105, 106, 107));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_grid_873");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_grid_873')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(109, 110, 111, 112));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_stripe_878");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe_878')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(114, 115, 116, 117));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polygon_material_stripe_883");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe_883')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(119, 120, 121, 122));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant888");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant888')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(124, 125, 126, 127));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant893");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant893')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.216890053703859, 1.21689005370386, 896D), new Cartographic(
										0.0752974001140654, 1.07529740011407, 899D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.216890053703859, 1.21689005370386, 896), Cartesian3.fromRadians(0.0752974001140654, 1.07529740011407, 899) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant900");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant900')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(1D, 2D, 903D), new Cartographic(4D, 5D, 906D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(1, 2, 903), Cartesian3.fromDegrees(4, 5, 906) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant907");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant907')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(143, 144, 145, 146));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineOutline");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(147, 148, 149, 150));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(148, 149, 150, 147));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(151, 152, 153, 154));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(152, 153, 154, 151));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(920.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(920.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineArrow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineArrow'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(156, 157, 158, 159));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(157, 158, 159, 156));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineGlow");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineGlow'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(160, 161, 162, 163));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(161, 162, 163, 160));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(929.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(date)).toEqual(929.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_image'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/930", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.image.getValue(date)).toEqual('http://example.com/930');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(931D, 932D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(931, 932));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(168, 169, 170, 171));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(169, 170, 171, 168));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_grid'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(172, 173, 174, 175));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(173, 174, 175, 172));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(941.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(941.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(942D, 943D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(942, 943));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(944D, 945D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(944, 945));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(946D, 947D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(946, 947));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe'));");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(183, 184, 185, 186));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(184, 185, 186, 183));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(187, 188, 189, 190));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(188, 189, 190, 187));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(956.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(date)).toEqual(956.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(957.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(957.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineOutline_958");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline_958')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(194, 195, 196, 197));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineOutline_963");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline_963')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(199, 200, 201, 202));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.784313725490196, 0.788235294117647, 0.792156862745098, 0.780392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineArrow_968");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineArrow_968')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(204, 205, 206, 207));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_polylineGlow_973");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineGlow_973')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(209, 210, 211, 212));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_image_978");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_image_978')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(214, 215, 216, 217));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.843137254901961, 0.847058823529412, 0.850980392156863, 0.83921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_grid_983");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_grid_983')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(219, 220, 221, 222));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_stripe_988");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe_988')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(224, 225, 226, 227));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_polyline_material_stripe_993");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe_993')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(229, 230, 231, 232));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.901960784313726, 0.905882352941176, 0.909803921568627, 0.898039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant998");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant998')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsenDegrees(new CartographicExtent(9D, 10D, 11D, 12D));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(Rectangle.fromDegrees(9, 10, 11, 12));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1003");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1003')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(239, 240, 241, 242));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_image'));");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1008", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.image.getValue(date)).toEqual('http://example.com/1008');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1009D, 1010D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(1009, 1010));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(246, 247, 248, 249));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_grid'));");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(250, 251, 252, 253));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(251, 252, 253, 250));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1019.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(1019.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1020D, 1021D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(1020, 1021));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1022D, 1023D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1022, 1023));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1024D, 1025D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1024, 1025));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe'));");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(6, 7, 8, 9));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(7, 8, 9, 6));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(10, 11, 12, 13));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(11, 12, 13, 10));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1034.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(date)).toEqual(1034.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1035.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(1035.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_image_1036");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_image_1036')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(17, 18, 19, 20));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_grid_1041");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_grid_1041')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(22, 23, 24, 25));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.0941176470588235, 0.0980392156862745, 0.0862745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_stripe_1046");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe_1046')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(27, 28, 29, 30));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangle_material_stripe_1051");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe_1051')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(32, 33, 34, 35));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1056");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1056')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(37, 38, 39, 40));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.149019607843137, 0.152941176470588, 0.156862745098039, 0.145098039215686), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1061");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1061')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.141683086649927, 1.14168308664993, 1064D), new Cartographic(
										9.04330601336767E-05, 1.00009043306013, 1067D)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.141683086649927, 1.14168308664993, 1064), Cartesian3.fromRadians(9.04330601336767E-05, 1.00009043306013, 1067) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1068");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1068')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(34D, 35D, 1071D), new Cartographic(37D, 38D, 1074D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(34, 35, 1071), Cartesian3.fromDegrees(37, 38, 1074) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1075");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1075')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(56, 57, 58, 59));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_image'));");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1080", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.image.getValue(date)).toEqual('http://example.com/1080');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1081D, 1082D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(1081, 1082));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(63, 64, 65, 66));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(64, 65, 66, 63));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_grid'));");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(67, 68, 69, 70));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(68, 69, 70, 67));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1091.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(1091.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1092D, 1093D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(1092, 1093));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1094D, 1095D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(1094, 1095));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1096D, 1097D));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(1096, 1097));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe'));");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(78, 79, 80, 81));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(79, 80, 81, 78));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(82, 83, 84, 85));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(83, 84, 85, 82));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1106.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(date)).toEqual(1106.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1107.0);
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(1107.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_image_1108");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_image_1108')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(89, 90, 91, 92));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_grid_1113");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_grid_1113')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(94, 95, 96, 97));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.372549019607843, 0.376470588235294, 0.380392156862745, 0.368627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_stripe_1118");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe_1118')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(99, 100, 101, 102));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_wall_material_stripe_1123");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe_1123')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(104, 105, 106, 107));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1128");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1128')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(109, 110, 111, 112));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.wall.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1133");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1133')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(114, 115, 116, 117));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1138");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1138')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(119, 120, 121, 122));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1143", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1143');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1144D, 1145D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1144, 1145));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(126, 127, 128, 129));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(130, 131, 132, 133));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(131, 132, 133, 130));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1154.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1154.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1155D, 1156D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1155, 1156));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1157D, 1158D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1157, 1158));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1159D, 1160D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1159, 1160));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(141, 142, 143, 144));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(145, 146, 147, 148));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(146, 147, 148, 145));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1169.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1169.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1170.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1170.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_image_1171");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image_1171')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(152, 153, 154, 155));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_grid_1176");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid_1176')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(157, 158, 159, 160));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.619607843137255, 0.623529411764706, 0.627450980392157, 0.615686274509804), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_stripe_1181");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe_1181')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(162, 163, 164, 165));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_lateralSurfaceMaterial_stripe_1186");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe_1186')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(167, 168, 169, 170));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1191");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1191')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(172, 173, 174, 175));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.67843137254902, 0.682352941176471, 0.686274509803922, 0.674509803921569), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1196", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1196');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1197D, 1198D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1197, 1198));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(179, 180, 181, 182));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(180, 181, 182, 179));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(183, 184, 185, 186));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(184, 185, 186, 183));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1207.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1207.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1208D, 1209D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1208, 1209));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1210D, 1211D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1210, 1211));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1212D, 1213D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1212, 1213));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(194, 195, 196, 197));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(195, 196, 197, 194));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(198, 199, 200, 201));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(199, 200, 201, 198));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1222.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1222.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1223.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1223.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_image_1224");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image_1224')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(205, 206, 207, 208));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.807843137254902, 0.811764705882353, 0.815686274509804, 0.803921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_grid_1229");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid_1229')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(210, 211, 212, 213));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_stripe_1234");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe_1234')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(215, 216, 217, 218));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_stripe_1239");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe_1239')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(220, 221, 222, 223));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.866666666666667, 0.870588235294118, 0.874509803921569, 0.862745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1244");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1244')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(225, 226, 227, 228));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1249", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1249');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1250D, 1251D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1250, 1251));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(232, 233, 234, 235));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(233, 234, 235, 232));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(236, 237, 238, 239));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(237, 238, 239, 236));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1260.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1260.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1261D, 1262D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1261, 1262));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1263D, 1264D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1263, 1264));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1265D, 1266D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1265, 1266));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(247, 248, 249, 250));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(248, 249, 250, 247));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(251, 252, 253, 254));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(252, 253, 254, 251));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1275.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1275.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1276.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1276.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image_1277");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image_1277')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(3, 4, 5, 6));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_1282");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_1282')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(8, 9, 10, 11));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1287");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1287')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(13, 14, 15, 16));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0549019607843137, 0.0588235294117647, 0.0627450980392157, 0.0509803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1292");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_1292')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(18, 19, 20, 21));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1297");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1297')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(23, 24, 25, 26));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1302", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1302');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1303D, 1304D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1303, 1304));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(30, 31, 32, 33));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(31, 32, 33, 30));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(34, 35, 36, 37));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(35, 36, 37, 34));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1313.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1313.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1314D, 1315D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1314, 1315));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1316D, 1317D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1316, 1317));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1318D, 1319D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1318, 1319));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(45, 46, 47, 48));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(46, 47, 48, 45));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(49, 50, 51, 52));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(50, 51, 52, 49));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1328.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1328.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1329.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1329.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_image_1330");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image_1330')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(56, 57, 58, 59));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_grid_1335");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid_1335')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(61, 62, 63, 64));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.243137254901961, 0.247058823529412, 0.250980392156863, 0.23921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_stripe_1340");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe_1340')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(66, 67, 68, 69));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_domeSurfaceMaterial_stripe_1345");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe_1345')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(71, 72, 73, 74));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.286274509803922, 0.290196078431373, 0.27843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1350");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1350')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(76, 77, 78, 79));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.301960784313725, 0.305882352941176, 0.309803921568627, 0.298039215686275), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1355", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1355');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1356D, 1357D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1356, 1357));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(83, 84, 85, 86));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(84, 85, 86, 83));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(87, 88, 89, 90));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(88, 89, 90, 87));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1366.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1366.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1367D, 1368D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1367, 1368));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1369D, 1370D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1369, 1370));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1371D, 1372D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1371, 1372));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe'));");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(98, 99, 100, 101));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(99, 100, 101, 98));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(102, 103, 104, 105));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(103, 104, 105, 102));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1381.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1381.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1382.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1382.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_image_1383");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image_1383')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(109, 110, 111, 112));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.431372549019608, 0.435294117647059, 0.43921568627451, 0.427450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_grid_1388");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid_1388')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(114, 115, 116, 117));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_stripe_1393");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe_1393')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(119, 120, 121, 122));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_conicSensor_environmentOcclusionMaterial_stripe_1398");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe_1398')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(124, 125, 126, 127));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.490196078431373, 0.494117647058824, 0.498039215686275, 0.486274509803922), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1403");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1403')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(129, 130, 131, 132));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1408");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1408')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(1409D, 1410D), new UnitSpherical(1411D, 1412D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(1409, 1410), new Spherical(1411, 1412) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1413");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1413')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(1414D, 1415D, 1416D), new Cartesian(1417D, 1418D, 1419D)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(1414, 1415, 1416)), Spherical.fromCartesian3(new Cartesian3(1417, 1418, 1419)) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1420");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1420')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.576944161234916, 0.577350174015517, 0.577756186796119),
										new UnitCartesian(0.576945016398694, 0.577350174415828, 0.577755332432962)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.576944161234916, 0.577350174015517, 0.577756186796119)), Spherical.fromCartesian3(new Cartesian3(0.576945016398694, 0.577350174415828, 0.577755332432962)) ], 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1427");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1427')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(153, 154, 155, 156));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1432");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1432')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(158, 159, 160, 161));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1437", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1437');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1438D, 1439D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1438, 1439));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(165, 166, 167, 168));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(166, 167, 168, 165));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(169, 170, 171, 172));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(170, 171, 172, 169));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1448.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1448.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1449D, 1450D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1449, 1450));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1451D, 1452D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1451, 1452));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1453D, 1454D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1453, 1454));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(180, 181, 182, 183));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(181, 182, 183, 180));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(184, 185, 186, 187));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(185, 186, 187, 184));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1463.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1463.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1464.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1464.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_image_1465");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image_1465')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(191, 192, 193, 194));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.756862745098039, 0.76078431372549, 0.749019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_grid_1470");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid_1470')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(196, 197, 198, 199));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.772549019607843, 0.776470588235294, 0.780392156862745, 0.768627450980392), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_stripe_1475");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe_1475')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(201, 202, 203, 204));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_stripe_1480");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe_1480')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(206, 207, 208, 209));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1485");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1485')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(211, 212, 213, 214));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1490", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1490');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1491D, 1492D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1491, 1492));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(218, 219, 220, 221));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(219, 220, 221, 218));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(222, 223, 224, 225));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(223, 224, 225, 222));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1501.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1501.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1502D, 1503D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1502, 1503));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1504D, 1505D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1504, 1505));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1506D, 1507D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1506, 1507));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(233, 234, 235, 236));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(234, 235, 236, 233));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(237, 238, 239, 240));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(238, 239, 240, 237));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1516.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1516.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1517.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1517.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_image_1518");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image_1518')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(244, 245, 246, 247));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.96078431372549, 0.964705882352941, 0.968627450980392, 0.956862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid_1523");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid_1523')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(249, 250, 251, 252));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1528");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1528')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(254, 0, 1, 2));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1533");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe_1533')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(4, 5, 6, 7));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0196078431372549, 0.0235294117647059, 0.0274509803921569, 0.0156862745098039), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1538");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1538')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(9, 10, 11, 12));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1543", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1543');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1544D, 1545D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1544, 1545));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(16, 17, 18, 19));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(17, 18, 19, 16));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(20, 21, 22, 23));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(21, 22, 23, 20));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1554.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1554.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1555D, 1556D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1555, 1556));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1557D, 1558D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1557, 1558));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1559D, 1560D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1559, 1560));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(31, 32, 33, 34));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(32, 33, 34, 31));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(35, 36, 37, 38));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(36, 37, 38, 35));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1569.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1569.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1570.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1570.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_1571");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_1571')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(42, 43, 44, 45));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_1576");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_1576')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(47, 48, 49, 50));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1581");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1581')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(52, 53, 54, 55));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.207843137254902, 0.211764705882353, 0.215686274509804, 0.203921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1586");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_1586')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(57, 58, 59, 60));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1591");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1591')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(62, 63, 64, 65));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1596", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1596');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1597D, 1598D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1597, 1598));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(69, 70, 71, 72));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(70, 71, 72, 69));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(73, 74, 75, 76));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(74, 75, 76, 73));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1607.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1607.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1608D, 1609D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1608, 1609));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1610D, 1611D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1610, 1611));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1612D, 1613D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1612, 1613));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(84, 85, 86, 87));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(85, 86, 87, 84));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(88, 89, 90, 91));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(89, 90, 91, 88));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1622.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1622.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1623.0);
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1623.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_image_1624");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image_1624')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(95, 96, 97, 98));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_grid_1629");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid_1629')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(100, 101, 102, 103));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.396078431372549, 0.4, 0.403921568627451, 0.392156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_stripe_1634");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe_1634')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(105, 106, 107, 108));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_domeSurfaceMaterial_stripe_1639");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe_1639')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(110, 111, 112, 113));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1644");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1644')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(115, 116, 117, 118));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1649", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1649');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1650D, 1651D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1650, 1651));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(122, 123, 124, 125));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(123, 124, 125, 122));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(126, 127, 128, 129));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(127, 128, 129, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1660.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1660.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1661D, 1662D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1661, 1662));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1663D, 1664D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1663, 1664));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1665D, 1666D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1665, 1666));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe'));");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(137, 138, 139, 140));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(138, 139, 140, 137));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(141, 142, 143, 144));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(142, 143, 144, 141));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1675.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1675.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1676.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1676.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_image_1677");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image_1677')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(148, 149, 150, 151));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.584313725490196, 0.588235294117647, 0.592156862745098, 0.580392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_grid_1682");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid_1682')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(153, 154, 155, 156));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_stripe_1687");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe_1687')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(158, 159, 160, 161));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_stripe_1692");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe_1692')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(163, 164, 165, 166));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.643137254901961, 0.647058823529412, 0.650980392156863, 0.63921568627451), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1697");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1697')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(168, 169, 170, 171));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1702");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1702')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(173, 174, 175, 176));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1707");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1707')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(178, 179, 180, 181));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1712", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1712');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1713D, 1714D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1713, 1714));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(185, 186, 187, 188));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(186, 187, 188, 185));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(189, 190, 191, 192));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(190, 191, 192, 189));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1723.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1723.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1724D, 1725D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1724, 1725));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1726D, 1727D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1726, 1727));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1728D, 1729D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1728, 1729));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(200, 201, 202, 203));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(201, 202, 203, 200));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(204, 205, 206, 207));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(205, 206, 207, 204));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1738.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1738.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1739.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(1739.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_image_1740");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image_1740')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(211, 212, 213, 214));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.835294117647059, 0.83921568627451, 0.827450980392157), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_grid_1745");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid_1745')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(216, 217, 218, 219));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_stripe_1750");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe_1750')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(221, 222, 223, 224));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_stripe_1755");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe_1755')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(226, 227, 228, 229));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.890196078431373, 0.894117647058824, 0.898039215686275, 0.886274509803922), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1760");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1760')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(231, 232, 233, 234));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1765", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1765');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1766D, 1767D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1766, 1767));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(238, 239, 240, 241));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(242, 243, 244, 245));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(243, 244, 245, 242));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1776.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1776.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1777D, 1778D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1777, 1778));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1779D, 1780D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1779, 1780));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1781D, 1782D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1781, 1782));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(253, 254, 0, 1));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(254, 0, 1, 253));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(2, 3, 4, 5));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(3, 4, 5, 2));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1791.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(1791.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1792.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(1792.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_image_1793");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image_1793')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(9, 10, 11, 12));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid_1798");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid_1798')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(14, 15, 16, 17));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1803");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1803')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(19, 20, 21, 22));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.0823529411764706, 0.0862745098039216, 0.0745098039215686), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1808");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe_1808')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(24, 25, 26, 27));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1813");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1813')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(29, 30, 31, 32));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1818", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1818');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1819D, 1820D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1819, 1820));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(36, 37, 38, 39));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(37, 38, 39, 36));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(40, 41, 42, 43));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(41, 42, 43, 40));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1829.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1829.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1830D, 1831D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1830, 1831));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1832D, 1833D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1832, 1833));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1834D, 1835D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1834, 1835));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(51, 52, 53, 54));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(52, 53, 54, 51));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(55, 56, 57, 58));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(56, 57, 58, 55));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1844.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(1844.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1845.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(1845.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_1846");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_1846')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(62, 63, 64, 65));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_1851");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_1851')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(67, 68, 69, 70));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.270588235294118, 0.274509803921569, 0.262745098039216), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1856");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1856')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(72, 73, 74, 75));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1861");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_1861')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(77, 78, 79, 80));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1866");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1866')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(82, 83, 84, 85));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.325490196078431, 0.329411764705882, 0.333333333333333, 0.32156862745098), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1871", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual('http://example.com/1871');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1872D, 1873D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1872, 1873));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(89, 90, 91, 92));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(90, 91, 92, 89));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(93, 94, 95, 96));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(94, 95, 96, 93));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1882.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(1882.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1883D, 1884D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1883, 1884));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1885D, 1886D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1885, 1886));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1887D, 1888D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1887, 1888));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(104, 105, 106, 107));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(105, 106, 107, 104));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(108, 109, 110, 111));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(109, 110, 111, 108));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1897.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(1897.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1898.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(1898.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_image_1899");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image_1899')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(115, 116, 117, 118));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.458823529411765, 0.462745098039216, 0.450980392156863), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_grid_1904");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid_1904')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(120, 121, 122, 123));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_stripe_1909");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe_1909')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(125, 126, 127, 128));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_domeSurfaceMaterial_stripe_1914");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe_1914')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(130, 131, 132, 133));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.517647058823529, 0.52156862745098, 0.509803921568627), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1919");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1919')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(135, 136, 137, 138));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/1924", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual('http://example.com/1924');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(1925D, 1926D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(1925, 1926));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(142, 143, 144, 145));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(143, 144, 145, 142));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(146, 147, 148, 149));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(147, 148, 149, 146));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(1935.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(1935.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(1936D, 1937D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(1936, 1937));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(1938D, 1939D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(1938, 1939));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(1940D, 1941D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(1940, 1941));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe'));");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(157, 158, 159, 160));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(158, 159, 160, 157));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(161, 162, 163, 164));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(162, 163, 164, 161));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(1950.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(1950.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(1951.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(1951.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_image_1952");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image_1952')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(168, 169, 170, 171));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_grid_1957");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid_1957')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(173, 174, 175, 176));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.686274509803922, 0.690196078431373, 0.67843137254902), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_stripe_1962");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe_1962')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(178, 179, 180, 181));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.701960784313725, 0.705882352941177, 0.709803921568627, 0.698039215686274), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_stripe_1967");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe_1967')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(183, 184, 185, 186));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1972");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1972')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(188, 189, 190, 191));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1977");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1977')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(1978D, 1979D), new UnitSpherical(1980D, 1981D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(1978, 1979), new Spherical(1980, 1981) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1982");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1982')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(1983D, 1984D, 1985D), new Cartesian(1986D, 1987D, 1988D)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(1983, 1984, 1985)), Spherical.fromCartesian3(new Cartesian3(1986, 1987, 1988)) ]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1989");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1989')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DirectionListCesiumWriter w2 = w.openDirectionsProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.577060240620744, 0.577350220641156, 0.577640200661569),
										new UnitCartesian(0.577060677045512, 0.57735022078713, 0.577639764528748)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.fan.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.577060240620744, 0.577350220641156, 0.577640200661569)), Spherical.fromCartesian3(new Cartesian3(0.577060677045512, 0.57735022078713, 0.577639764528748)) ], 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant1996");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant1996')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(212, 213, 214, 215));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_image");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_image'));");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeUri("http://example.com/2001", CesiumResourceBehavior.LINK_TO);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.image.getValue(date)).toEqual('http://example.com/2001');");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(new Rectangular(2002D, 2003D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(2002, 2003));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(219, 220, 221, 222));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(220, 221, 222, 219));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeBoolean(true);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_grid");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_grid'));");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(223, 224, 225, 226));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(224, 225, 226, 223));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(2012.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(2012.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(new Rectangular(2013D, 2014D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(2013, 2014));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(new Rectangular(2015D, 2016D));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(2015, 2016));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(new Rectangular(2017D, 2018D));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(2017, 2018));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_stripe");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe'));");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(234, 235, 236, 237));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(235, 236, 237, 234));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(ColorHelper.fromArgb(238, 239, 240, 241));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(239, 240, 241, 238));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(2027.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(date)).toEqual(2027.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(2028.0);
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(2028.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_image_2029");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_image_2029')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(245, 246, 247, 248));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_grid_2034");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_grid_2034')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(250, 251, 252, 253));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.984313725490196, 0.988235294117647, 0.992156862745098, 0.980392156862745), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_stripe_2039");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe_2039')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(0, 1, 2, 3));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("material_fan_material_stripe_2044");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe_2044')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(ColorHelper.fromArgb(5, 6, 7, 8));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2049");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2049')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(10, 11, 12, 13));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.0431372549019608, 0.0470588235294118, 0.0509803921568627, 0.0392156862745098), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeConstantValuesIndividualVector() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2054");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2054')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(ColorHelper.fromArgb(15, 16, 17, 18));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.color.getValue(date)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2059");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2059')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitSpherical(new UnitSpherical(2060D, 2061D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(2060, 2061)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2062");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2062')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeCartesian(new Cartesian(2063D, 2064D, 2065D));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(2063, 2064, 2065));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("constant2066");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('constant2066')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitCartesian(new UnitCartesian(0.577071041295453, 0.577350224189161, 0.57762940708287));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(date)).toEqualEpsilon(new Cartesian3(0.577071041295453, 0.577350224189161, 0.57762940708287), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantPosition1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition1')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(2070D, 2071D, 2072D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(2070, 2071, 2072));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantDouble1");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble1')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(2073.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(2073.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantPosition2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition2')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(new Cartesian(2074D, 2075D, 2076D));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(2074, 2075, 2076));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("ConstantDouble2");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble2')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(2077.0);
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(2077.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Reference");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('Reference')).toBeDefined();");
				{
					cesiumlanguagewriter.StringCesiumWriter w = packet.openDescriptionProperty();
					try {
						w.writeReference(new Reference("Constant", "description"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeReference(new Reference("Constant", "position"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeReference(new Reference("Constant", "orientation"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeReference(new Reference("Constant", "viewFrom"));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openImageProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "image")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "eyeOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "horizontalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "verticalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "color")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "alignedAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openSizeInMetersProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "sizeInMeters")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffsetScaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "imageSubRegion")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "dimensions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("box", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(constant.box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.corridor.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.CornerTypeCesiumWriter w2 = w.openCornerTypeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "cornerType")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("corridor", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(date)).toEqual(constant.corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "length")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "topRadius")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "bottomRadius")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("cylinder", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(date)).toEqual(constant.cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "numberOfVerticalLines")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "slices")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMajorAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMinorAxis")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("ellipse", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(date)).toEqual(constant.ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "numberOfVerticalLines")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "radii")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("ellipsoid", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(constant.ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "stackPartitions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "slicePartitions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "subdivisions")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.StringCesiumWriter w2 = w.openTextProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "text")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.FontCesiumWriter w2 = w.openFontProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "font")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.LabelStyleCesiumWriter w2 = w.openStyleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "style")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "eyeOffset")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.HorizontalOriginCesiumWriter w2 = w.openHorizontalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "horizontalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.VerticalOriginCesiumWriter w2 = w.openVerticalOriginProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "verticalOrigin")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "fillColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffsetScaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.UriCesiumWriter w2 = w.openGltfProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "uri")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "scale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "minimumPixelSize")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "maximumScale")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openIncrementallyLoadTexturesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "incrementallyLoadTextures")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openRunAnimationsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "runAnimations")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NodeTransformationsCesiumWriter w2 = w.openNodeTransformationsProperty();
							try {
								{
									cesiumlanguagewriter.NodeTransformationCesiumWriter a = w2.openNodeTransformationProperty("referenceProp");
									try {
										{
											cesiumlanguagewriter.TranslationCesiumWriter w3 = a.openTranslationProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "translation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.translation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.translation.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.RotationCesiumWriter w3 = a.openRotationProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "rotation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.rotation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.rotation.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
										{
											cesiumlanguagewriter.ScaleCesiumWriter w3 = a.openScaleProperty();
											try {
												w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "scale")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.model.nodeTransformations.referenceProp.scale.getValue(date)).toEqual(constant.model.nodeTransformations.prop.scale.getValue(date));");
											} finally {
												DisposeHelper.dispose(w3);
											}
										}
									} finally {
										DisposeHelper.dispose(a);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "resolution")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "leadTime")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "trailTime")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(constant.path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "pixelSize")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "color")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "scaleByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "translucencyByDistance")));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.polygon.hierarchy.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("polygon", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(date)).toEqual(constant.polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerPositionHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "perPositionHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeTop")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeBottom")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.polyline.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "width")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("polyline", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(date)).toEqual(constant.polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFollowSurfaceProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "followSurface")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.followSurface.getValue(date)).toEqual(constant.polyline.followSurface.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "coordinates")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "height")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "extrudedHeight")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "rotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "stRotation")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangle", "material", "color")));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(date)).toEqual(constant.rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseTopProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "closeTop")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeTop.getValue(date)).toEqual(constant.rectangle.closeTop.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openCloseBottomProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "closeBottom")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.closeBottom.getValue(date)).toEqual(constant.rectangle.closeBottom.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "show")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PositionListCesiumWriter w2 = w.openPositionsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2",
										createList("position"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMinimumHeightsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList(
										"billboard", "scale")), new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.minimumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleListCesiumWriter w2 = w.openMaximumHeightsProperty();
							try {
								w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList(
										"billboard", "scale")), new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
								TextWriterHelper
										.writeLine(
												m_assertionsWriter,
												"    expect(e.wall.maximumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "granularity")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "fill")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(constant.wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outline")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineColor")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineWidth")));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "innerHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "outerHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "minimumClockAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "maximumClockAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("conicSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("customPatternSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentIntersection")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionColor")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionWidth")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "show")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "xHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "yHalfAngle")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowLateralSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showLateralSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEllipsoidHorizonSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidHorizonSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowDomeSurfacesProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showDomeSurfaces")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.SensorVolumePortionToDisplayCesiumWriter w2 = w.openPortionToDisplayProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "portionToDisplay")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openEnvironmentConstraintProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentConstraint")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentOcclusionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentOcclusion")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("rectangularSensor", "environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowEnvironmentIntersectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentIntersection")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "radius")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openPerDirectionRadiusProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "perDirectionRadius")));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("Constant", createList("fan", "material", "color")));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(date)).toEqual(constant.fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openFillProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "fill")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openOutlineProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outline")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineColor")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineWidth")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "numberOfRings")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.BooleanCesiumWriter w2 = w.openShowProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "show")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "color")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "direction")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "length")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "minimumLengthInPixels")));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeReferenceValuesIndividual();
	}

	final private void writeReferenceValuesIndividual() {
		writeReferenceValuesIndividualDescription();
		writeReferenceValuesIndividualPosition();
		writeReferenceValuesIndividualOrientation();
		writeReferenceValuesIndividualViewFrom();
		writeReferenceValuesIndividualBillboard();
		writeReferenceValuesIndividualBox();
		writeReferenceValuesIndividualCorridor();
		writeReferenceValuesIndividualCylinder();
		writeReferenceValuesIndividualEllipse();
		writeReferenceValuesIndividualEllipsoid();
		writeReferenceValuesIndividualLabel();
		writeReferenceValuesIndividualModel();
		writeReferenceValuesIndividualPath();
		writeReferenceValuesIndividualPoint();
		writeReferenceValuesIndividualPolygon();
		writeReferenceValuesIndividualPolyline();
		writeReferenceValuesIndividualRectangle();
		writeReferenceValuesIndividualWall();
		writeReferenceValuesIndividualConicSensor();
		writeReferenceValuesIndividualCustomPatternSensor();
		writeReferenceValuesIndividualRectangularSensor();
		writeReferenceValuesIndividualFan();
		writeReferenceValuesIndividualVector();
	}

	final private void writeReferenceValuesIndividualDescription() {}

	final private void writeReferenceValuesIndividualPosition() {}

	final private void writeReferenceValuesIndividualOrientation() {}

	final private void writeReferenceValuesIndividualViewFrom() {}

	final private void writeReferenceValuesIndividualBillboard() {}

	final private void writeReferenceValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2078");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2078')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2079");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2079')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2080");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2080')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2081");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2081')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2082");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2082')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2083");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2083')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2084");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2084')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2085");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2085')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2086");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2086')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2087");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2087')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2088");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2088')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2089");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2089')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2090");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2090')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2091");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2091')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2092");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2092')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualLabel() {}

	final private void writeReferenceValuesIndividualModel() {}

	final private void writeReferenceValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2093");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2093')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineWidth")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineWidth.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2094");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2094')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineArrow", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineArrow').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2095");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2095')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "glowPower")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.glowPower.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2096");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2096')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2097");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2097')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2098");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2098')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualPoint() {}

	final private void writeReferenceValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2099");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2099')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2100");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2100')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2101");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2101')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2102");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2102')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineWidth")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineWidth.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2103");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2103')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineArrow", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineArrow').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2104");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2104')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "glowPower")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.glowPower.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2105");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2105')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2106");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2106')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2107");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2107')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2108");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2108')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2109");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2109')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2110");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2110')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2111");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2111')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "image")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2112");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2112')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "color")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2113");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2113')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "offset")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2114");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2114')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial",
																"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2115");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2115')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid",
														createList("conicSensor", "lateralSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2116");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2116')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe",
														createList("conicSensor", "lateralSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial",
																"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2117");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2117')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2118");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2118')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid",
														createList("conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid",
														createList("conicSensor", "ellipsoidSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2119");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2119')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2
														.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial",
																"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2120");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2120')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2121");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2121')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2122");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2122')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2123");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2123')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2124");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2124')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2125");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2125')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2126");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2126')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2127");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2127')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2128");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2128')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2129");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2129')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor",
														"lateralSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2130");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2130')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2131");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2131')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor",
														"lateralSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2132");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2132')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2133");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2133')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2134");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2134')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2135");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2135')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2136");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2136')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2137");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2137')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("customPatternSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2138");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2138')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2139");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2139')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2140");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2140')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2141");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2141')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor",
														"environmentOcclusionMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2142");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2142')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor",
														"environmentOcclusionMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2143");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2143')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2144");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2144')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2145");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2145')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2146");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2146')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2147");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2147')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2148");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2148')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2149");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2149')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2150");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2150')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2151");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2151')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2152");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2152')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor",
														"ellipsoidHorizonSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2153");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2153')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
																"image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image",
														createList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
																"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial",
														"transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2154");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2154')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2
														.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
																"color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial",
														"lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2155");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2155')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial",
														"repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2156");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2156')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "image")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor",
														"environmentOcclusionMaterial", "transparent")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2157");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2157')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "color")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "cellAlpha")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineCount")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineThickness")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor",
														"environmentOcclusionMaterial", "lineOffset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2158");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2158')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "orientation")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "evenColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "oddColor")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "offset")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor",
														"environmentOcclusionMaterial", "repeat")));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2159");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2159')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.UriCesiumWriter m2 = m.openImageProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "image")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.image.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.BooleanCesiumWriter m2 = m.openTransparentProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "transparent")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.transparent.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2160");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2160')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "color")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.color.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "cellAlpha")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.cellAlpha.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineCount")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineCount.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineThickness")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineThickness.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineOffset")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineOffset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("reference2161");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('reference2161')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.StripeOrientationCesiumWriter m2 = m.openOrientationProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "orientation")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.orientation.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "evenColor")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.evenColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "oddColor")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.oddColor.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "offset")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.offset.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "repeat")));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.repeat.getValue(date));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeReferenceValuesIndividualVector() {}

	final private void writeSampledValues() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("Sampled");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('Sampled')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Cartesian> createList(
								new Cartesian(2162D, 2163D, 2164D), new Cartesian(2165D, 2166D, 2167D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(2162, 2163, 2164));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(2165, 2166, 2167));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.OrientationCesiumWriter w = packet.openOrientationProperty();
					try {
						w.writeUnitQuaternion(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<UnitQuaternion> createList(new UnitQuaternion(0.499654231877029, 0.49988469969616, 0.500115167515292, 0.500345635334423), new UnitQuaternion(0.499654868333074,
										0.499884912010944, 0.500114955688813, 0.500344999366683)));
						TextWriterHelper
								.writeLine(m_assertionsWriter,
										"    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.49988469969616, 0.500115167515292, 0.500345635334423, 0.499654231877029), 1e-14);");
						TextWriterHelper
								.writeLine(m_assertionsWriter,
										"    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.499884912010944, 0.500114955688813, 0.500344999366683, 0.499654868333074), 1e-14);");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ViewFromCesiumWriter w = packet.openViewFromProperty();
					try {
						w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Cartesian> createList(
								new Cartesian(2176D, 2177D, 2178D), new Cartesian(2179D, 2180D, 2181D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(2176, 2177, 2178));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(2179, 2180, 2181));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2182.0, 2183.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(2182.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(2183.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Rectangular> createList(new Rectangular(2184D, 2185D), new Rectangular(2186D, 2187D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2184, 2185));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2186, 2187));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(2188D, 2189D, 2190D), new Cartesian(2191D, 2192D, 2193D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(2188, 2189, 2190));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(2191, 2192, 2193));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(154, 155, 156, 157), ColorHelper.fromArgb(158, 159, 160, 161)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2202.0, 2203.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(2202.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(2203.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.AlignedAxisCesiumWriter w2 = w.openAlignedAxisProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(2204D, 2205D, 2206D), new Cartesian(2207D, 2208D, 2209D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqual(new Cartesian3(2204, 2205, 2206));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqual(new Cartesian3(2207, 2208, 2209));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2210.0, 2211.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStartDate)).toEqual(2210.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStopDate)).toEqual(2211.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2212.0, 2213.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStartDate)).toEqual(2212.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStopDate)).toEqual(2213.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2214D, 2215D, 2216D, 2217D), new NearFarScalar(2218D, 2219D, 2220D, 2221D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2214, 2215, 2216, 2217));");
								TextWriterHelper
										.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2218, 2219, 2220, 2221));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2222D, 2223D, 2224D, 2225D), new NearFarScalar(2226D, 2227D, 2228D, 2229D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2222, 2223, 2224, 2225));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2226, 2227, 2228, 2229));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2230D, 2231D, 2232D, 2233D), new NearFarScalar(2234D, 2235D, 2236D, 2237D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2230, 2231, 2232, 2233));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2234, 2235, 2236, 2237));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.BoundingRectangleCesiumWriter w2 = w.openImageSubRegionProperty();
							try {
								w2.writeBoundingRectangle(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<BoundingRectangle> createList(BoundingRectangle.fromWidthHeight(2238D, 2239D, 2240D, 2241D), BoundingRectangle.fromWidthHeight(2242D, 2243D, 2244D, 2245D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(2238, 2239, 2240, 2241));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(2242, 2243, 2244, 2245));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.BoxDimensionsCesiumWriter w2 = w.openDimensionsProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(2246D, 2247D, 2248D), new Cartesian(2249D, 2250D, 2251D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(2246, 2247, 2248));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(2249, 2250, 2251));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(212, 213, 214, 215), ColorHelper.fromArgb(216, 217, 218, 219)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(220, 221, 222, 223), ColorHelper.fromArgb(224, 225, 226, 227)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2268.0, 2269.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(2268.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(2269.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2270.0, 2271.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStartDate)).toEqual(2270.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStopDate)).toEqual(2271.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2272.0, 2273.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStartDate)).toEqual(2272.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStopDate)).toEqual(2273.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2274.0, 2275.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(2274.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(2275.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2276.0, 2277.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(2276.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(2277.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(238, 239, 240, 241), ColorHelper.fromArgb(242, 243, 244, 245)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(246, 247, 248, 249), ColorHelper.fromArgb(250, 251, 252, 253)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2294.0, 2295.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(2294.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(2295.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2296.0, 2297.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(2296.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(2297.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTopRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2298.0, 2299.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(2298.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(2299.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openBottomRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2300.0, 2301.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(2300.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(2301.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(7, 8, 9, 10), ColorHelper.fromArgb(11, 12, 13, 14)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(15, 16, 17, 18), ColorHelper.fromArgb(19, 20, 21, 22)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2318.0, 2319.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(2318.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(2319.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2320.0, 2321.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2320.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2321.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2322.0, 2323.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(2322.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(2323.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMajorAxisProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2324.0, 2325.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(2324.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(2325.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSemiMinorAxisProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2326.0, 2327.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(2326.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(2327.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2328.0, 2329.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(2328.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(2329.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2330.0, 2331.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(2330.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(2331.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2332.0, 2333.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(2332.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(2333.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2334.0, 2335.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(2334.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(2335.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2336.0, 2337.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(2336.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(2337.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(43, 44, 45, 46), ColorHelper.fromArgb(47, 48, 49, 50)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(51, 52, 53, 54), ColorHelper.fromArgb(55, 56, 57, 58)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(52, 53, 54, 51));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(56, 57, 58, 55));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2354.0, 2355.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(2354.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(2355.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfVerticalLinesProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2356.0, 2357.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(2356.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(2357.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.EllipsoidRadiiCesiumWriter w2 = w.openRadiiProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(2358D, 2359D, 2360D), new Cartesian(2361D, 2362D, 2363D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(2358, 2359, 2360));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(2361, 2362, 2363));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(69, 70, 71, 72), ColorHelper.fromArgb(73, 74, 75, 76)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(77, 78, 79, 80), ColorHelper.fromArgb(81, 82, 83, 84)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 79, 80, 77));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2380.0, 2381.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(2380.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(2381.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStackPartitionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2382.0, 2383.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(2382.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(2383.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSlicePartitionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2384.0, 2385.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(2384.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(2385.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openSubdivisionsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2386.0, 2387.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(2386.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(2387.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2388.0, 2389.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStartDate)).toEqual(2388.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStopDate)).toEqual(2389.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PixelOffsetCesiumWriter w2 = w.openPixelOffsetProperty();
							try {
								w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Rectangular> createList(new Rectangular(2390D, 2391D), new Rectangular(2392D, 2393D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2390, 2391));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2392, 2393));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.EyeOffsetCesiumWriter w2 = w.openEyeOffsetProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(2394D, 2395D, 2396D), new Cartesian(2397D, 2398D, 2399D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(2394, 2395, 2396));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(2397, 2398, 2399));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(105, 106, 107, 108), ColorHelper.fromArgb(109, 110, 111, 112)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(113, 114, 115, 116), ColorHelper.fromArgb(117, 118, 119, 120)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2416.0, 2417.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(2416.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(2417.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2418D, 2419D, 2420D, 2421D), new NearFarScalar(2422D, 2423D, 2424D, 2425D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2418, 2419, 2420, 2421));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2422, 2423, 2424, 2425));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openPixelOffsetScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2426D, 2427D, 2428D, 2429D), new NearFarScalar(2430D, 2431D, 2432D, 2433D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2426, 2427, 2428, 2429));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2430, 2431, 2432, 2433));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ModelCesiumWriter w = packet.openModelProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2434.0, 2435.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStartDate)).toEqual(2434.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStopDate)).toEqual(2435.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumPixelSizeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2436.0, 2437.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(2436.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(2437.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumScaleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2438.0, 2439.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(2438.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(2439.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2440.0, 2441.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStartDate)).toEqual(2440.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStopDate)).toEqual(2441.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openResolutionProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2442.0, 2443.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStartDate)).toEqual(2442.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStopDate)).toEqual(2443.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLeadTimeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2444.0, 2445.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(2444.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(2445.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openTrailTimeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2446.0, 2447.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(2446.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(2447.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(153, 154, 155, 156), ColorHelper.fromArgb(157, 158, 159, 160)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(154, 155, 156, 153));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(158, 159, 160, 157));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openPixelSizeProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2456.0, 2457.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(2456.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(2457.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(163, 164, 165, 166), ColorHelper.fromArgb(167, 168, 169, 170)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(171, 172, 173, 174), ColorHelper.fromArgb(175, 176, 177, 178)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2474.0, 2475.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(2474.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(2475.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openScaleByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2476D, 2477D, 2478D, 2479D), new NearFarScalar(2480D, 2481D, 2482D, 2483D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2476, 2477, 2478, 2479));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2480, 2481, 2482, 2483));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.NearFarScalarCesiumWriter w2 = w.openTranslucencyByDistanceProperty();
							try {
								w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<NearFarScalar> createList(new NearFarScalar(2484D, 2485D, 2486D, 2487D), new NearFarScalar(2488D, 2489D, 2490D, 2491D)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(2484, 2485, 2486, 2487));");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(2488, 2489, 2490, 2491));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2492.0, 2493.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStartDate)).toEqual(2492.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStopDate)).toEqual(2493.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2494.0, 2495.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(2494.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(2495.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2496.0, 2497.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(2496.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(2497.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2498.0, 2499.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(2498.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(2499.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(205, 206, 207, 208), ColorHelper.fromArgb(209, 210, 211, 212)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(213, 214, 215, 216), ColorHelper.fromArgb(217, 218, 219, 220)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2516.0, 2517.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(2516.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(2517.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2518.0, 2519.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStartDate)).toEqual(2518.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStopDate)).toEqual(2519.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2520.0, 2521.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(2520.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(2521.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(227, 228, 229, 230), ColorHelper.fromArgb(231, 232, 233, 234)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 229, 230, 227));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsen(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<CartographicExtent> createList(new CartographicExtent(1.01791386021654, 0.447117533421645, 1.44711753342165, 0.876321206626749), new CartographicExtent(
												0.305524879831852, 1.30552487983185, 0.734728553036955, 0.163932226242059)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(1.01791386021654, 0.447117533421645, 1.44711753342165, 0.876321206626749));");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.305524879831852, 1.30552487983185, 0.734728553036955, 0.163932226242059));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2538.0, 2539.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(2538.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(2539.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openExtrudedHeightProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2540.0, 2541.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(2540.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(2541.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2542.0, 2543.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(2542.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(2543.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openStRotationProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2544.0, 2545.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(2544.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(2545.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2546.0, 2547.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(2546.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(2547.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(253, 254, 0, 1), ColorHelper.fromArgb(2, 3, 4, 5)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(254, 0, 1, 253));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(6, 7, 8, 9), ColorHelper.fromArgb(10, 11, 12, 13)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2564.0, 2565.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(2564.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(2565.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openGranularityProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2566.0, 2567.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(2566.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(2567.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(18, 19, 20, 21), ColorHelper.fromArgb(22, 23, 24, 25)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 20, 21, 18));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(23, 24, 25, 22));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(27, 28, 29, 26));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 32, 33, 30));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2584.0, 2585.0));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(2584.0);");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(2585.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openInnerHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2586.0, 2587.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(2586.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(2587.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOuterHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2588.0, 2589.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(2588.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(2589.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumClockAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2590.0, 2591.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(2590.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(2591.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMaximumClockAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2592.0, 2593.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(2592.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(2593.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2594.0, 2595.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(2594.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(2595.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(46, 47, 48, 49), ColorHelper.fromArgb(50, 51, 52, 53)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2604.0, 2605.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2604.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2605.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(64, 65, 66, 67), ColorHelper.fromArgb(68, 69, 70, 71)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(72, 73, 74, 75), ColorHelper.fromArgb(76, 77, 78, 79)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(80, 81, 82, 83), ColorHelper.fromArgb(84, 85, 86, 87)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(88, 89, 90, 91), ColorHelper.fromArgb(92, 93, 94, 95)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(93, 94, 95, 92));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(96, 97, 98, 99), ColorHelper.fromArgb(100, 101, 102, 103)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 98, 99, 96));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 102, 103, 100));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2654.0, 2655.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2654.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2655.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2656.0, 2657.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(2656.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(2657.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(108, 109, 110, 111), ColorHelper.fromArgb(112, 113, 114, 115)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2666.0, 2667.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2666.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2667.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(118, 119, 120, 121), ColorHelper.fromArgb(122, 123, 124, 125)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(126, 127, 128, 129), ColorHelper.fromArgb(130, 131, 132, 133)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(134, 135, 136, 137), ColorHelper.fromArgb(138, 139, 140, 141)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(139, 140, 141, 138));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(142, 143, 144, 145), ColorHelper.fromArgb(146, 147, 148, 149)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(143, 144, 145, 142));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(150, 151, 152, 153), ColorHelper.fromArgb(154, 155, 156, 157)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(158, 159, 160, 161), ColorHelper.fromArgb(162, 163, 164, 165)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2716.0, 2717.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2716.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2717.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openXHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2718.0, 2719.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(2718.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(2719.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openYHalfAngleProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2720.0, 2721.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(2720.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(2721.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2722.0, 2723.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(2722.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(2723.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(174, 175, 176, 177), ColorHelper.fromArgb(178, 179, 180, 181)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(175, 176, 177, 174));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(179, 180, 181, 178));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2732.0, 2733.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(2732.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(2733.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(184, 185, 186, 187), ColorHelper.fromArgb(188, 189, 190, 191)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(189, 190, 191, 188));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(192, 193, 194, 195), ColorHelper.fromArgb(196, 197, 198, 199)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(200, 201, 202, 203), ColorHelper.fromArgb(204, 205, 206, 207)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(201, 202, 203, 200));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(205, 206, 207, 204));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(208, 209, 210, 211), ColorHelper.fromArgb(212, 213, 214, 215)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(209, 210, 211, 208));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(216, 217, 218, 219), ColorHelper.fromArgb(220, 221, 222, 223)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openEnvironmentIntersectionWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2782.0, 2783.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(2782.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(2783.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openRadiusProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2784.0, 2785.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStartDate)).toEqual(2784.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStopDate)).toEqual(2785.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(236, 237, 238, 239), ColorHelper.fromArgb(240, 241, 242, 243)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(241, 242, 243, 240));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(244, 245, 246, 247), ColorHelper.fromArgb(248, 249, 250, 251)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 246, 247, 244));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(249, 250, 251, 248));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openOutlineWidthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2802.0, 2803.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(2802.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(2803.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openNumberOfRingsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2804.0, 2805.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(2804.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(2805.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(1, 2, 3, 4), ColorHelper.fromArgb(5, 6, 7, 8)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Spherical> createList(new Spherical(2814D, 2815D, 2816D), new Spherical(2817D, 2818D, 2819D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(2814, 2815, 2816)));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(2817, 2818, 2819)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openLengthProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2820.0, 2821.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStartDate)).toEqual(2820.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStopDate)).toEqual(2821.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
						{
							cesiumlanguagewriter.DoubleCesiumWriter w2 = w.openMinimumLengthInPixelsProperty();
							try {
								w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(
										2822.0, 2823.0));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(2822.0);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(2823.0);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		writeSampledValuesIndividual();
	}

	final private void writeSampledValuesIndividual() {
		writeSampledValuesIndividualDescription();
		writeSampledValuesIndividualPosition();
		writeSampledValuesIndividualOrientation();
		writeSampledValuesIndividualViewFrom();
		writeSampledValuesIndividualBillboard();
		writeSampledValuesIndividualBox();
		writeSampledValuesIndividualCorridor();
		writeSampledValuesIndividualCylinder();
		writeSampledValuesIndividualEllipse();
		writeSampledValuesIndividualEllipsoid();
		writeSampledValuesIndividualLabel();
		writeSampledValuesIndividualModel();
		writeSampledValuesIndividualPath();
		writeSampledValuesIndividualPoint();
		writeSampledValuesIndividualPolygon();
		writeSampledValuesIndividualPolyline();
		writeSampledValuesIndividualRectangle();
		writeSampledValuesIndividualWall();
		writeSampledValuesIndividualConicSensor();
		writeSampledValuesIndividualCustomPatternSensor();
		writeSampledValuesIndividualRectangularSensor();
		writeSampledValuesIndividualFan();
		writeSampledValuesIndividualVector();
	}

	final private void writeSampledValuesIndividualDescription() {}

	final private void writeSampledValuesIndividualPosition() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2824");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2824')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicRadians(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Cartographic> createList(new Cartographic(0.708204422775989, 0.137408095981092, 2827D), new Cartographic(0.566611769186196, 1.5666117691862, 2830D)));
						TextWriterHelper.writeLine(m_assertionsWriter,
								"    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(0.708204422775989, 0.137408095981092, 2827));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.566611769186196, 1.5666117691862, 2830));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2831");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2831')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartographicDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Cartographic> createList(new Cartographic(42D, 43D, 2834D), new Cartographic(0D, 1D, 2837D)));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(42, 43, 2834));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(0, 1, 2837));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2838");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2838')).toBeDefined();");
				{
					cesiumlanguagewriter.PositionCesiumWriter w = packet.openPositionProperty();
					try {
						w.writeCartesianVelocity(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
								.<Motion1<Cartesian>> createList(new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(2839D, 2840D, 2841D), new Cartesian(2842D, 2843D, 2844D)),
										new Motion1<cesiumlanguagewriter.Cartesian>(new Cartesian(2845D, 2846D, 2847D), new Cartesian(2848D, 2849D, 2850D))));
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(2839, 2840, 2841));");
						TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(2845, 2846, 2847));");
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualOrientation() {}

	final private void writeSampledValuesIndividualViewFrom() {}

	final private void writeSampledValuesIndividualBillboard() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2851");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2851')).toBeDefined();");
				{
					cesiumlanguagewriter.BillboardCesiumWriter w = packet.openBillboardProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(47, 48, 49, 50), ColorHelper.fromArgb(51, 52, 53, 54)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualBox() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2860");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2860')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2869");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2869')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(2870D, 2871D), new Rectangular(2872D, 2873D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2870, 2871));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2872, 2873));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(69, 70, 71, 72), ColorHelper.fromArgb(73, 74, 75, 76)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(70, 71, 72, 69));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 75, 76, 73));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2882");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2882')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(78, 79, 80, 81), ColorHelper.fromArgb(82, 83, 84, 85)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(79, 80, 81, 78));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(83, 84, 85, 82));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(2891.0, 2892.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(2891.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(2892.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(2893D, 2894D), new Rectangular(2895D, 2896D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(2893, 2894));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2895, 2896));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(2897D, 2898D), new Rectangular(2899D, 2900D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(2897, 2898));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2899, 2900));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(2901D, 2902D), new Rectangular(2903D, 2904D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2901, 2902));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2903, 2904));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2905");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2905')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(101, 102, 103, 104), ColorHelper.fromArgb(105, 106, 107, 108)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 107, 108, 105));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(109, 110, 111, 112), ColorHelper.fromArgb(113, 114, 115, 116)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 111, 112, 109));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(114, 115, 116, 113));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(2922.0, 2923.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(2922.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(2923.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(2924.0, 2925.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(2924.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(2925.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2926");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2926')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(122, 123, 124, 125), ColorHelper.fromArgb(126, 127, 128, 129)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2935");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2935')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(131, 132, 133, 134), ColorHelper.fromArgb(135, 136, 137, 138)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.52156862745098, 0.525490196078431, 0.513725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.533333333333333, 0.537254901960784, 0.541176470588235, 0.529411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2944");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2944')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(140, 141, 142, 143), ColorHelper.fromArgb(144, 145, 146, 147)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.552941176470588, 0.556862745098039, 0.56078431372549, 0.549019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.568627450980392, 0.572549019607843, 0.576470588235294, 0.564705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2953");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2953')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(149, 150, 151, 152), ColorHelper.fromArgb(153, 154, 155, 156)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.588235294117647, 0.592156862745098, 0.596078431372549, 0.584313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.603921568627451, 0.607843137254902, 0.611764705882353, 0.6), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled2962");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled2962')).toBeDefined();");
				{
					cesiumlanguagewriter.BoxCesiumWriter w = packet.openBoxProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(158, 159, 160, 161), ColorHelper.fromArgb(162, 163, 164, 165)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.623529411764706, 0.627450980392157, 0.631372549019608, 0.619607843137255), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.63921568627451, 0.643137254901961, 0.647058823529412, 0.635294117647059), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCorridor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2971");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2971')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(167, 168, 169, 170), ColorHelper.fromArgb(171, 172, 173, 174)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2980");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2980')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(2981D, 2982D), new Rectangular(2983D, 2984D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(2981, 2982));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2983, 2984));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(180, 181, 182, 183), ColorHelper.fromArgb(184, 185, 186, 187)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial2993");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial2993')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(189, 190, 191, 192), ColorHelper.fromArgb(193, 194, 195, 196)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(190, 191, 192, 189));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(194, 195, 196, 193));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3002.0, 3003.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(3002.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(3003.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3004D, 3005D), new Rectangular(3006D, 3007D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3004, 3005));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3006, 3007));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3008D, 3009D), new Rectangular(3010D, 3011D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3008, 3009));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3010, 3011));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3012D, 3013D), new Rectangular(3014D, 3015D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3012, 3013));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3014, 3015));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3016");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3016')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(212, 213, 214, 215), ColorHelper.fromArgb(216, 217, 218, 219)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(213, 214, 215, 212));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 218, 219, 216));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(220, 221, 222, 223), ColorHelper.fromArgb(224, 225, 226, 227)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 222, 223, 220));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3033.0, 3034.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(3033.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(3034.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3035.0, 3036.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(3035.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(3036.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3037");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3037')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(233, 234, 235, 236), ColorHelper.fromArgb(237, 238, 239, 240)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3046");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3046')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(242, 243, 244, 245), ColorHelper.fromArgb(246, 247, 248, 249)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3055");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3055')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(251, 252, 253, 254), ColorHelper.fromArgb(0, 1, 2, 3)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3064");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3064')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(5, 6, 7, 8), ColorHelper.fromArgb(9, 10, 11, 12)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3073");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3073')).toBeDefined();");
				{
					cesiumlanguagewriter.CorridorCesiumWriter w = packet.openCorridorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(14, 15, 16, 17), ColorHelper.fromArgb(18, 19, 20, 21)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCylinder() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3082");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3082')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(23, 24, 25, 26), ColorHelper.fromArgb(27, 28, 29, 30)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3091");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3091')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3092D, 3093D), new Rectangular(3094D, 3095D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3092, 3093));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3094, 3095));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(36, 37, 38, 39), ColorHelper.fromArgb(40, 41, 42, 43)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(37, 38, 39, 36));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(41, 42, 43, 40));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3104");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3104')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(45, 46, 47, 48), ColorHelper.fromArgb(49, 50, 51, 52)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(46, 47, 48, 45));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(50, 51, 52, 49));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3113.0, 3114.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(3113.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(3114.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3115D, 3116D), new Rectangular(3117D, 3118D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3115, 3116));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3117, 3118));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3119D, 3120D), new Rectangular(3121D, 3122D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3119, 3120));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3121, 3122));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3123D, 3124D), new Rectangular(3125D, 3126D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3123, 3124));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3125, 3126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3127");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3127')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(76, 77, 78, 79), ColorHelper.fromArgb(80, 81, 82, 83)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(81, 82, 83, 80));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3144.0, 3145.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(3144.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(3145.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3146.0, 3147.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(3146.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(3147.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3148");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3148')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(89, 90, 91, 92), ColorHelper.fromArgb(93, 94, 95, 96)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.352941176470588, 0.356862745098039, 0.36078431372549, 0.349019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.368627450980392, 0.372549019607843, 0.376470588235294, 0.364705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3157");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3157')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(98, 99, 100, 101), ColorHelper.fromArgb(102, 103, 104, 105)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.388235294117647, 0.392156862745098, 0.396078431372549, 0.384313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.403921568627451, 0.407843137254902, 0.411764705882353, 0.4), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3166");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3166')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(107, 108, 109, 110), ColorHelper.fromArgb(111, 112, 113, 114)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.423529411764706, 0.427450980392157, 0.431372549019608, 0.419607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.43921568627451, 0.443137254901961, 0.447058823529412, 0.435294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3175");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3175')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(116, 117, 118, 119), ColorHelper.fromArgb(120, 121, 122, 123)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.458823529411765, 0.462745098039216, 0.466666666666667, 0.454901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.474509803921569, 0.47843137254902, 0.482352941176471, 0.470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3184");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3184')).toBeDefined();");
				{
					cesiumlanguagewriter.CylinderCesiumWriter w = packet.openCylinderProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(125, 126, 127, 128), ColorHelper.fromArgb(129, 130, 131, 132)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualEllipse() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3193");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3193')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(134, 135, 136, 137), ColorHelper.fromArgb(138, 139, 140, 141)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3202");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3202')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3203D, 3204D), new Rectangular(3205D, 3206D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3203, 3204));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3205, 3206));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(147, 148, 149, 150), ColorHelper.fromArgb(151, 152, 153, 154)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3215");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3215')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(156, 157, 158, 159), ColorHelper.fromArgb(160, 161, 162, 163)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3224.0, 3225.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(3224.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(3225.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3226D, 3227D), new Rectangular(3228D, 3229D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3226, 3227));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3228, 3229));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3230D, 3231D), new Rectangular(3232D, 3233D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3230, 3231));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3232, 3233));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3234D, 3235D), new Rectangular(3236D, 3237D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3234, 3235));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3236, 3237));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3238");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3238')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(187, 188, 189, 190), ColorHelper.fromArgb(191, 192, 193, 194)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3255.0, 3256.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(3255.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(3256.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3257.0, 3258.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(3257.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(3258.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3259");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3259')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(200, 201, 202, 203), ColorHelper.fromArgb(204, 205, 206, 207)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.788235294117647, 0.792156862745098, 0.796078431372549, 0.784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.803921568627451, 0.807843137254902, 0.811764705882353, 0.8), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3268");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3268')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(209, 210, 211, 212), ColorHelper.fromArgb(213, 214, 215, 216)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.823529411764706, 0.827450980392157, 0.831372549019608, 0.819607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.83921568627451, 0.843137254901961, 0.847058823529412, 0.835294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3277");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3277')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(218, 219, 220, 221), ColorHelper.fromArgb(222, 223, 224, 225)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.858823529411765, 0.862745098039216, 0.866666666666667, 0.854901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.874509803921569, 0.87843137254902, 0.882352941176471, 0.870588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3286");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3286')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(227, 228, 229, 230), ColorHelper.fromArgb(231, 232, 233, 234)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.894117647058824, 0.898039215686275, 0.901960784313726, 0.890196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.909803921568627, 0.913725490196078, 0.917647058823529, 0.905882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3295");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3295')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipseCesiumWriter w = packet.openEllipseProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(236, 237, 238, 239), ColorHelper.fromArgb(240, 241, 242, 243)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.933333333333333, 0.937254901960784, 0.925490196078431), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.945098039215686, 0.949019607843137, 0.952941176470588, 0.941176470588235), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualEllipsoid() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3304");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3304')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(245, 246, 247, 248), ColorHelper.fromArgb(249, 250, 251, 252)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3313");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3313')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3314D, 3315D), new Rectangular(3316D, 3317D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3314, 3315));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3316, 3317));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(3, 4, 5, 6), ColorHelper.fromArgb(7, 8, 9, 10)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3326");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3326')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(12, 13, 14, 15), ColorHelper.fromArgb(16, 17, 18, 19)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(13, 14, 15, 12));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 18, 19, 16));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3335.0, 3336.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(3335.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(3336.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3337D, 3338D), new Rectangular(3339D, 3340D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3337, 3338));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3339, 3340));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3341D, 3342D), new Rectangular(3343D, 3344D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3341, 3342));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3343, 3344));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3345D, 3346D), new Rectangular(3347D, 3348D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3345, 3346));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3347, 3348));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3349");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3349')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(35, 36, 37, 38), ColorHelper.fromArgb(39, 40, 41, 42)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(36, 37, 38, 35));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(43, 44, 45, 46), ColorHelper.fromArgb(47, 48, 49, 50)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 49, 50, 47));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3366.0, 3367.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(3366.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(3367.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3368.0, 3369.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(3368.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(3369.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3370");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3370')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3379");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3379')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(65, 66, 67, 68), ColorHelper.fromArgb(69, 70, 71, 72)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3388");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3388')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(74, 75, 76, 77), ColorHelper.fromArgb(78, 79, 80, 81)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3397");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3397')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(83, 84, 85, 86), ColorHelper.fromArgb(87, 88, 89, 90)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3406");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3406')).toBeDefined();");
				{
					cesiumlanguagewriter.EllipsoidCesiumWriter w = packet.openEllipsoidProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(92, 93, 94, 95), ColorHelper.fromArgb(96, 97, 98, 99)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualLabel() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3415");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3415')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openFillColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(101, 102, 103, 104), ColorHelper.fromArgb(105, 106, 107, 108)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3424");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3424')).toBeDefined();");
				{
					cesiumlanguagewriter.LabelCesiumWriter w = packet.openLabelProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(110, 111, 112, 113), ColorHelper.fromArgb(114, 115, 116, 117)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualModel() {}

	final private void writeSampledValuesIndividualPath() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3433");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3433')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(119, 120, 121, 122), ColorHelper.fromArgb(123, 124, 125, 126)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3442");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3442')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(129, 130, 131, 128));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(133, 134, 135, 132));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(136, 137, 138, 139), ColorHelper.fromArgb(140, 141, 142, 143)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 138, 139, 136));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3459.0, 3460.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(3459.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(3460.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3461");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3461')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(147, 148, 149, 150), ColorHelper.fromArgb(151, 152, 153, 154)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(148, 149, 150, 147));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(152, 153, 154, 151));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3470");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3470')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(156, 157, 158, 159), ColorHelper.fromArgb(160, 161, 162, 163)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 158, 159, 156));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 162, 163, 160));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3479.0, 3480.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(3479.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(3480.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3481");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3481')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3482D, 3483D), new Rectangular(3484D, 3485D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3482, 3483));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3484, 3485));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(171, 172, 173, 174), ColorHelper.fromArgb(175, 176, 177, 178)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3494");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3494')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(180, 181, 182, 183), ColorHelper.fromArgb(184, 185, 186, 187)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(181, 182, 183, 180));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 186, 187, 184));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3503.0, 3504.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(3503.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(3504.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3505D, 3506D), new Rectangular(3507D, 3508D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3505, 3506));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3507, 3508));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3509D, 3510D), new Rectangular(3511D, 3512D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3509, 3510));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3511, 3512));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3513D, 3514D), new Rectangular(3515D, 3516D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3513, 3514));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3515, 3516));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3517");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3517')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(203, 204, 205, 206), ColorHelper.fromArgb(207, 208, 209, 210)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(211, 212, 213, 214), ColorHelper.fromArgb(215, 216, 217, 218)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(216, 217, 218, 215));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3534.0, 3535.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(3534.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(3535.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3536.0, 3537.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(3536.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(3537.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3538");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3538')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3547");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3547')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(233, 234, 235, 236), ColorHelper.fromArgb(237, 238, 239, 240)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3556");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3556')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(242, 243, 244, 245), ColorHelper.fromArgb(246, 247, 248, 249)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.952941176470588, 0.956862745098039, 0.96078431372549, 0.949019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.972549019607843, 0.976470588235294, 0.964705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3565");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3565')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(251, 252, 253, 254), ColorHelper.fromArgb(0, 1, 2, 3)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.988235294117647, 0.992156862745098, 0.996078431372549, 0.984313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.00784313725490196, 0.0117647058823529, 0), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3574");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3574')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(5, 6, 7, 8), ColorHelper.fromArgb(9, 10, 11, 12)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.0274509803921569, 0.0313725490196078, 0.0196078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.0431372549019608, 0.0470588235294118, 0.0352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3583");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3583')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(14, 15, 16, 17), ColorHelper.fromArgb(18, 19, 20, 21)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.0627450980392157, 0.0666666666666667, 0.0549019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.0784313725490196, 0.0823529411764706, 0.0705882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3592");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3592')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(23, 24, 25, 26), ColorHelper.fromArgb(27, 28, 29, 30)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3601");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3601')).toBeDefined();");
				{
					cesiumlanguagewriter.PathCesiumWriter w = packet.openPathProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(32, 33, 34, 35), ColorHelper.fromArgb(36, 37, 38, 39)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPoint() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3610");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3610')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(41, 42, 43, 44), ColorHelper.fromArgb(45, 46, 47, 48)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3619");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3619')).toBeDefined();");
				{
					cesiumlanguagewriter.PointCesiumWriter w = packet.openPointProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(50, 51, 52, 53), ColorHelper.fromArgb(54, 55, 56, 57)));
								TextWriterHelper.writeLine(m_assertionsWriter,
										"    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPolygon() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3628");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3628')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3637");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3637')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3638D, 3639D), new Rectangular(3640D, 3641D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3638, 3639));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3640, 3641));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(72, 73, 74, 75), ColorHelper.fromArgb(76, 77, 78, 79)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 74, 75, 72));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 78, 79, 76));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3650");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3650')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(81, 82, 83, 84), ColorHelper.fromArgb(85, 86, 87, 88)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(82, 83, 84, 81));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(86, 87, 88, 85));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3659.0, 3660.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(3659.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(3660.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3661D, 3662D), new Rectangular(3663D, 3664D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3661, 3662));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3663, 3664));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3665D, 3666D), new Rectangular(3667D, 3668D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3665, 3666));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3667, 3668));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3669D, 3670D), new Rectangular(3671D, 3672D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3669, 3670));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3671, 3672));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3673");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3673')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(104, 105, 106, 107), ColorHelper.fromArgb(108, 109, 110, 111)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(105, 106, 107, 104));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(112, 113, 114, 115), ColorHelper.fromArgb(116, 117, 118, 119)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(117, 118, 119, 116));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3690.0, 3691.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(3690.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(3691.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3692.0, 3693.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(3692.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(3693.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3694");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3694')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(125, 126, 127, 128), ColorHelper.fromArgb(129, 130, 131, 132)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.494117647058824, 0.498039215686275, 0.501960784313725, 0.490196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.513725490196078, 0.517647058823529, 0.505882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3703");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3703')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(134, 135, 136, 137), ColorHelper.fromArgb(138, 139, 140, 141)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.533333333333333, 0.537254901960784, 0.525490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.549019607843137, 0.552941176470588, 0.541176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3712");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3712')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(143, 144, 145, 146), ColorHelper.fromArgb(147, 148, 149, 150)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3721");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3721')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(152, 153, 154, 155), ColorHelper.fromArgb(156, 157, 158, 159)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3730");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3730')).toBeDefined();");
				{
					cesiumlanguagewriter.PolygonCesiumWriter w = packet.openPolygonProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(161, 162, 163, 164), ColorHelper.fromArgb(165, 166, 167, 168)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualPolyline() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3739");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3739')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(170, 171, 172, 173), ColorHelper.fromArgb(174, 175, 176, 177)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3748");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3748')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 185, 186, 183));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(187, 188, 189, 190), ColorHelper.fromArgb(191, 192, 193, 194)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 189, 190, 187));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOutlineWidthProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3765.0, 3766.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(3765.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(3766.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3767");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3767')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(198, 199, 200, 201), ColorHelper.fromArgb(202, 203, 204, 205)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 200, 201, 198));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 204, 205, 202));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3776");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3776')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(207, 208, 209, 210), ColorHelper.fromArgb(211, 212, 213, 214)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(208, 209, 210, 207));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(212, 213, 214, 211));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openGlowPowerProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3785.0, 3786.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(3785.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(3786.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3787");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3787')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3788D, 3789D), new Rectangular(3790D, 3791D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3788, 3789));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3790, 3791));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(222, 223, 224, 225), ColorHelper.fromArgb(226, 227, 228, 229)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(223, 224, 225, 222));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(227, 228, 229, 226));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3800");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3800')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(231, 232, 233, 234), ColorHelper.fromArgb(235, 236, 237, 238)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(232, 233, 234, 231));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(236, 237, 238, 235));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3809.0, 3810.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(3809.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(3810.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3811D, 3812D), new Rectangular(3813D, 3814D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3811, 3812));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3813, 3814));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3815D, 3816D), new Rectangular(3817D, 3818D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3815, 3816));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3817, 3818));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3819D, 3820D), new Rectangular(3821D, 3822D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3819, 3820));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3821, 3822));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3823");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3823')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(254, 0, 1, 2), ColorHelper.fromArgb(3, 4, 5, 6)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(4, 5, 6, 3));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(7, 8, 9, 10), ColorHelper.fromArgb(11, 12, 13, 14)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 9, 10, 7));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 13, 14, 11));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3840.0, 3841.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(3840.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(3841.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3842.0, 3843.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(3842.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(3843.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3844");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3844')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(20, 21, 22, 23), ColorHelper.fromArgb(24, 25, 26, 27)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0862745098039216, 0.0901960784313725, 0.0784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0980392156862745, 0.101960784313725, 0.105882352941176, 0.0941176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3853");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3853')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineOutlineMaterialCesiumWriter m = w2.openPolylineOutlineProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOutlineColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(29, 30, 31, 32), ColorHelper.fromArgb(33, 34, 35, 36)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.117647058823529, 0.12156862745098, 0.125490196078431, 0.113725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.137254901960784, 0.141176470588235, 0.129411764705882), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3862");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3862')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineArrowMaterialCesiumWriter m = w2.openPolylineArrowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(38, 39, 40, 41), ColorHelper.fromArgb(42, 43, 44, 45)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.152941176470588, 0.156862745098039, 0.16078431372549, 0.149019607843137), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.168627450980392, 0.172549019607843, 0.176470588235294, 0.164705882352941), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3871");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3871')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.PolylineGlowMaterialCesiumWriter m = w2.openPolylineGlowProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(47, 48, 49, 50), ColorHelper.fromArgb(51, 52, 53, 54)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.192156862745098, 0.196078431372549, 0.184313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.203921568627451, 0.207843137254902, 0.211764705882353, 0.2), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3880");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3880')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.227450980392157, 0.231372549019608, 0.219607843137255), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.243137254901961, 0.247058823529412, 0.235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3889");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3889')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(65, 66, 67, 68), ColorHelper.fromArgb(69, 70, 71, 72)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.258823529411765, 0.262745098039216, 0.266666666666667, 0.254901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.27843137254902, 0.282352941176471, 0.270588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3898");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3898')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(74, 75, 76, 77), ColorHelper.fromArgb(78, 79, 80, 81)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.298039215686275, 0.301960784313725, 0.290196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.313725490196078, 0.317647058823529, 0.305882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3907");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3907')).toBeDefined();");
				{
					cesiumlanguagewriter.PolylineCesiumWriter w = packet.openPolylineProperty();
					try {
						{
							cesiumlanguagewriter.PolylineMaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(83, 84, 85, 86), ColorHelper.fromArgb(87, 88, 89, 90)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.333333333333333, 0.337254901960784, 0.325490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.345098039215686, 0.349019607843137, 0.352941176470588, 0.341176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualRectangle() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled3916");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled3916')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.RectangleCoordinatesCesiumWriter w2 = w.openCoordinatesProperty();
							try {
								w2.writeWsenDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<CartographicExtent> createList(new CartographicExtent(2D, 3D, 4D, 5D), new CartographicExtent(6D, 7D, 8D, 9D)));
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(2, 3, 4, 5));");
								TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(6, 7, 8, 9));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3925");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3925')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(101, 102, 103, 104), ColorHelper.fromArgb(105, 106, 107, 108)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3934");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3934')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3935D, 3936D), new Rectangular(3937D, 3938D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3935, 3936));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(3937, 3938));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(114, 115, 116, 117), ColorHelper.fromArgb(118, 119, 120, 121)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(115, 116, 117, 114));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(119, 120, 121, 118));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3947");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3947')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(123, 124, 125, 126), ColorHelper.fromArgb(127, 128, 129, 130)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(124, 125, 126, 123));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(128, 129, 130, 127));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3956.0, 3957.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(3956.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(3957.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3958D, 3959D), new Rectangular(3960D, 3961D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3958, 3959));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(3960, 3961));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3962D, 3963D), new Rectangular(3964D, 3965D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3962, 3963));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(3964, 3965));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(3966D, 3967D), new Rectangular(3968D, 3969D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3966, 3967));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(3968, 3969));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3970");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3970')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(146, 147, 148, 149), ColorHelper.fromArgb(150, 151, 152, 153)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 148, 149, 146));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(154, 155, 156, 157), ColorHelper.fromArgb(158, 159, 160, 161)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3987.0, 3988.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(3987.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(3988.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(3989.0, 3990.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(3989.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(3990.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial3991");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial3991')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(167, 168, 169, 170), ColorHelper.fromArgb(171, 172, 173, 174)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.662745098039216, 0.666666666666667, 0.654901960784314), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.67843137254902, 0.682352941176471, 0.670588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4000");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4000')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(176, 177, 178, 179), ColorHelper.fromArgb(180, 181, 182, 183)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.694117647058824, 0.698039215686274, 0.701960784313725, 0.690196078431373), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.709803921568627, 0.713725490196078, 0.717647058823529, 0.705882352941177), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4009");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4009')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(185, 186, 187, 188), ColorHelper.fromArgb(189, 190, 191, 192)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.729411764705882, 0.733333333333333, 0.737254901960784, 0.725490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.745098039215686, 0.749019607843137, 0.752941176470588, 0.741176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4018");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4018')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(194, 195, 196, 197), ColorHelper.fromArgb(198, 199, 200, 201)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4027");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4027')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangleCesiumWriter w = packet.openRectangleProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(203, 204, 205, 206), ColorHelper.fromArgb(207, 208, 209, 210)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualWall() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4036");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4036')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(212, 213, 214, 215), ColorHelper.fromArgb(216, 217, 218, 219)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4045");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4045')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4046D, 4047D), new Rectangular(4048D, 4049D)));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4046, 4047));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4048, 4049));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(225, 226, 227, 228), ColorHelper.fromArgb(229, 230, 231, 232)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(226, 227, 228, 225));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(230, 231, 232, 229));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4058");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4058')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(234, 235, 236, 237), ColorHelper.fromArgb(238, 239, 240, 241)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(235, 236, 237, 234));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 240, 241, 238));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4067.0, 4068.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(4067.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(4068.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4069D, 4070D), new Rectangular(4071D, 4072D)));
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4069, 4070));");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4071, 4072));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4073D, 4074D), new Rectangular(4075D, 4076D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4073, 4074));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4075, 4076));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4077D, 4078D), new Rectangular(4079D, 4080D)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4077, 4078));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4079, 4080));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4081");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4081')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(2, 3, 4, 5), ColorHelper.fromArgb(6, 7, 8, 9)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 4, 5, 2));");
												TextWriterHelper
														.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(10, 11, 12, 13), ColorHelper.fromArgb(14, 15, 16, 17)));
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
												TextWriterHelper.writeLine(m_assertionsWriter,
														"    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(15, 16, 17, 14));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4098.0, 4099.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(4098.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(4099.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4100.0, 4101.0));
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(4100.0);");
												TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(4101.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4102");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4102')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(23, 24, 25, 26), ColorHelper.fromArgb(27, 28, 29, 30)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0980392156862745, 0.101960784313725, 0.0901960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.113725490196078, 0.117647058823529, 0.105882352941176), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4111");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4111')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(32, 33, 34, 35), ColorHelper.fromArgb(36, 37, 38, 39)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.129411764705882, 0.133333333333333, 0.137254901960784, 0.125490196078431), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.149019607843137, 0.152941176470588, 0.141176470588235), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4120");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4120')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(41, 42, 43, 44), ColorHelper.fromArgb(45, 46, 47, 48)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4129");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4129')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(50, 51, 52, 53), ColorHelper.fromArgb(54, 55, 56, 57)));
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_assertionsWriter,
																"    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4138");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4138')).toBeDefined();");
				{
					cesiumlanguagewriter.WallCesiumWriter w = packet.openWallProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
								TextWriterHelper
										.writeLine(m_assertionsWriter,
												"    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualConicSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4147");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4147')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4156");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4156')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(77, 78, 79, 80), ColorHelper.fromArgb(81, 82, 83, 84)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4165");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4165')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4166D, 4167D), new Rectangular(4168D, 4169D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4166, 4167));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4168, 4169));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(90, 91, 92, 93), ColorHelper.fromArgb(94, 95, 96, 97)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(91, 92, 93, 90));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(95, 96, 97, 94));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4178");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4178')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(99, 100, 101, 102), ColorHelper.fromArgb(103, 104, 105, 106)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(100, 101, 102, 99));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(104, 105, 106, 103));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4187.0, 4188.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4187.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4188.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4189D, 4190D), new Rectangular(4191D, 4192D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4189, 4190));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4191, 4192));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4193D, 4194D), new Rectangular(4195D, 4196D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4193, 4194));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4195, 4196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4197D, 4198D), new Rectangular(4199D, 4200D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4197, 4198));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4199, 4200));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4201");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4201')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(122, 123, 124, 125), ColorHelper.fromArgb(126, 127, 128, 129)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(123, 124, 125, 122));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(130, 131, 132, 133), ColorHelper.fromArgb(134, 135, 136, 137)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(135, 136, 137, 134));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4218.0, 4219.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4218.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4219.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4220.0, 4221.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4220.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4221.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4222");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4222')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(143, 144, 145, 146), ColorHelper.fromArgb(147, 148, 149, 150)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.568627450980392, 0.572549019607843, 0.56078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.580392156862745, 0.584313725490196, 0.588235294117647, 0.576470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4231");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4231')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(152, 153, 154, 155), ColorHelper.fromArgb(156, 157, 158, 159)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.603921568627451, 0.607843137254902, 0.596078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.615686274509804, 0.619607843137255, 0.623529411764706, 0.611764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4240");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4240')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(161, 162, 163, 164), ColorHelper.fromArgb(165, 166, 167, 168)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4249");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4249')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(170, 171, 172, 173), ColorHelper.fromArgb(174, 175, 176, 177)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4258");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4258')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4267");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4267')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4268D, 4269D), new Rectangular(4270D, 4271D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4268, 4269));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4270, 4271));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(192, 193, 194, 195), ColorHelper.fromArgb(196, 197, 198, 199)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(193, 194, 195, 192));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(197, 198, 199, 196));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4280");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4280')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(201, 202, 203, 204), ColorHelper.fromArgb(205, 206, 207, 208)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(202, 203, 204, 201));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 207, 208, 205));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4289.0, 4290.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4289.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4290.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4291D, 4292D), new Rectangular(4293D, 4294D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4291, 4292));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4293, 4294));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4295D, 4296D), new Rectangular(4297D, 4298D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4295, 4296));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4297, 4298));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4299D, 4300D), new Rectangular(4301D, 4302D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4299, 4300));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4301, 4302));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4303");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4303')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 226, 227, 224));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(232, 233, 234, 235), ColorHelper.fromArgb(236, 237, 238, 239)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(237, 238, 239, 236));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4320.0, 4321.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4320.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4321.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4322.0, 4323.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4322.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4323.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4324");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4324')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(245, 246, 247, 248), ColorHelper.fromArgb(249, 250, 251, 252)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.964705882352941, 0.968627450980392, 0.972549019607843, 0.96078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.980392156862745, 0.984313725490196, 0.988235294117647, 0.976470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4333");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4333')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(254, 0, 1, 2), ColorHelper.fromArgb(3, 4, 5, 6)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0, 0.00392156862745098, 0.00784313725490196, 0.996078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.0196078431372549, 0.0235294117647059, 0.0117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4342");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4342')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(8, 9, 10, 11), ColorHelper.fromArgb(12, 13, 14, 15)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4351");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4351')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(17, 18, 19, 20), ColorHelper.fromArgb(21, 22, 23, 24)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4360");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4360')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4369");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4369')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4370D, 4371D), new Rectangular(4372D, 4373D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4370, 4371));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4372, 4373));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(39, 40, 41, 42), ColorHelper.fromArgb(43, 44, 45, 46)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(40, 41, 42, 39));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 45, 46, 43));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4382");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4382')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(48, 49, 50, 51), ColorHelper.fromArgb(52, 53, 54, 55)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 50, 51, 48));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 54, 55, 52));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4391.0, 4392.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4391.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4392.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4393D, 4394D), new Rectangular(4395D, 4396D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4393, 4394));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4395, 4396));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4397D, 4398D), new Rectangular(4399D, 4400D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4397, 4398));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4399, 4400));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4401D, 4402D), new Rectangular(4403D, 4404D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4401, 4402));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4403, 4404));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4405");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4405')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(71, 72, 73, 74), ColorHelper.fromArgb(75, 76, 77, 78)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(72, 73, 74, 71));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(79, 80, 81, 82), ColorHelper.fromArgb(83, 84, 85, 86)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 85, 86, 83));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4422.0, 4423.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4422.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4423.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4424.0, 4425.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4424.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4425.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4426");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4426')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(92, 93, 94, 95), ColorHelper.fromArgb(96, 97, 98, 99)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.364705882352941, 0.368627450980392, 0.372549019607843, 0.36078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.380392156862745, 0.384313725490196, 0.388235294117647, 0.376470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4435");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4435')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(101, 102, 103, 104), ColorHelper.fromArgb(105, 106, 107, 108)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.4, 0.403921568627451, 0.407843137254902, 0.396078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.419607843137255, 0.423529411764706, 0.411764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4444");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4444')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(110, 111, 112, 113), ColorHelper.fromArgb(114, 115, 116, 117)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4453");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4453')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(119, 120, 121, 122), ColorHelper.fromArgb(123, 124, 125, 126)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4462");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4462')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4471");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4471')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4472D, 4473D), new Rectangular(4474D, 4475D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4472, 4473));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4474, 4475));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(141, 142, 143, 144), ColorHelper.fromArgb(145, 146, 147, 148)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(142, 143, 144, 141));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(146, 147, 148, 145));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4484");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4484')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(150, 151, 152, 153), ColorHelper.fromArgb(154, 155, 156, 157)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(151, 152, 153, 150));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(155, 156, 157, 154));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4493.0, 4494.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4493.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4494.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4495D, 4496D), new Rectangular(4497D, 4498D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4495, 4496));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4497, 4498));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4499D, 4500D), new Rectangular(4501D, 4502D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4499, 4500));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4501, 4502));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4503D, 4504D), new Rectangular(4505D, 4506D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4503, 4504));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4505, 4506));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4507");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4507')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(173, 174, 175, 176), ColorHelper.fromArgb(177, 178, 179, 180)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 175, 176, 173));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(181, 182, 183, 184), ColorHelper.fromArgb(185, 186, 187, 188)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 187, 188, 185));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4524.0, 4525.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4524.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4525.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4526.0, 4527.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4526.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4527.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4528");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4528')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(194, 195, 196, 197), ColorHelper.fromArgb(198, 199, 200, 201)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.768627450980392, 0.772549019607843, 0.76078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.784313725490196, 0.788235294117647, 0.776470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4537");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4537')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(203, 204, 205, 206), ColorHelper.fromArgb(207, 208, 209, 210)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.8, 0.803921568627451, 0.807843137254902, 0.796078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.819607843137255, 0.823529411764706, 0.811764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4546");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4546')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(212, 213, 214, 215), ColorHelper.fromArgb(216, 217, 218, 219)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4555");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4555')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(221, 222, 223, 224), ColorHelper.fromArgb(225, 226, 227, 228)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4564");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4564')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(230, 231, 232, 233), ColorHelper.fromArgb(234, 235, 236, 237)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4573");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4573')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4574D, 4575D), new Rectangular(4576D, 4577D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4574, 4575));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4576, 4577));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(243, 244, 245, 246), ColorHelper.fromArgb(247, 248, 249, 250)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(244, 245, 246, 243));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(248, 249, 250, 247));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4586");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4586')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(252, 253, 254, 0), ColorHelper.fromArgb(1, 2, 3, 4)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 254, 0, 252));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(2, 3, 4, 1));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4595.0, 4596.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4595.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4596.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4597D, 4598D), new Rectangular(4599D, 4600D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4597, 4598));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4599, 4600));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4601D, 4602D), new Rectangular(4603D, 4604D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4601, 4602));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4603, 4604));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4605D, 4606D), new Rectangular(4607D, 4608D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4605, 4606));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4607, 4608));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4609");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4609')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(20, 21, 22, 23), ColorHelper.fromArgb(24, 25, 26, 27)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 22, 23, 20));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(28, 29, 30, 31), ColorHelper.fromArgb(32, 33, 34, 35)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(33, 34, 35, 32));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4626.0, 4627.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(4626.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(4627.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4628.0, 4629.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(4628.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(4629.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4630");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4630')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(41, 42, 43, 44), ColorHelper.fromArgb(45, 46, 47, 48)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.164705882352941, 0.168627450980392, 0.172549019607843, 0.16078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.184313725490196, 0.188235294117647, 0.176470588235294), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4639");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4639')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(50, 51, 52, 53), ColorHelper.fromArgb(54, 55, 56, 57)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.203921568627451, 0.207843137254902, 0.196078431372549), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.219607843137255, 0.223529411764706, 0.211764705882353), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4648");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4648')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4657");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4657')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4666");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4666')).toBeDefined();");
				{
					cesiumlanguagewriter.ConicSensorCesiumWriter w = packet.openConicSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(77, 78, 79, 80), ColorHelper.fromArgb(81, 82, 83, 84)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualCustomPatternSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled4675");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled4675')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(86, 87, 88, 89), ColorHelper.fromArgb(90, 91, 92, 93)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4684");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4684')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(95, 96, 97, 98), ColorHelper.fromArgb(99, 100, 101, 102)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4693");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4693')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4694D, 4695D), new Rectangular(4696D, 4697D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4694, 4695));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4696, 4697));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(108, 109, 110, 111), ColorHelper.fromArgb(112, 113, 114, 115)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 110, 111, 108));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 114, 115, 112));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4706");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4706')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(117, 118, 119, 120), ColorHelper.fromArgb(121, 122, 123, 124)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(118, 119, 120, 117));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(122, 123, 124, 121));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4715.0, 4716.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4715.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4716.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4717D, 4718D), new Rectangular(4719D, 4720D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4717, 4718));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4719, 4720));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4721D, 4722D), new Rectangular(4723D, 4724D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4721, 4722));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4723, 4724));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4725D, 4726D), new Rectangular(4727D, 4728D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4725, 4726));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4727, 4728));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4729");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4729')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(140, 141, 142, 143), ColorHelper.fromArgb(144, 145, 146, 147)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(141, 142, 143, 140));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(148, 149, 150, 151), ColorHelper.fromArgb(152, 153, 154, 155)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(153, 154, 155, 152));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4746.0, 4747.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4746.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4747.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4748.0, 4749.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4748.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4749.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4750");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4750')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(161, 162, 163, 164), ColorHelper.fromArgb(165, 166, 167, 168)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.635294117647059, 0.63921568627451, 0.643137254901961, 0.631372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.654901960784314, 0.658823529411765, 0.647058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4759");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4759')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(170, 171, 172, 173), ColorHelper.fromArgb(174, 175, 176, 177)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.674509803921569, 0.67843137254902, 0.666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.686274509803922, 0.690196078431373, 0.694117647058824, 0.682352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4768");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4768')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4777");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4777')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(188, 189, 190, 191), ColorHelper.fromArgb(192, 193, 194, 195)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4786");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4786')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(197, 198, 199, 200), ColorHelper.fromArgb(201, 202, 203, 204)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4795");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4795')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4796D, 4797D), new Rectangular(4798D, 4799D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4796, 4797));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4798, 4799));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(210, 211, 212, 213), ColorHelper.fromArgb(214, 215, 216, 217)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(211, 212, 213, 210));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(215, 216, 217, 214));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4808");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4808')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(219, 220, 221, 222), ColorHelper.fromArgb(223, 224, 225, 226)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 221, 222, 219));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 225, 226, 223));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4817.0, 4818.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4817.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4818.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4819D, 4820D), new Rectangular(4821D, 4822D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4819, 4820));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4821, 4822));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4823D, 4824D), new Rectangular(4825D, 4826D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4823, 4824));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4825, 4826));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4827D, 4828D), new Rectangular(4829D, 4830D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4827, 4828));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4829, 4830));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4831");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4831')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(242, 243, 244, 245), ColorHelper.fromArgb(246, 247, 248, 249)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 244, 245, 242));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(247, 248, 249, 246));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(250, 251, 252, 253), ColorHelper.fromArgb(254, 0, 1, 2)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(251, 252, 253, 250));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(0, 1, 2, 254));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4848.0, 4849.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4848.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4849.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4850.0, 4851.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4850.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4851.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4852");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4852')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(8, 9, 10, 11), ColorHelper.fromArgb(12, 13, 14, 15)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0352941176470588, 0.0392156862745098, 0.0431372549019608, 0.0313725490196078), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.0549019607843137, 0.0588235294117647, 0.0470588235294118), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4861");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4861')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(17, 18, 19, 20), ColorHelper.fromArgb(21, 22, 23, 24)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0705882352941176, 0.0745098039215686, 0.0784313725490196, 0.0666666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0862745098039216, 0.0901960784313725, 0.0941176470588235, 0.0823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4870");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4870')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4879");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4879')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(35, 36, 37, 38), ColorHelper.fromArgb(39, 40, 41, 42)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4888");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4888')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(44, 45, 46, 47), ColorHelper.fromArgb(48, 49, 50, 51)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4897");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4897')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4898D, 4899D), new Rectangular(4900D, 4901D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(4898, 4899));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4900, 4901));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(57, 58, 59, 60), ColorHelper.fromArgb(61, 62, 63, 64)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(58, 59, 60, 57));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(62, 63, 64, 61));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4910");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4910')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(66, 67, 68, 69), ColorHelper.fromArgb(70, 71, 72, 73)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(67, 68, 69, 66));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(71, 72, 73, 70));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4919.0, 4920.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(4919.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4920.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4921D, 4922D), new Rectangular(4923D, 4924D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(4921, 4922));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(4923, 4924));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4925D, 4926D), new Rectangular(4927D, 4928D)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(4925, 4926));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(4927, 4928));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(4929D, 4930D), new Rectangular(4931D, 4932D)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4929, 4930));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(4931, 4932));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4933");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4933')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(89, 90, 91, 92), ColorHelper.fromArgb(93, 94, 95, 96)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(90, 91, 92, 89));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(94, 95, 96, 93));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(97, 98, 99, 100), ColorHelper.fromArgb(101, 102, 103, 104)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(98, 99, 100, 97));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(102, 103, 104, 101));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4950.0, 4951.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(4950.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4951.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(4952.0, 4953.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(4952.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(4953.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4954");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4954')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(110, 111, 112, 113), ColorHelper.fromArgb(114, 115, 116, 117)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.43921568627451, 0.443137254901961, 0.431372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.450980392156863, 0.454901960784314, 0.458823529411765, 0.447058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4963");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4963')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(119, 120, 121, 122), ColorHelper.fromArgb(123, 124, 125, 126)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.474509803921569, 0.47843137254902, 0.466666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.486274509803922, 0.490196078431373, 0.494117647058824, 0.482352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4972");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4972')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4981");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4981')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(137, 138, 139, 140), ColorHelper.fromArgb(141, 142, 143, 144)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4990");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4990')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(146, 147, 148, 149), ColorHelper.fromArgb(150, 151, 152, 153)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial4999");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial4999')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5000D, 5001D), new Rectangular(5002D, 5003D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5000, 5001));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5002, 5003));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(159, 160, 161, 162), ColorHelper.fromArgb(163, 164, 165, 166)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(160, 161, 162, 159));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 165, 166, 163));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5012");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5012')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(168, 169, 170, 171), ColorHelper.fromArgb(172, 173, 174, 175)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(169, 170, 171, 168));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(173, 174, 175, 172));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5021.0, 5022.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5021.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5022.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5023D, 5024D), new Rectangular(5025D, 5026D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5023, 5024));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5025, 5026));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5027D, 5028D), new Rectangular(5029D, 5030D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5027, 5028));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5029, 5030));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5031D, 5032D), new Rectangular(5033D, 5034D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5031, 5032));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5033, 5034));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5035");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5035')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(191, 192, 193, 194), ColorHelper.fromArgb(195, 196, 197, 198)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(192, 193, 194, 191));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(196, 197, 198, 195));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(199, 200, 201, 202), ColorHelper.fromArgb(203, 204, 205, 206)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 201, 202, 199));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 205, 206, 203));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5052.0, 5053.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5052.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5053.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5054.0, 5055.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5054.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5055.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5056");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5056')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(212, 213, 214, 215), ColorHelper.fromArgb(216, 217, 218, 219)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.83921568627451, 0.843137254901961, 0.831372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.854901960784314, 0.858823529411765, 0.847058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5065");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5065')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(221, 222, 223, 224), ColorHelper.fromArgb(225, 226, 227, 228)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.870588235294118, 0.874509803921569, 0.87843137254902, 0.866666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.886274509803922, 0.890196078431373, 0.894117647058824, 0.882352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5074");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5074')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(230, 231, 232, 233), ColorHelper.fromArgb(234, 235, 236, 237)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5083");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5083')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(239, 240, 241, 242), ColorHelper.fromArgb(243, 244, 245, 246)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5092");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5092')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(248, 249, 250, 251), ColorHelper.fromArgb(252, 253, 254, 0)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5101");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5101')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5102D, 5103D), new Rectangular(5104D, 5105D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5102, 5103));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5104, 5105));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(6, 7, 8, 9), ColorHelper.fromArgb(10, 11, 12, 13)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 8, 9, 6));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(11, 12, 13, 10));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5114");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5114')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(15, 16, 17, 18), ColorHelper.fromArgb(19, 20, 21, 22)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 17, 18, 15));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 21, 22, 19));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5123.0, 5124.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5123.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5124.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5125D, 5126D), new Rectangular(5127D, 5128D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5125, 5126));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5127, 5128));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5129D, 5130D), new Rectangular(5131D, 5132D)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5129, 5130));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5131, 5132));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5133D, 5134D), new Rectangular(5135D, 5136D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5133, 5134));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5135, 5136));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5137");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5137')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(38, 39, 40, 41), ColorHelper.fromArgb(42, 43, 44, 45)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(39, 40, 41, 38));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(43, 44, 45, 42));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(46, 47, 48, 49), ColorHelper.fromArgb(50, 51, 52, 53)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 48, 49, 46));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(51, 52, 53, 50));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5154.0, 5155.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5154.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5155.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5156.0, 5157.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5156.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5157.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5158");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5158')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(59, 60, 61, 62), ColorHelper.fromArgb(63, 64, 65, 66)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.235294117647059, 0.23921568627451, 0.243137254901961, 0.231372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.254901960784314, 0.258823529411765, 0.247058823529412), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5167");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5167')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(68, 69, 70, 71), ColorHelper.fromArgb(72, 73, 74, 75)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.274509803921569, 0.27843137254902, 0.266666666666667), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.286274509803922, 0.290196078431373, 0.294117647058824, 0.282352941176471), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5176");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5176')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(77, 78, 79, 80), ColorHelper.fromArgb(81, 82, 83, 84)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5185");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5185')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(86, 87, 88, 89), ColorHelper.fromArgb(90, 91, 92, 93)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5194");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5194')).toBeDefined();");
				{
					cesiumlanguagewriter.CustomPatternSensorCesiumWriter w = packet.openCustomPatternSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(95, 96, 97, 98), ColorHelper.fromArgb(99, 100, 101, 102)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualRectangularSensor() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5203");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5203')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(104, 105, 106, 107), ColorHelper.fromArgb(108, 109, 110, 111)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5212");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5212')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(113, 114, 115, 116), ColorHelper.fromArgb(117, 118, 119, 120)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5221");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5221')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5222D, 5223D), new Rectangular(5224D, 5225D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5222, 5223));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5224, 5225));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(126, 127, 128, 129), ColorHelper.fromArgb(130, 131, 132, 133)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 128, 129, 126));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 132, 133, 130));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5234");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5234')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(135, 136, 137, 138), ColorHelper.fromArgb(139, 140, 141, 142)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5243.0, 5244.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5243.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5244.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5245D, 5246D), new Rectangular(5247D, 5248D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5245, 5246));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5247, 5248));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5249D, 5250D), new Rectangular(5251D, 5252D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5249, 5250));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5251, 5252));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5253D, 5254D), new Rectangular(5255D, 5256D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5253, 5254));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5255, 5256));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5257");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5257')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(158, 159, 160, 161), ColorHelper.fromArgb(162, 163, 164, 165)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(159, 160, 161, 158));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 164, 165, 162));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(166, 167, 168, 169), ColorHelper.fromArgb(170, 171, 172, 173)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(167, 168, 169, 166));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(171, 172, 173, 170));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5274.0, 5275.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5274.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5275.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5276.0, 5277.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5276.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5277.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5278");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5278')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(179, 180, 181, 182), ColorHelper.fromArgb(183, 184, 185, 186)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.709803921568627, 0.713725490196078, 0.701960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.725490196078431, 0.729411764705882, 0.717647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5287");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5287')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(188, 189, 190, 191), ColorHelper.fromArgb(192, 193, 194, 195)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5296");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5296')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(197, 198, 199, 200), ColorHelper.fromArgb(201, 202, 203, 204)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5305");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5305')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openLateralSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(206, 207, 208, 209), ColorHelper.fromArgb(210, 211, 212, 213)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5314");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5314')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(215, 216, 217, 218), ColorHelper.fromArgb(219, 220, 221, 222)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5323");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5323')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5324D, 5325D), new Rectangular(5326D, 5327D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5324, 5325));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5326, 5327));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(228, 229, 230, 231), ColorHelper.fromArgb(232, 233, 234, 235)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(229, 230, 231, 228));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(233, 234, 235, 232));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5336");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5336')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(237, 238, 239, 240), ColorHelper.fromArgb(241, 242, 243, 244)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(238, 239, 240, 237));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(242, 243, 244, 241));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5345.0, 5346.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5345.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5346.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5347D, 5348D), new Rectangular(5349D, 5350D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5347, 5348));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5349, 5350));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5351D, 5352D), new Rectangular(5353D, 5354D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5351, 5352));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5353, 5354));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5355D, 5356D), new Rectangular(5357D, 5358D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5355, 5356));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5357, 5358));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5359");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5359')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(5, 6, 7, 8), ColorHelper.fromArgb(9, 10, 11, 12)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(6, 7, 8, 5));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(10, 11, 12, 9));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(13, 14, 15, 16), ColorHelper.fromArgb(17, 18, 19, 20)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(14, 15, 16, 13));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(18, 19, 20, 17));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5376.0, 5377.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5376.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5377.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5378.0, 5379.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5378.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5379.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5380");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5380')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(26, 27, 28, 29), ColorHelper.fromArgb(30, 31, 32, 33)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.105882352941176, 0.109803921568627, 0.113725490196078, 0.101960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.125490196078431, 0.129411764705882, 0.117647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5389");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5389')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(35, 36, 37, 38), ColorHelper.fromArgb(39, 40, 41, 42)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.145098039215686, 0.149019607843137, 0.137254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.16078431372549, 0.164705882352941, 0.152941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5398");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5398')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(44, 45, 46, 47), ColorHelper.fromArgb(48, 49, 50, 51)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.180392156862745, 0.184313725490196, 0.172549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.196078431372549, 0.2, 0.188235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5407");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5407')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(53, 54, 55, 56), ColorHelper.fromArgb(57, 58, 59, 60)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.211764705882353, 0.215686274509804, 0.219607843137255, 0.207843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.227450980392157, 0.231372549019608, 0.235294117647059, 0.223529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5416");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5416')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(62, 63, 64, 65), ColorHelper.fromArgb(66, 67, 68, 69)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.247058823529412, 0.250980392156863, 0.254901960784314, 0.243137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.262745098039216, 0.266666666666667, 0.270588235294118, 0.258823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5425");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5425')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5426D, 5427D), new Rectangular(5428D, 5429D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5426, 5427));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5428, 5429));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(75, 76, 77, 78), ColorHelper.fromArgb(79, 80, 81, 82)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(76, 77, 78, 75));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(80, 81, 82, 79));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5438");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5438')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(84, 85, 86, 87), ColorHelper.fromArgb(88, 89, 90, 91)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 86, 87, 84));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(89, 90, 91, 88));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5447.0, 5448.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5447.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5448.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5449D, 5450D), new Rectangular(5451D, 5452D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5449, 5450));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5451, 5452));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5453D, 5454D), new Rectangular(5455D, 5456D)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5453, 5454));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5455, 5456));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5457D, 5458D), new Rectangular(5459D, 5460D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5457, 5458));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5459, 5460));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5461");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5461')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(107, 108, 109, 110), ColorHelper.fromArgb(111, 112, 113, 114)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(108, 109, 110, 107));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(112, 113, 114, 111));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(115, 116, 117, 118), ColorHelper.fromArgb(119, 120, 121, 122)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(116, 117, 118, 115));");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(120, 121, 122, 119));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5478.0, 5479.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5478.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5479.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5480.0, 5481.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5480.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5481.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5482");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5482')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(128, 129, 130, 131), ColorHelper.fromArgb(132, 133, 134, 135)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.505882352941176, 0.509803921568627, 0.513725490196078, 0.501960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.525490196078431, 0.529411764705882, 0.517647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5491");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5491')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(137, 138, 139, 140), ColorHelper.fromArgb(141, 142, 143, 144)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.541176470588235, 0.545098039215686, 0.549019607843137, 0.537254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.56078431372549, 0.564705882352941, 0.552941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5500");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5500')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(146, 147, 148, 149), ColorHelper.fromArgb(150, 151, 152, 153)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.576470588235294, 0.580392156862745, 0.584313725490196, 0.572549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.596078431372549, 0.6, 0.588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5509");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5509')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEllipsoidHorizonSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(155, 156, 157, 158), ColorHelper.fromArgb(159, 160, 161, 162)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.615686274509804, 0.619607843137255, 0.607843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.627450980392157, 0.631372549019608, 0.635294117647059, 0.623529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5518");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5518')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(164, 165, 166, 167), ColorHelper.fromArgb(168, 169, 170, 171)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.650980392156863, 0.654901960784314, 0.643137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.662745098039216, 0.666666666666667, 0.670588235294118, 0.658823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5527");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5527')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5528D, 5529D), new Rectangular(5530D, 5531D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5528, 5529));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5530, 5531));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(177, 178, 179, 180), ColorHelper.fromArgb(181, 182, 183, 184)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(178, 179, 180, 177));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(182, 183, 184, 181));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5540");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5540')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(186, 187, 188, 189), ColorHelper.fromArgb(190, 191, 192, 193)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(187, 188, 189, 186));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(191, 192, 193, 190));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5549.0, 5550.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5549.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5550.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5551D, 5552D), new Rectangular(5553D, 5554D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5551, 5552));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5553, 5554));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5555D, 5556D), new Rectangular(5557D, 5558D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5555, 5556));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5557, 5558));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5559D, 5560D), new Rectangular(5561D, 5562D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5559, 5560));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5561, 5562));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5563");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5563')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(209, 210, 211, 212), ColorHelper.fromArgb(213, 214, 215, 216)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(210, 211, 212, 209));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 215, 216, 213));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(217, 218, 219, 220), ColorHelper.fromArgb(221, 222, 223, 224)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(218, 219, 220, 217));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(222, 223, 224, 221));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5580.0, 5581.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(5580.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(5581.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5582.0, 5583.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5582.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(5583.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5584");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5584')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(230, 231, 232, 233), ColorHelper.fromArgb(234, 235, 236, 237)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.905882352941176, 0.909803921568627, 0.913725490196078, 0.901960784313726), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.92156862745098, 0.925490196078431, 0.929411764705882, 0.917647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5593");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5593')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(239, 240, 241, 242), ColorHelper.fromArgb(243, 244, 245, 246)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.941176470588235, 0.945098039215686, 0.949019607843137, 0.937254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.956862745098039, 0.96078431372549, 0.964705882352941, 0.952941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5602");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5602')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(248, 249, 250, 251), ColorHelper.fromArgb(252, 253, 254, 0)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.980392156862745, 0.984313725490196, 0.972549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.996078431372549, 0, 0.988235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5611");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5611')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openDomeSurfaceMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(2, 3, 4, 5), ColorHelper.fromArgb(6, 7, 8, 9)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.0156862745098039, 0.0196078431372549, 0.00784313725490196), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.0313725490196078, 0.0352941176470588, 0.0235294117647059), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5620");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5620')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(11, 12, 13, 14), ColorHelper.fromArgb(15, 16, 17, 18)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.0509803921568627, 0.0549019607843137, 0.0431372549019608), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0627450980392157, 0.0666666666666667, 0.0705882352941176, 0.0588235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5629");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5629')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5630D, 5631D), new Rectangular(5632D, 5633D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5630, 5631));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5632, 5633));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(24, 25, 26, 27), ColorHelper.fromArgb(28, 29, 30, 31)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 26, 27, 24));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 30, 31, 28));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5642");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5642')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(33, 34, 35, 36), ColorHelper.fromArgb(37, 38, 39, 40)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(34, 35, 36, 33));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(38, 39, 40, 37));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5651.0, 5652.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(5651.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5652.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5653D, 5654D), new Rectangular(5655D, 5656D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5653, 5654));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5655, 5656));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5657D, 5658D), new Rectangular(5659D, 5660D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5657, 5658));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5659, 5660));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5661D, 5662D), new Rectangular(5663D, 5664D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5661, 5662));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5663, 5664));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5665");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5665')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(56, 57, 58, 59), ColorHelper.fromArgb(60, 61, 62, 63)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 58, 59, 56));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(61, 62, 63, 60));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(64, 65, 66, 67), ColorHelper.fromArgb(68, 69, 70, 71)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 66, 67, 64));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(69, 70, 71, 68));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5682.0, 5683.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(5682.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(5683.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5684.0, 5685.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(5684.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(5685.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5686");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5686')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(77, 78, 79, 80), ColorHelper.fromArgb(81, 82, 83, 84)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.309803921568627, 0.313725490196078, 0.301960784313725), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.32156862745098, 0.325490196078431, 0.329411764705882, 0.317647058823529), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5695");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5695')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(86, 87, 88, 89), ColorHelper.fromArgb(90, 91, 92, 93)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.345098039215686, 0.349019607843137, 0.337254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.36078431372549, 0.364705882352941, 0.352941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5704");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5704')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(95, 96, 97, 98), ColorHelper.fromArgb(99, 100, 101, 102)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.380392156862745, 0.384313725490196, 0.372549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.396078431372549, 0.4, 0.388235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5713");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5713')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openEnvironmentOcclusionMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(104, 105, 106, 107), ColorHelper.fromArgb(108, 109, 110, 111)));
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.415686274509804, 0.419607843137255, 0.407843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(
																m_extensionsAssertionsWriter,
																"    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.431372549019608, 0.435294117647059, 0.423529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5722");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5722')).toBeDefined();");
				{
					cesiumlanguagewriter.RectangularSensorCesiumWriter w = packet.openRectangularSensorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openEnvironmentIntersectionColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(113, 114, 115, 116), ColorHelper.fromArgb(117, 118, 119, 120)));
								TextWriterHelper
										.writeLine(
												m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.447058823529412, 0.450980392156863, 0.454901960784314, 0.443137254901961), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.466666666666667, 0.470588235294118, 0.458823529411765), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualFan() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5731");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5731')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.SolidColorMaterialCesiumWriter m = w2.openSolidColorProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(122, 123, 124, 125), ColorHelper.fromArgb(126, 127, 128, 129)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.486274509803922, 0.490196078431373, 0.47843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.501960784313725, 0.505882352941176, 0.494117647058824), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5740");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5740')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.RepeatCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5741D, 5742D), new Rectangular(5743D, 5744D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(5741, 5742));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(5743, 5744));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(135, 136, 137, 138), ColorHelper.fromArgb(139, 140, 141, 142)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(136, 137, 138, 135));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(140, 141, 142, 139));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5753");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5753')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(144, 145, 146, 147), ColorHelper.fromArgb(148, 149, 150, 151)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 146, 147, 144));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 150, 151, 148));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openCellAlphaProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5762.0, 5763.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(5762.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(5763.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineCountCesiumWriter m2 = m.openLineCountProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5764D, 5765D), new Rectangular(5766D, 5767D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(5764, 5765));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5766, 5767));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineThicknessCesiumWriter m2 = m.openLineThicknessProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5768D, 5769D), new Rectangular(5770D, 5771D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(5768, 5769));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(5770, 5771));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.LineOffsetCesiumWriter m2 = m.openLineOffsetProperty();
											try {
												m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Rectangular> createList(new Rectangular(5772D, 5773D), new Rectangular(5774D, 5775D)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(5772, 5773));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5774, 5775));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5776");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5776')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(167, 168, 169, 170), ColorHelper.fromArgb(171, 172, 173, 174)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(168, 169, 170, 167));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(172, 173, 174, 171));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(175, 176, 177, 178), ColorHelper.fromArgb(179, 180, 181, 182)));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(176, 177, 178, 175));");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
														"    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(180, 181, 182, 179));");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openOffsetProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5793.0, 5794.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(5793.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(5794.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
										{
											cesiumlanguagewriter.DoubleCesiumWriter m2 = m.openRepeatProperty();
											try {
												m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Double> createList(5795.0, 5796.0));
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(5795.0);");
												TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(5796.0);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5797");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5797')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.ImageMaterialCesiumWriter m = w2.openImageProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(188, 189, 190, 191), ColorHelper.fromArgb(192, 193, 194, 195)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.745098039215686, 0.749019607843137, 0.737254901960784), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.756862745098039, 0.76078431372549, 0.764705882352941, 0.752941176470588), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5806");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5806')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.GridMaterialCesiumWriter m = w2.openGridProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(197, 198, 199, 200), ColorHelper.fromArgb(201, 202, 203, 204)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.780392156862745, 0.784313725490196, 0.772549019607843), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.796078431372549, 0.8, 0.788235294117647), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5815");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5815')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openEvenColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(206, 207, 208, 209), ColorHelper.fromArgb(210, 211, 212, 213)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.815686274509804, 0.819607843137255, 0.807843137254902), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.827450980392157, 0.831372549019608, 0.835294117647059, 0.823529411764706), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampledmaterial5824");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampledmaterial5824')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.MaterialCesiumWriter w2 = w.openMaterialProperty();
							try {
								{
									cesiumlanguagewriter.StripeMaterialCesiumWriter m = w2.openStripeProperty();
									try {
										{
											cesiumlanguagewriter.ColorCesiumWriter m2 = m.openOddColorProperty();
											try {
												m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
														.<Color> createList(ColorHelper.fromArgb(215, 216, 217, 218), ColorHelper.fromArgb(219, 220, 221, 222)));
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.847058823529412, 0.850980392156863, 0.854901960784314, 0.843137254901961), 1e-14);");
												TextWriterHelper
														.writeLine(m_extensionsAssertionsWriter,
																"    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.866666666666667, 0.870588235294118, 0.858823529411765), 1e-14);");
											} finally {
												DisposeHelper.dispose(m2);
											}
										}
									} finally {
										DisposeHelper.dispose(m);
									}
								}
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5833");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5833')).toBeDefined();");
				{
					cesiumlanguagewriter.FanCesiumWriter w = packet.openFanProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openOutlineColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(224, 225, 226, 227), ColorHelper.fromArgb(228, 229, 230, 231)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.886274509803922, 0.890196078431373, 0.87843137254902), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.901960784313726, 0.905882352941176, 0.894117647058824), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	final private void writeSampledValuesIndividualVector() {
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5842");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5842')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.ColorCesiumWriter w2 = w.openColorProperty();
							try {
								w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Color> createList(
										ColorHelper.fromArgb(233, 234, 235, 236), ColorHelper.fromArgb(237, 238, 239, 240)));
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.917647058823529, 0.92156862745098, 0.925490196078431, 0.913725490196078), 1e-14);");
								TextWriterHelper
										.writeLine(m_extensionsAssertionsWriter,
												"    expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.937254901960784, 0.941176470588235, 0.929411764705882), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5851");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5851')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitSpherical> createList(new UnitSpherical(5852D, 5853D), new UnitSpherical(5854D, 5855D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5852, 5853)));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(5854, 5855)));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5856");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5856')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<Cartesian> createList(new Cartesian(5857D, 5858D, 5859D), new Cartesian(5860D, 5861D, 5862D)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(5857, 5858, 5859));");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(5860, 5861, 5862));");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
		{
			cesiumlanguagewriter.PacketCesiumWriter packet = m_writer.openPacket(m_output);
			try {
				packet.writeId("sampled5863");
				writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled5863')).toBeDefined();");
				{
					cesiumlanguagewriter.VectorCesiumWriter w = packet.openVectorProperty();
					try {
						{
							cesiumlanguagewriter.DirectionCesiumWriter w2 = w.openDirectionProperty();
							try {
								w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
										.<UnitCartesian> createList(new UnitCartesian(0.577251823652216, 0.577350263594858, 0.5774487035375), new UnitCartesian(0.577251873985103, 0.577350263600577,
												0.577448653216051)));
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.577251823652216, 0.577350263594858, 0.5774487035375), 1e-14);");
								TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
										"    expect(e.vector.direction.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.577251873985103, 0.577350263600577, 0.577448653216051), 1e-14);");
							} finally {
								DisposeHelper.dispose(w2);
							}
						}
					} finally {
						DisposeHelper.dispose(w);
					}
				}
			} finally {
				DisposeHelper.dispose(packet);
			}
		}
	}

	private TestContextRule rule$testContext = new TestContextRule();

	@Rule
	public TestContextRule getRule$testContext() {
		return rule$testContext;
	}
}